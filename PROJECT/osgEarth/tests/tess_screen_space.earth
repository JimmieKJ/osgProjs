<!--
osgEarth Sample - OpenGL Tessellation Shaders

This example demonstrates screen-space terrain tessellation.
-->

<map name="readymap.org" type="geocentric">
    
    <options>        
        <terrain first_lod="3" max_lod="3" skirt_ratio="0" tile_size="7" gpu_tessellation="true"/>
    </options>
    
    <image name="readymap_imagery" driver="tms" opacity="0.5">
        <url>http://readymap.org/readymap/tiles/1.0.0/7/</url>
    </image>
        
    <extensions>
    
        <terrainshader>
            <code><![CDATA[
            
                #version 430 compatibility
                #pragma vp_entryPoint "configureTess"
                #pragma vp_location   "tess_control"
                
                layout(vertices=3) out;
                
                // http://codeflow.org/entries/2010/nov/07/opengl-4-tessellation/
                
                uniform float pixelsPerEdge = 64;
                uniform vec2  viewportSize  = vec2(1024,1024);
                                
                // convert model position to viewport coordinates.
                vec2 toPixels(in vec4 pos) {    
                    vec4 clip = gl_ModelViewProjectionMatrix * pos;
                    return clamp( (clip.xy/clip.w), -1.3, 1.3) * (viewportSize*0.5);
                }
                
                // calculate a tesselation level based on the maximum edge length uniform.
                float tessLevel(in vec2 v0, in vec2 v1) {
                    return clamp(distance(v0,v1)/pixelsPerEdge, 1.0, 64.0);
                }
                
                void configureTess()
                {
                    // Only required for the first invocation:
                    if ( gl_InvocationID == 0 )
                    {                       
                        vec2 ss0 = toPixels( gl_in[0].gl_Position );
                        vec2 ss1 = toPixels( gl_in[1].gl_Position );
                        vec2 ss2 = toPixels( gl_in[2].gl_Position );
                        
                        float e0 = tessLevel(ss1, ss2);
                        float e1 = tessLevel(ss2, ss0);
                        float e2 = tessLevel(ss0, ss1);
                        
                        gl_TessLevelOuter[0] = e0;
                        gl_TessLevelOuter[1] = e1;
                        gl_TessLevelOuter[2] = e2;
                        
                        gl_TessLevelInner[0] = (e0+e1+e2)/3.0;
                    }
                }
                
            ]]></code>
        </terrainshader>
        
        <terrainshader>
            <code><![CDATA[            
                #version 410
                #pragma vp_name       "Terrain TES Shader"
                #pragma vp_entryPoint "generateVertex"
                #pragma vp_location   "tess_eval"

                // osgEarth terrain is always CCW winding
                layout(triangles, equal_spacing, ccw) in;

                // Internal helpers:
                void VP_InterpolateVertex();
                void VP_EmitVertex();
                
                // User must supply interpolators for all the base types:
                
                float VP_Interpolate3(float a, float b, float c) {
                    return dot(gl_TessCoord.xyz, vec3(a,b,c));
                }
                
                vec2 VP_Interpolate3(vec2 a, vec2 b, vec2 c) {
                    return vec2(dot(gl_TessCoord.xyz, vec3(a.x,b.x,c.x)),
                                dot(gl_TessCoord.xyz, vec3(a.y,b.y,c.y)));
                }

                vec3 VP_Interpolate3(vec3 a, vec3 b, vec3 c) {
                    return vec3(dot(gl_TessCoord.xyz, vec3(a.x,b.x,c.x)),
                                dot(gl_TessCoord.xyz, vec3(a.y,b.y,c.y)),
                                dot(gl_TessCoord.xyz, vec3(a.z,b.z,c.z)));
                }

                vec4 VP_Interpolate3(vec4 a, vec4 b, vec4 c) {
                    return vec4(dot(gl_TessCoord.xyz, vec3(a.x,b.x,c.x)),
                                dot(gl_TessCoord.xyz, vec3(a.y,b.y,c.y)),
                                dot(gl_TessCoord.xyz, vec3(a.z,b.z,c.z)),
                                dot(gl_TessCoord.xyz, vec3(a.w,b.w,c.w)));
                }
                
                // simplest possible pass-though:
                void generateVertex()
                {                    
                    VP_InterpolateVertex();
                    VP_EmitVertex();
                }
            ]]></code>
        </terrainshader>
        
        <viewpoints>
            <viewpoint name="San Francisco" heading="8.806974516644791" height="4465.397310772911" lat="37.55814749233749" long="-122.334535784141" pitch="-34.79540299384382" range="78142.53643278375" srs="+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs " />
        </viewpoints>
        
    </extensions>
</map>
