<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QNetworkCacheMetaData</name>
        <filename>qnetworkcachemetadata.html</filename>
        <member kind="typedef" type="">
            <name>RawHeader</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>RawHeader-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>RawHeaderList</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>RawHeaderList-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>AttributesMap</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>AttributesMap-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCacheMetaData</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>QNetworkCacheMetaData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCacheMetaData</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>QNetworkCacheMetaData-2</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkCacheMetaData</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>dtor.QNetworkCacheMetaData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCacheMetaData &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkCacheMetaData &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RawHeaderList</type>
            <name>rawHeaders</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>rawHeaders</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeaders</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setRawHeaders</anchor>
            <arglist>(const RawHeaderList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastModified</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>lastModified</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLastModified</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setLastModified</anchor>
            <arglist>(const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expirationDate</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>expirationDate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpirationDate</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setExpirationDate</anchor>
            <arglist>(const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveToDisk</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>saveToDisk</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSaveToDisk</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setSaveToDisk</anchor>
            <arglist>(bool allow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AttributesMap</type>
            <name>attributes</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributes</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setAttributes</anchor>
            <arglist>(const AttributesMap &amp;attributes)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractNetworkCache</name>
        <filename>qabstractnetworkcache.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractNetworkCache</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>dtor.QAbstractNetworkCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QNetworkCacheMetaData</type>
            <name>metaData</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(const QUrl &amp;url) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateMetaData</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>updateMetaData</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;metaData) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QIODevice *</type>
            <name>data</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QUrl &amp;url) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>remove</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QUrl &amp;url) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qint64</type>
            <name>cacheSize</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>cacheSize</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QIODevice *</type>
            <name>prepare</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>prepare</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;metaData) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>insert</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(QIODevice *device) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractNetworkCache</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>QAbstractNetworkCache</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHttpPart</name>
        <filename>qhttppart.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttpPart</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>QHttpPart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttpPart</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>QHttpPart-2</anchor>
            <arglist>(const QHttpPart &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHttpPart</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>dtor.QHttpPart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHttpPart &amp;</type>
            <name>operator=</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHttpPart &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QHttpPart &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QHttpPart &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QHttpPart &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeader</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>setRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBody</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>setBody</anchor>
            <arglist>(const QByteArray &amp;body)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBodyDevice</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>setBodyDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHttpMultiPart</name>
        <filename>qhttpmultipart.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>ContentType</name>
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MixedType">
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RelatedType">
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormDataType">
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlternativeType">
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttpMultiPart</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>QHttpMultiPart</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttpMultiPart</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>QHttpMultiPart-2</anchor>
            <arglist>(ContentType contentType, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHttpMultiPart</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>dtor.QHttpMultiPart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QHttpPart &amp;httpPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentType</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>setContentType</anchor>
            <arglist>(ContentType contentType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>boundary</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>boundary</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundary</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>setBoundary</anchor>
            <arglist>(const QByteArray &amp;boundary)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkAccessManager</name>
        <filename>qnetworkaccessmanager.html</filename>
        <base>QObject</base>
        <member kind="property" type="NetworkAccessibility">
            <name>networkAccessible</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>networkAccessible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Operation</name>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HeadOperation">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GetOperation">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PutOperation">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PostOperation">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeleteOperation">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomOperation">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownOperation">
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>NetworkAccessibility</name>
            <anchor>NetworkAccessibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownAccessibility">
            <anchor>NetworkAccessibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotAccessible">
            <anchor>NetworkAccessibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Accessible">
            <anchor>NetworkAccessibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkAccessManager</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>QNetworkAccessManager</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkAccessManager</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>dtor.QNetworkAccessManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedSchemes</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>supportedSchemes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAccessCache</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>clearAccessCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy</type>
            <name>proxy</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxy</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setProxy</anchor>
            <arglist>(const QNetworkProxy &amp;proxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxyFactory *</type>
            <name>proxyFactory</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>proxyFactory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxyFactory</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setProxyFactory</anchor>
            <arglist>(QNetworkProxyFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractNetworkCache *</type>
            <name>cache</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>cache</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCache</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setCache</anchor>
            <arglist>(QAbstractNetworkCache *cache)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCookieJar *</type>
            <name>cookieJar</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>cookieJar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCookieJar</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setCookieJar</anchor>
            <arglist>(QNetworkCookieJar *cookieJar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>head</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>head</anchor>
            <arglist>(const QNetworkRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>get</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QNetworkRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>post</anchor>
            <arglist>(const QNetworkRequest &amp;request, QIODevice *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>post-2</anchor>
            <arglist>(const QNetworkRequest &amp;request, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>post-3</anchor>
            <arglist>(const QNetworkRequest &amp;request, QHttpMultiPart *multiPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>put</anchor>
            <arglist>(const QNetworkRequest &amp;request, QIODevice *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>put-3</anchor>
            <arglist>(const QNetworkRequest &amp;request, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>put-2</anchor>
            <arglist>(const QNetworkRequest &amp;request, QHttpMultiPart *multiPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>deleteResource</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>deleteResource</anchor>
            <arglist>(const QNetworkRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>sendCustomRequest</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>sendCustomRequest</anchor>
            <arglist>(const QNetworkRequest &amp;request, const QByteArray &amp;verb, QIODevice *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConfiguration</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setConfiguration</anchor>
            <arglist>(const QNetworkConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>configuration</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>configuration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>activeConfiguration</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>activeConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkAccessible</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>networkAccessible-prop</anchor>
            <arglist>(NetworkAccessibility accessible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NetworkAccessibility</type>
            <name>networkAccessible</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>networkAccessible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHostEncrypted</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>connectToHostEncrypted</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, const QSslConfiguration &amp;sslConfiguration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHost</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>connectToHost</anchor>
            <arglist>(const QString &amp;hostName, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>proxyAuthenticationRequired</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>proxyAuthenticationRequired</anchor>
            <arglist>(const QNetworkProxy &amp;proxy, QAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>authenticationRequired</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>authenticationRequired</anchor>
            <arglist>(QNetworkReply *reply, QAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QNetworkReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encrypted</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>encrypted</anchor>
            <arglist>(QNetworkReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sslErrors</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>sslErrors</anchor>
            <arglist>(QNetworkReply *reply, const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preSharedKeyAuthenticationRequired</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>preSharedKeyAuthenticationRequired</anchor>
            <arglist>(QNetworkReply *reply, QSslPreSharedKeyAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>networkAccessibleChanged</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>networkAccessible-prop</anchor>
            <arglist>(QNetworkAccessManager::NetworkAccessibility accessible)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>createRequest</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>createRequest</anchor>
            <arglist>(Operation op, const QNetworkRequest &amp;req, QIODevice *outgoingData)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedSchemesImplementation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>supportedSchemesImplementation</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkCookie</name>
        <filename>qnetworkcookie.html</filename>
        <member kind="enum">
            <name>RawForm</name>
            <anchor>RawForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NameAndValueOnly">
            <anchor>RawForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Full">
            <anchor>RawForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCookie</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>QNetworkCookie</anchor>
            <arglist>(const QByteArray &amp;name, const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCookie</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>QNetworkCookie-2</anchor>
            <arglist>(const QNetworkCookie &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkCookie</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>dtor.QNetworkCookie</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCookie &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkCookie &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkCookie &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkCookie &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkCookie &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSecure</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>isSecure</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSecure</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setSecure</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHttpOnly</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>isHttpOnly</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHttpOnly</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setHttpOnly</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSessionCookie</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>isSessionCookie</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expirationDate</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>expirationDate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpirationDate</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setExpirationDate</anchor>
            <arglist>(const QDateTime &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>domain</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>domain</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDomain</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setDomain</anchor>
            <arglist>(const QString &amp;domain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>name</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QByteArray &amp;cookieName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>value</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toRawForm</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>toRawForm</anchor>
            <arglist>(RawForm form) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSameIdentifier</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>hasSameIdentifier</anchor>
            <arglist>(const QNetworkCookie &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QNetworkCookie&gt;</type>
            <name>parseCookies</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>parseCookies</anchor>
            <arglist>(const QByteArray &amp;cookieString)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkCookieJar</name>
        <filename>qnetworkcookiejar.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCookieJar</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>QNetworkCookieJar</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkCookieJar</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>dtor.QNetworkCookieJar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QNetworkCookie&gt;</type>
            <name>cookiesForUrl</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>cookiesForUrl</anchor>
            <arglist>(const QUrl &amp;url) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setCookiesFromUrl</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>setCookiesFromUrl</anchor>
            <arglist>(const QList&lt;QNetworkCookie&gt; &amp;cookieList, const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertCookie</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>insertCookie</anchor>
            <arglist>(const QNetworkCookie &amp;cookie)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>updateCookie</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>updateCookie</anchor>
            <arglist>(const QNetworkCookie &amp;cookie)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>deleteCookie</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>deleteCookie</anchor>
            <arglist>(const QNetworkCookie &amp;cookie)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QList&lt;QNetworkCookie&gt;</type>
            <name>allCookies</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>allCookies</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setAllCookies</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>setAllCookies</anchor>
            <arglist>(const QList&lt;QNetworkCookie&gt; &amp;cookieList)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validateCookie</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>validateCookie</anchor>
            <arglist>(const QNetworkCookie &amp;cookie, const QUrl &amp;url) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkDiskCache</name>
        <filename>qnetworkdiskcache.html</filename>
        <base>QAbstractNetworkCache</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkDiskCache</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>QNetworkDiskCache</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkDiskCache</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>dtor.QNetworkDiskCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>cacheDirectory</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>cacheDirectory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCacheDirectory</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>setCacheDirectory</anchor>
            <arglist>(const QString &amp;cacheDir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>maximumCacheSize</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>maximumCacheSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumCacheSize</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>setMaximumCacheSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>cacheSize</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>cacheSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkCacheMetaData</type>
            <name>metaData</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateMetaData</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>updateMetaData</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;metaData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QIODevice *</type>
            <name>data</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>remove</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QIODevice *</type>
            <name>prepare</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>prepare</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;metaData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>insert</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCacheMetaData</type>
            <name>fileMetaData</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>fileMetaData</anchor>
            <arglist>(const QString &amp;fileName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>expire</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>expire</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkReply</name>
        <filename>qnetworkreply.html</filename>
        <base>QIODevice</base>
        <member kind="enum">
            <name>NetworkError</name>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionRefusedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoteHostClosedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HostNotFoundError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TimeoutError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OperationCanceledError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslHandshakeFailedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TemporaryNetworkFailureError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkSessionFailedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundRequestNotAllowedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownNetworkError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyConnectionRefusedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyConnectionClosedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyNotFoundError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyTimeoutError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyAuthenticationRequiredError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownProxyError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentAccessDenied">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentOperationNotPermittedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentNotFoundError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AuthenticationRequiredError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentReSendError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentConflictError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentGoneError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownContentError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProtocolUnknownError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProtocolInvalidOperationError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProtocolFailure">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InternalServerError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OperationNotImplementedError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceUnavailableError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownServerError">
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkReply</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>dtor.QNetworkReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readBufferSize</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>readBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager *</type>
            <name>manager</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>manager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager::Operation</type>
            <name>operation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>operation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkRequest</type>
            <name>request</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NetworkError</type>
            <name>error</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>header</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>header</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRawHeader</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>hasRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>rawHeaderList</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>rawHeaderList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rawHeader</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>rawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>RawHeaderPair</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>RawHeaderPair-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;RawHeaderPair&gt; &amp;</type>
            <name>rawHeaderPairs</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>rawHeaderPairs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>attribute</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(QNetworkRequest::Attribute code) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>sslConfiguration</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>sslConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslConfiguration</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setSslConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>ignoreSslErrors-2</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>abort</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>ignoreSslErrors</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataChanged</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>metaDataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QNetworkReply::NetworkError code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encrypted</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>encrypted</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sslErrors</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>sslErrors</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preSharedKeyAuthenticationRequired</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>preSharedKeyAuthenticationRequired</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>uploadProgress</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>uploadProgress</anchor>
            <arglist>(qint64 bytesSent, qint64 bytesTotal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>downloadProgress</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>downloadProgress</anchor>
            <arglist>(qint64 bytesReceived, qint64 bytesTotal)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QNetworkReply</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>QNetworkReply</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setOperation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setOperation</anchor>
            <arglist>(QNetworkAccessManager::Operation operation)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRequest</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setRequest</anchor>
            <arglist>(const QNetworkRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(NetworkError errorCode, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFinished</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setFinished</anchor>
            <arglist>(bool finished)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeader</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName, const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(QNetworkRequest::Attribute code, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sslConfigurationImplementation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>sslConfigurationImplementation</anchor>
            <arglist>(QSslConfiguration &amp;configuration) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSslConfigurationImplementation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setSslConfigurationImplementation</anchor>
            <arglist>(const QSslConfiguration &amp;configuration)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ignoreSslErrorsImplementation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>ignoreSslErrorsImplementation</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkRequest</name>
        <filename>qnetworkrequest.html</filename>
        <member kind="enum">
            <name>KnownHeaders</name>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentTypeHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentLengthHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocationHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastModifiedHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CookieHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SetCookieHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentDispositionHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserAgentHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServerHeader">
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Attribute</name>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HttpStatusCodeAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HttpReasonPhraseAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RedirectionTargetAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionEncryptedAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheLoadControlAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheSaveControlAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SourceIsFromCacheAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoNotBufferUploadDataAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HttpPipeliningAllowedAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HttpPipeliningWasUsedAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomVerbAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CookieLoadControlAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AuthenticationReuseAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CookieSaveControlAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaximumDownloadBufferSizeAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DownloadBufferAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SynchronousRequestAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundRequestAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SpdyAllowedAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SpdyWasUsedAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmitAllUploadProgressSignalsAttribute">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="User">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserMax">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CacheLoadControl</name>
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlwaysNetwork">
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferNetwork">
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferCache">
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlwaysCache">
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LoadControl</name>
            <anchor>LoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Automatic">
            <anchor>LoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Manual">
            <anchor>LoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Priority</name>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkRequest</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>QNetworkRequest</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkRequest</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>QNetworkRequest-2</anchor>
            <arglist>(const QNetworkRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkRequest</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>dtor.QNetworkRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkRequest &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>header</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>header</anchor>
            <arglist>(KnownHeaders header) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(KnownHeaders header, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRawHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>hasRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>rawHeaderList</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>rawHeaderList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rawHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>rawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>attribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(Attribute code, const QVariant &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(Attribute code, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>sslConfiguration</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>sslConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslConfiguration</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setSslConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOriginatingObject</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setOriginatingObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>originatingObject</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>originatingObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Priority</type>
            <name>priority</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPriority</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setPriority</anchor>
            <arglist>(Priority priority)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkConfigurationManager</name>
        <filename>qnetworkconfigurationmanager.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Capability</name>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanStartAndStopInterfaces">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectConnectionRouting">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SystemSessionSupport">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationLevelRoaming">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForcedRoaming">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DataStatistics">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkSessionRequired">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkConfigurationManager::Capability">
            <name>Capabilities</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfigurationManager</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>QNetworkConfigurationManager</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkConfigurationManager</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>dtor.QNetworkConfigurationManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfigurationManager::Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>defaultConfiguration</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>defaultConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNetworkConfiguration&gt;</type>
            <name>allConfigurations</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>allConfigurations</anchor>
            <arglist>(QNetworkConfiguration::StateFlags filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>configurationFromIdentifier</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationFromIdentifier</anchor>
            <arglist>(const QString &amp;identifier) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOnline</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>isOnline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateConfigurations</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>updateConfigurations</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationAdded</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationAdded</anchor>
            <arglist>(const QNetworkConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationRemoved</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationRemoved</anchor>
            <arglist>(const QNetworkConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationChanged</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationChanged</anchor>
            <arglist>(const QNetworkConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>onlineStateChanged</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>onlineStateChanged</anchor>
            <arglist>(bool isOnline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateCompleted</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>updateCompleted</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkConfiguration</name>
        <filename>qnetworkconfiguration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>QNetworkConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>QNetworkConfiguration-2</anchor>
            <arglist>(const QNetworkConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>dtor.QNetworkConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkConfiguration &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkConfiguration &amp;other) const</arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InternetAccessPoint">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceNetwork">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserChoice">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Purpose</name>
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownPurpose">
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PublicPurpose">
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrivatePurpose">
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceSpecificPurpose">
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StateFlag</name>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Undefined">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Defined">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Discovered">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Active">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkConfiguration::StateFlag">
            <name>StateFlags</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BearerType</name>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerUnknown">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerEthernet">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerWLAN">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bearer2G">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerCDMA2000">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerWCDMA">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerHSPA">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerBluetooth">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerWiMAX">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerEVDO">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BearerLTE">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bearer3G">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bearer4G">
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StateFlags</type>
            <name>state</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Purpose</type>
            <name>purpose</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>purpose</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BearerType</type>
            <name>bearerType</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>bearerType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BearerType</type>
            <name>bearerTypeFamily</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>bearerTypeFamily</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>bearerTypeName</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>bearerTypeName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>identifier</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>identifier</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoamingAvailable</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>isRoamingAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNetworkConfiguration&gt;</type>
            <name>children</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>children</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkSession</name>
        <filename>qnetworksession.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotAvailable">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Connecting">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Connected">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Closing">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Disconnected">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Roaming">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SessionError</name>
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownSessionError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SessionAbortedError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoamingError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OperationNotSupportedError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidConfigurationError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>UsagePolicy</name>
            <anchor>UsagePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoPolicy">
            <anchor>UsagePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoBackgroundTrafficPolicy">
            <anchor>UsagePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkSession::UsagePolicy">
            <name>UsagePolicies</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>UsagePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkSession</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>QNetworkSession</anchor>
            <arglist>(const QNetworkConfiguration &amp;connectionConfig, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkSession</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>dtor.QNetworkSession</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpen</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>isOpen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>configuration</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>configuration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface</type>
            <name>interface</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>interface</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SessionError</type>
            <name>error</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>sessionProperty</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>sessionProperty</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSessionProperty</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>setSessionProperty</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bytesWritten</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>bytesWritten</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bytesReceived</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>bytesReceived</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>activeTime</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>activeTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkSession::UsagePolicies</type>
            <name>usagePolicies</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>usagePolicies</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForOpened</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>waitForOpened</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>open</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>migrate</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>migrate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>ignore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reject</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>reject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QNetworkSession::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opened</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>opened</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closed</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>closed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QNetworkSession::SessionError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preferredConfigurationChanged</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>preferredConfigurationChanged</anchor>
            <arglist>(const QNetworkConfiguration &amp;config, bool isSeamless)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConfigurationActivated</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>newConfigurationActivated</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>usagePoliciesChanged</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>usagePoliciesChanged</anchor>
            <arglist>(QNetworkSession::UsagePolicies usagePolicies)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAuthenticator</name>
        <filename>qauthenticator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAuthenticator</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>QAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAuthenticator</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>dtor.QAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAuthenticator</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>QAuthenticator-2</anchor>
            <arglist>(const QAuthenticator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAuthenticator &amp;</type>
            <name>operator=</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QAuthenticator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QAuthenticator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QAuthenticator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>user</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>user</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUser</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>setUser</anchor>
            <arglist>(const QString &amp;user)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>password</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>password</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPassword</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>setPassword</anchor>
            <arglist>(const QString &amp;password)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>realm</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>realm</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>option</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>option</anchor>
            <arglist>(const QString &amp;opt) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantHash</type>
            <name>options</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>options</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(const QString &amp;opt, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsDomainNameRecord</name>
        <filename>qdnsdomainnamerecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsDomainNameRecord</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>QDnsDomainNameRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsDomainNameRecord</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>QDnsDomainNameRecord-2</anchor>
            <arglist>(const QDnsDomainNameRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsDomainNameRecord</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>dtor.QDnsDomainNameRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsDomainNameRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsDomainNameRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDnsDomainNameRecord &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsHostAddressRecord</name>
        <filename>qdnshostaddressrecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsHostAddressRecord</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>QDnsHostAddressRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsHostAddressRecord</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>QDnsHostAddressRecord-2</anchor>
            <arglist>(const QDnsHostAddressRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsHostAddressRecord</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>dtor.QDnsHostAddressRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsHostAddressRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>value</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsHostAddressRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDnsHostAddressRecord &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsMailExchangeRecord</name>
        <filename>qdnsmailexchangerecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsMailExchangeRecord</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>QDnsMailExchangeRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsMailExchangeRecord</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>QDnsMailExchangeRecord-2</anchor>
            <arglist>(const QDnsMailExchangeRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsMailExchangeRecord</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>dtor.QDnsMailExchangeRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsMailExchangeRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>exchange</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>exchange</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>preference</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>preference</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsMailExchangeRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDnsMailExchangeRecord &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsServiceRecord</name>
        <filename>qdnsservicerecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsServiceRecord</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>QDnsServiceRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsServiceRecord</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>QDnsServiceRecord-2</anchor>
            <arglist>(const QDnsServiceRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsServiceRecord</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>dtor.QDnsServiceRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsServiceRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>port</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>port</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>priority</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>target</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>weight</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsServiceRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDnsServiceRecord &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsTextRecord</name>
        <filename>qdnstextrecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsTextRecord</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>QDnsTextRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsTextRecord</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>QDnsTextRecord-2</anchor>
            <arglist>(const QDnsTextRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsTextRecord</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>dtor.QDnsTextRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsTextRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>values</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsTextRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDnsTextRecord &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsLookup</name>
        <filename>qdnslookup.html</filename>
        <base>QObject</base>
        <member kind="property" type="Error">
            <name>error</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>error-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>errorString</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>errorString-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Type">
            <name>type</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QHostAddress">
            <name>nameserver</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameserver-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResolverError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OperationCancelledError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidRequestError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidReplyError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServerFailureError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServerRefusedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotFoundError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AAAA">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ANY">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CNAME">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MX">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NS">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PTR">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SRV">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TXT">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsLookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>QDnsLookup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsLookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>QDnsLookup-2</anchor>
            <arglist>(Type type, const QString &amp;name, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsLookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>QDnsLookup-3</anchor>
            <arglist>(Type type, const QString &amp;name, const QHostAddress &amp;nameserver, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsLookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>dtor.QDnsLookup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>error-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>errorString-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(QDnsLookup::Type )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>nameserver</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameserver-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameserver</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameserver-prop</anchor>
            <arglist>(const QHostAddress &amp;nameserver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsDomainNameRecord&gt;</type>
            <name>canonicalNameRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>canonicalNameRecords</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsHostAddressRecord&gt;</type>
            <name>hostAddressRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>hostAddressRecords</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsMailExchangeRecord&gt;</type>
            <name>mailExchangeRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>mailExchangeRecords</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsDomainNameRecord&gt;</type>
            <name>nameServerRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameServerRecords</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsDomainNameRecord&gt;</type>
            <name>pointerRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>pointerRecords</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsServiceRecord&gt;</type>
            <name>serviceRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>serviceRecords</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsTextRecord&gt;</type>
            <name>textRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>textRecords</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>lookup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>errorString-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>typeChanged</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameserverChanged</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameserver-prop</anchor>
            <arglist>(const QHostAddress &amp;nameserver)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHostAddress</name>
        <filename>qhostaddress.html</filename>
        <member kind="enum">
            <name>SpecialAddress</name>
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Broadcast">
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalHost">
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalHostIPv6">
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Any">
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyIPv6">
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyIPv4">
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-2</anchor>
            <arglist>(quint32 ip4Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-3</anchor>
            <arglist>(quint8 *ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-4</anchor>
            <arglist>(const quint8 *ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-5</anchor>
            <arglist>(const Q_IPV6ADDR &amp;ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-6</anchor>
            <arglist>(const sockaddr *sockaddr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-7</anchor>
            <arglist>(const QString &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-8</anchor>
            <arglist>(const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-9</anchor>
            <arglist>(SpecialAddress address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>dtor.QHostAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress &amp;</type>
            <name>operator=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress &amp;</type>
            <name>operator=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QString &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress</anchor>
            <arglist>(quint32 ip4Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-2</anchor>
            <arglist>(quint8 *ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-3</anchor>
            <arglist>(const quint8 *ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-4</anchor>
            <arglist>(const Q_IPV6ADDR &amp;ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-6</anchor>
            <arglist>(const sockaddr *sockaddr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-5</anchor>
            <arglist>(const QString &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::NetworkLayerProtocol</type>
            <name>protocol</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>protocol</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>toIPv4Address</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>toIPv4Address</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>toIPv4Address</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>toIPv4Address-2</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Q_IPV6ADDR</type>
            <name>toIPv6Address</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>toIPv6Address</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scopeId</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>scopeId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScopeId</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setScopeId</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QHostAddress &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(SpecialAddress other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QHostAddress &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(SpecialAddress other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInSubnet</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isInSubnet</anchor>
            <arglist>(const QHostAddress &amp;subnet, int netmask) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInSubnet</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isInSubnet-2</anchor>
            <arglist>(const QPair&lt;QHostAddress, int&gt; &amp;subnet) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoopback</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isLoopback</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPair&lt;QHostAddress, int&gt;</type>
            <name>parseSubnet</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>parseSubnet</anchor>
            <arglist>(const QString &amp;subnet)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHostInfo</name>
        <filename>qhostinfo.html</filename>
        <member kind="enum">
            <name>HostInfoError</name>
            <anchor>HostInfoError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>HostInfoError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HostNotFound">
            <anchor>HostInfoError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>HostInfoError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostInfo</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>QHostInfo</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostInfo</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>QHostInfo-2</anchor>
            <arglist>(const QHostInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHostInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHostInfo</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>dtor.QHostInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>hostName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>hostName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHostName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setHostName</anchor>
            <arglist>(const QString &amp;hostName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QHostAddress&gt;</type>
            <name>addresses</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>addresses</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddresses</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setAddresses</anchor>
            <arglist>(const QList&lt;QHostAddress&gt; &amp;addresses)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>HostInfoError</type>
            <name>error</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(HostInfoError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorString</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setErrorString</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLookupId</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setLookupId</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lookupId</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>lookupId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>lookupHost</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>lookupHost</anchor>
            <arglist>(const QString &amp;name, QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>abortHostLookup</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>abortHostLookup</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QHostInfo</type>
            <name>fromName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>fromName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>localHostName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>localHostName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>localDomainName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>localDomainName</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkAddressEntry</name>
        <filename>qnetworkaddressentry.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkAddressEntry</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>QNetworkAddressEntry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkAddressEntry</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>QNetworkAddressEntry-2</anchor>
            <arglist>(const QNetworkAddressEntry &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAddressEntry &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkAddressEntry &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkAddressEntry</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>dtor.QNetworkAddressEntry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkAddressEntry &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkAddressEntry &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkAddressEntry &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>ip</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>ip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIp</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setIp</anchor>
            <arglist>(const QHostAddress &amp;newIp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>netmask</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>netmask</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetmask</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setNetmask</anchor>
            <arglist>(const QHostAddress &amp;newNetmask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>prefixLength</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>prefixLength</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrefixLength</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setPrefixLength</anchor>
            <arglist>(int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>broadcast</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>broadcast</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBroadcast</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setBroadcast</anchor>
            <arglist>(const QHostAddress &amp;newBroadcast)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkInterface</name>
        <filename>qnetworkinterface.html</filename>
        <member kind="enum">
            <name>InterfaceFlag</name>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IsUp">
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IsRunning">
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanBroadcast">
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IsLoopBack">
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IsPointToPoint">
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanMulticast">
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkInterface::InterfaceFlag">
            <name>InterfaceFlags</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkInterface</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>QNetworkInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkInterface</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>QNetworkInterface-2</anchor>
            <arglist>(const QNetworkInterface &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkInterface &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkInterface</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>dtor.QNetworkInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkInterface &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>index</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>index</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>humanReadableName</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>humanReadableName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InterfaceFlags</type>
            <name>flags</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>hardwareAddress</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>hardwareAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNetworkAddressEntry&gt;</type>
            <name>addressEntries</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>addressEntries</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNetworkInterface</type>
            <name>interfaceFromName</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>interfaceFromName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNetworkInterface</type>
            <name>interfaceFromIndex</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>interfaceFromIndex</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QNetworkInterface&gt;</type>
            <name>allInterfaces</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>allInterfaces</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QHostAddress&gt;</type>
            <name>allAddresses</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>allAddresses</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkProxyQuery</name>
        <filename>qnetworkproxyquery.html</filename>
        <member kind="enum">
            <name>QueryType</name>
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TcpSocket">
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UdpSocket">
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TcpServer">
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UrlRequest">
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-2</anchor>
            <arglist>(const QUrl &amp;requestUrl, QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-3</anchor>
            <arglist>(const QString &amp;hostname, int port, const QString &amp;protocolTag, QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-4</anchor>
            <arglist>(quint16 bindPort, const QString &amp;protocolTag, QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-5</anchor>
            <arglist>(const QNetworkProxyQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-6</anchor>
            <arglist>(const QNetworkConfiguration &amp;networkConfiguration, const QUrl &amp;requestUrl, QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-7</anchor>
            <arglist>(const QNetworkConfiguration &amp;networkConfiguration, const QString &amp;hostname, int port, const QString &amp;protocolTag, QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-8</anchor>
            <arglist>(const QNetworkConfiguration &amp;networkConfiguration, quint16 bindPort, const QString &amp;protocolTag, QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>dtor.QNetworkProxyQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxyQuery &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkProxyQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkProxyQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkProxyQuery &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkProxyQuery &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QueryType</type>
            <name>queryType</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>queryType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQueryType</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setQueryType</anchor>
            <arglist>(QueryType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>peerPort</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>peerPort</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerPort</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setPeerPort</anchor>
            <arglist>(int port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerHostName</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>peerHostName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerHostName</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setPeerHostName</anchor>
            <arglist>(const QString &amp;hostname)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localPort</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>localPort</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalPort</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setLocalPort</anchor>
            <arglist>(int port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>protocolTag</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>protocolTag</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProtocolTag</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setProtocolTag</anchor>
            <arglist>(const QString &amp;protocolTag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>networkConfiguration</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>networkConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkConfiguration</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setNetworkConfiguration</anchor>
            <arglist>(const QNetworkConfiguration &amp;networkConfiguration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkProxy</name>
        <filename>qnetworkproxy.html</filename>
        <member kind="enum">
            <name>ProxyType</name>
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultProxy">
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Socks5Proxy">
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoProxy">
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HttpProxy">
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HttpCachingProxy">
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FtpCachingProxy">
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Capability</name>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TunnelingCapability">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListeningCapability">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UdpTunnelingCapability">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CachingCapability">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HostNameLookupCapability">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkProxy::Capability">
            <name>Capabilities</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>QNetworkProxy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>QNetworkProxy-2</anchor>
            <arglist>(ProxyType type, const QString &amp;hostName, quint16 port, const QString &amp;user, const QString &amp;password)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>QNetworkProxy-3</anchor>
            <arglist>(const QNetworkProxy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkProxy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>dtor.QNetworkProxy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkProxy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkProxy &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkProxy &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(QNetworkProxy::ProxyType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy::ProxyType</type>
            <name>type</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapabilities</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setCapabilities</anchor>
            <arglist>(Capabilities capabilities)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCachingProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>isCachingProxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTransparentProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>isTransparentProxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUser</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setUser</anchor>
            <arglist>(const QString &amp;user)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>user</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>user</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPassword</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setPassword</anchor>
            <arglist>(const QString &amp;password)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>password</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>password</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHostName</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setHostName</anchor>
            <arglist>(const QString &amp;hostName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>hostName</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>hostName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPort</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setPort</anchor>
            <arglist>(quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>port</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>port</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setApplicationProxy</anchor>
            <arglist>(const QNetworkProxy &amp;networkProxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNetworkProxy</type>
            <name>applicationProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>applicationProxy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>header</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>header</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRawHeader</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>hasRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>rawHeaderList</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>rawHeaderList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rawHeader</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>rawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeader</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkProxyFactory</name>
        <filename>qnetworkproxyfactory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyFactory</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>QNetworkProxyFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkProxyFactory</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>dtor.QNetworkProxyFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QNetworkProxy&gt;</type>
            <name>queryProxy</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>queryProxy</anchor>
            <arglist>(const QNetworkProxyQuery &amp;query) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setUseSystemConfiguration</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>setUseSystemConfiguration</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationProxyFactory</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>setApplicationProxyFactory</anchor>
            <arglist>(QNetworkProxyFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QNetworkProxy&gt;</type>
            <name>proxyForQuery</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>proxyForQuery</anchor>
            <arglist>(const QNetworkProxyQuery &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QNetworkProxy&gt;</type>
            <name>systemProxyForQuery</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>systemProxyForQuery</anchor>
            <arglist>(const QNetworkProxyQuery &amp;query)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractSocket</name>
        <filename>qabstractsocket.html</filename>
        <base>QIODevice</base>
        <member kind="enum">
            <name>SocketType</name>
            <anchor>SocketType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TcpSocket">
            <anchor>SocketType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UdpSocket">
            <anchor>SocketType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownSocketType">
            <anchor>SocketType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>NetworkLayerProtocol</name>
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IPv4Protocol">
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IPv6Protocol">
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyIPProtocol">
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownNetworkLayerProtocol">
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SocketError</name>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionRefusedError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoteHostClosedError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HostNotFoundError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SocketAccessError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SocketResourceError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SocketTimeoutError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DatagramTooLargeError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AddressInUseError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SocketAddressNotAvailableError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedSocketOperationError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnfinishedSocketOperationError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyAuthenticationRequiredError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslHandshakeFailedError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyConnectionRefusedError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyConnectionClosedError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyConnectionTimeoutError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyNotFoundError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProxyProtocolError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OperationError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslInternalError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslInvalidUserDataError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TemporaryError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownSocketError">
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SocketState</name>
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnconnectedState">
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HostLookupState">
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectingState">
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectedState">
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BoundState">
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListeningState">
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClosingState">
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SocketOption</name>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowDelayOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeepAliveOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MulticastTtlOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MulticastLoopbackOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TypeOfServiceOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SendBufferSizeSocketOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReceiveBufferSizeSocketOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BindFlag</name>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultForPlatform">
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShareAddress">
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontShareAddress">
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReuseAddressHint">
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QAbstractSocket::BindFlag">
            <name>BindMode</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PauseMode</name>
            <anchor>PauseMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PauseNever">
            <anchor>PauseMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PauseOnSslErrors">
            <anchor>PauseMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QAbstractSocket::PauseMode">
            <name>PauseModes</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>PauseMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractSocket</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>QAbstractSocket</anchor>
            <arglist>(SocketType socketType, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractSocket</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>dtor.QAbstractSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resume</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PauseModes</type>
            <name>pauseMode</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>pauseMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPauseMode</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setPauseMode</anchor>
            <arglist>(PauseModes pauseMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port, BindMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>bind-2</anchor>
            <arglist>(quint16 port, BindMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectToHost</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>connectToHost</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, OpenMode openMode, NetworkLayerProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectToHost</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>connectToHost-2</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port, OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>disconnectFromHost</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>disconnectFromHost</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>localPort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>localPort</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>localAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>localAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>peerPort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>peerPort</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>peerAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>peerAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerName</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>peerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readBufferSize</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>readBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qintptr</type>
            <name>socketDescriptor</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>socketDescriptor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(qintptr socketDescriptor, SocketState socketState, OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSocketOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setSocketOption</anchor>
            <arglist>(QAbstractSocket::SocketOption option, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>socketOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>socketOption</anchor>
            <arglist>(QAbstractSocket::SocketOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SocketType</type>
            <name>socketType</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>socketType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SocketState</type>
            <name>state</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SocketError</type>
            <name>error</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForConnected</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>waitForConnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForDisconnected</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>waitForDisconnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxy</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setProxy</anchor>
            <arglist>(const QNetworkProxy &amp;networkProxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy</type>
            <name>proxy</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hostFound</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>hostFound</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connected</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>connected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnected</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>disconnected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QAbstractSocket::SocketState socketState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QAbstractSocket::SocketError socketError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>proxyAuthenticationRequired</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>proxyAuthenticationRequired</anchor>
            <arglist>(const QNetworkProxy &amp;proxy, QAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readLineData</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>readLineData</anchor>
            <arglist>(char *data, qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSocketState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setSocketState</anchor>
            <arglist>(SocketState state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSocketError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setSocketError</anchor>
            <arglist>(SocketError socketError)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalPort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setLocalPort</anchor>
            <arglist>(quint16 port)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setLocalAddress</anchor>
            <arglist>(const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerPort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setPeerPort</anchor>
            <arglist>(quint16 port)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setPeerAddress</anchor>
            <arglist>(const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerName</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setPeerName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLocalServer</name>
        <filename>qlocalserver.html</filename>
        <base>QObject</base>
        <member kind="property" type="SocketOptions">
            <name>socketOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>socketOptions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConnection</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>newConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>SocketOption</name>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoOptions">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserAccessOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GroupAccessOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OtherAccessOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WorldAccessOption">
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QLocalServer::SocketOption">
            <name>SocketOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocalServer</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>QLocalServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLocalServer</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>dtor.QLocalServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasPendingConnections</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>hasPendingConnections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isListening</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>isListening</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>listen</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>listen</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>listen</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>listen-2</anchor>
            <arglist>(qintptr socketDescriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxPendingConnections</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>maxPendingConnections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLocalSocket *</type>
            <name>nextPendingConnection</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>nextPendingConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serverName</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>serverName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fullServerName</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>fullServerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>removeServer</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>removeServer</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketError</type>
            <name>serverError</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>serverError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxPendingConnections</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>setMaxPendingConnections</anchor>
            <arglist>(int numConnections)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForNewConnection</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>waitForNewConnection</anchor>
            <arglist>(int msec, bool *timedOut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSocketOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>socketOptions-prop</anchor>
            <arglist>(SocketOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SocketOptions</type>
            <name>socketOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>socketOptions-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>incomingConnection</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>incomingConnection</anchor>
            <arglist>(quintptr socketDescriptor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLocalSocket</name>
        <filename>qlocalsocket.html</filename>
        <base>QIODevice</base>
        <member kind="enum">
            <name>LocalSocketError</name>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionRefusedError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PeerClosedError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServerNotFoundError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SocketAccessError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SocketResourceError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SocketTimeoutError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DatagramTooLargeError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedSocketOperationError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownSocketError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OperationError">
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LocalSocketState</name>
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnconnectedState">
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectingState">
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectedState">
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClosingState">
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocalSocket</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>QLocalSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLocalSocket</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>dtor.QLocalSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToServer</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>connectToServer</anchor>
            <arglist>(OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToServer</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>connectToServer-2</anchor>
            <arglist>(const QString &amp;name, OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnectFromServer</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>disconnectFromServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServerName</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>setServerName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serverName</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>serverName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fullServerName</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>fullServerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LocalSocketError</type>
            <name>error</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readBufferSize</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>readBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(qintptr socketDescriptor, LocalSocketState socketState, OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>socketDescriptor</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>socketDescriptor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LocalSocketState</type>
            <name>state</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForConnected</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>waitForConnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForDisconnected</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>waitForDisconnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connected</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>connected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnected</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>disconnected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QLocalSocket::LocalSocketError socketError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QLocalSocket::LocalSocketState socketState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 c)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 c)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTcpServer</name>
        <filename>qtcpserver.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTcpServer</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>QTcpServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTcpServer</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>dtor.QTcpServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>listen</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>listen</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isListening</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>isListening</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxPendingConnections</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>setMaxPendingConnections</anchor>
            <arglist>(int numConnections)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxPendingConnections</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>maxPendingConnections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>serverPort</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>serverPort</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>serverAddress</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>serverAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>socketDescriptor</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>socketDescriptor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(qintptr socketDescriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForNewConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>waitForNewConnection</anchor>
            <arglist>(int msec, bool *timedOut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasPendingConnections</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>hasPendingConnections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QTcpSocket *</type>
            <name>nextPendingConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>nextPendingConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketError</type>
            <name>serverError</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>serverError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pauseAccepting</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>pauseAccepting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resumeAccepting</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>resumeAccepting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxy</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>setProxy</anchor>
            <arglist>(const QNetworkProxy &amp;networkProxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy</type>
            <name>proxy</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>incomingConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>incomingConnection</anchor>
            <arglist>(qintptr socketDescriptor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addPendingConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>addPendingConnection</anchor>
            <arglist>(QTcpSocket *socket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>newConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptError</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>acceptError</anchor>
            <arglist>(QAbstractSocket::SocketError socketError)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTcpSocket</name>
        <filename>qtcpsocket.html</filename>
        <base>QAbstractSocket</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTcpSocket</name>
            <anchorfile>qtcpsocket.html</anchorfile>
            <anchor>QTcpSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTcpSocket</name>
            <anchorfile>qtcpsocket.html</anchorfile>
            <anchor>dtor.QTcpSocket</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUdpSocket</name>
        <filename>qudpsocket.html</filename>
        <base>QAbstractSocket</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUdpSocket</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>QUdpSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QUdpSocket</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>dtor.QUdpSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>joinMulticastGroup</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>joinMulticastGroup</anchor>
            <arglist>(const QHostAddress &amp;groupAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>joinMulticastGroup</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>joinMulticastGroup-2</anchor>
            <arglist>(const QHostAddress &amp;groupAddress, const QNetworkInterface &amp;iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>leaveMulticastGroup</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>leaveMulticastGroup</anchor>
            <arglist>(const QHostAddress &amp;groupAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>leaveMulticastGroup</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>leaveMulticastGroup-2</anchor>
            <arglist>(const QHostAddress &amp;groupAddress, const QNetworkInterface &amp;iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface</type>
            <name>multicastInterface</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>multicastInterface</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMulticastInterface</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>setMulticastInterface</anchor>
            <arglist>(const QNetworkInterface &amp;iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPendingDatagrams</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>hasPendingDatagrams</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>pendingDatagramSize</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>pendingDatagramSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readDatagram</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>readDatagram</anchor>
            <arglist>(char *data, qint64 maxSize, QHostAddress *address, quint16 *port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>writeDatagram</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>writeDatagram</anchor>
            <arglist>(const char *data, qint64 size, const QHostAddress &amp;address, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>writeDatagram</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>writeDatagram-2</anchor>
            <arglist>(const QByteArray &amp;datagram, const QHostAddress &amp;host, quint16 port)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QSsl</name>
        <filename>qssl.html</filename>
        <member kind="enum">
            <name>KeyType</name>
            <anchor>KeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrivateKey">
            <anchor>KeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PublicKey">
            <anchor>KeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>EncodingFormat</name>
            <anchor>EncodingFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pem">
            <anchor>EncodingFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Der">
            <anchor>EncodingFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>KeyAlgorithm</name>
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Opaque">
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rsa">
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dsa">
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ec">
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AlternativeNameEntryType</name>
            <anchor>AlternativeNameEntryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmailEntry">
            <anchor>AlternativeNameEntryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DnsEntry">
            <anchor>AlternativeNameEntryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>AlternateNameEntryType</name>
            <anchorfile>qssl-obsolete.html</anchorfile>
            <anchor>AlternateNameEntryType-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SslProtocol</name>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslV3">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslV2">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TlsV1_0">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TlsV1">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TlsV1_1">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TlsV1_2">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyProtocol">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TlsV1SslV3">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SecureProtocols">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TlsV1_0OrLater">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TlsV1_1OrLater">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TlsV1_2OrLater">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownProtocol">
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SslOption</name>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslOptionDisableEmptyFragments">
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslOptionDisableSessionTickets">
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslOptionDisableCompression">
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslOptionDisableServerNameIndication">
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslOptionDisableLegacyRenegotiation">
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslOptionDisableSessionSharing">
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslOptionDisableSessionPersistence">
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSsl::SslOption">
            <name>SslOptions</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslCertificate</name>
        <filename>qsslcertificate.html</filename>
        <member kind="enum">
            <name>SubjectInfo</name>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Organization">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommonName">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalityName">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrganizationalUnitName">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CountryName">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StateOrProvinceName">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DistinguishedNameQualifier">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SerialNumber">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmailAddress">
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>QSslCertificate</anchor>
            <arglist>(QIODevice *device, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>QSslCertificate-2</anchor>
            <arglist>(const QByteArray &amp;data, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>QSslCertificate-3</anchor>
            <arglist>(const QSslCertificate &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslCertificate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>dtor.QSslCertificate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslCertificate &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslCertificate &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslCertificate &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslCertificate &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsslcertificate-obsolete.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBlacklisted</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>isBlacklisted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelfSigned</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>isSelfSigned</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>version</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>serialNumber</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>digest</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>digest</anchor>
            <arglist>(QCryptographicHash::Algorithm algorithm) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>issuerInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>issuerInfo</anchor>
            <arglist>(SubjectInfo subject) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>issuerInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>issuerInfo-2</anchor>
            <arglist>(const QByteArray &amp;attribute) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>subjectInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectInfo</anchor>
            <arglist>(SubjectInfo subject) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>subjectInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectInfo-2</anchor>
            <arglist>(const QByteArray &amp;attribute) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>subjectInfoAttributes</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectInfoAttributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>issuerInfoAttributes</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>issuerInfoAttributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;QSsl::AlternateNameEntryType, QString&gt;</type>
            <name>alternateSubjectNames</name>
            <anchorfile>qsslcertificate-obsolete.html</anchorfile>
            <anchor>alternateSubjectNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;QSsl::AlternativeNameEntryType, QString&gt;</type>
            <name>subjectAlternativeNames</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectAlternativeNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>effectiveDate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>effectiveDate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expiryDate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>expiryDate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey</type>
            <name>publicKey</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>publicKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificateExtension&gt;</type>
            <name>extensions</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>extensions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toPem</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>toPem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toDer</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>toDer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toText</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>toText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>fromPath</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>fromPath</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>fromDevice</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>fromDevice</anchor>
            <arglist>(QIODevice *device, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>fromData</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>fromData</anchor>
            <arglist>(const QByteArray &amp;data, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslError&gt;</type>
            <name>verify</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>verify</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificateChain, const QString &amp;hostName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>importPkcs12</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>importPkcs12</anchor>
            <arglist>(QIODevice *device, QSslKey *key, QSslCertificate *certificate, QList&lt;QSslCertificate&gt; *caCertificates, const QByteArray &amp;passPhrase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::HANDLE</type>
            <name>handle</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslCertificateExtension</name>
        <filename>qsslcertificateextension.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificateExtension</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>QSslCertificateExtension</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificateExtension</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>QSslCertificateExtension-2</anchor>
            <arglist>(const QSslCertificateExtension &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslCertificateExtension</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>dtor.QSslCertificateExtension</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificateExtension &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslCertificateExtension &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslCertificateExtension &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>oid</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>oid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCritical</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>isCritical</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslCipher</name>
        <filename>qsslcipher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>QSslCipher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>QSslCipher-2</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>QSslCipher-3</anchor>
            <arglist>(const QString &amp;name, QSsl::SslProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>QSslCipher-4</anchor>
            <arglist>(const QSslCipher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>dtor.QSslCipher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCipher &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslCipher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslCipher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslCipher &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslCipher &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>supportedBits</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>supportedBits</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>usedBits</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>usedBits</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>keyExchangeMethod</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>keyExchangeMethod</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>authenticationMethod</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>authenticationMethod</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>encryptionMethod</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>encryptionMethod</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>protocolString</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>protocolString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>protocol</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>protocol</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslConfiguration</name>
        <filename>qsslconfiguration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>QSslConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>QSslConfiguration-2</anchor>
            <arglist>(const QSslConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>dtor.QSslConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslConfiguration &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslConfiguration &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>protocol</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>protocol</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProtocol</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setProtocol</anchor>
            <arglist>(QSsl::SslProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslSocket::PeerVerifyMode</type>
            <name>peerVerifyMode</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>peerVerifyMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyMode</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setPeerVerifyMode</anchor>
            <arglist>(QSslSocket::PeerVerifyMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>peerVerifyDepth</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>peerVerifyDepth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyDepth</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setPeerVerifyDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>localCertificateChain</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>localCertificateChain</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificateChain</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setLocalCertificateChain</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;localChain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>localCertificate</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>localCertificate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificate</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setLocalCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>peerCertificate</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>peerCertificate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>peerCertificateChain</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>peerCertificateChain</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCipher</type>
            <name>sessionCipher</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>sessionCipher</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>sessionProtocol</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>sessionProtocol</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey</type>
            <name>privateKey</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>privateKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrivateKey</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setPrivateKey</anchor>
            <arglist>(const QSslKey &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>ciphers</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>ciphers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCiphers</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setCiphers</anchor>
            <arglist>(const QList&lt;QSslCipher&gt; &amp;ciphers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>supportedCiphers</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>supportedCiphers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>caCertificates</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>caCertificates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaCertificates</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setCaCertificates</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>systemCaCertificates</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>systemCaCertificates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslOption</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setSslOption</anchor>
            <arglist>(QSsl::SslOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testSslOption</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>testSslOption</anchor>
            <arglist>(QSsl::SslOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sessionTicket</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>sessionTicket</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSessionTicket</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setSessionTicket</anchor>
            <arglist>(const QByteArray &amp;sessionTicket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sessionTicketLifeTimeHint</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>sessionTicketLifeTimeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QSslEllipticCurve&gt;</type>
            <name>ellipticCurves</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>ellipticCurves</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEllipticCurves</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setEllipticCurves</anchor>
            <arglist>(const QVector&lt;QSslEllipticCurve&gt; &amp;curves)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector&lt;QSslEllipticCurve&gt;</type>
            <name>supportedEllipticCurves</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>supportedEllipticCurves</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslConfiguration</type>
            <name>defaultConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>defaultConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setDefaultConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;configuration)</arglist>
        </member>
        <member kind="enum">
            <name>NextProtocolNegotiationStatus</name>
            <anchor>NextProtocolNegotiationStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextProtocolNegotiationNone">
            <anchor>NextProtocolNegotiationStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextProtocolNegotiationNegotiated">
            <anchor>NextProtocolNegotiationStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextProtocolNegotiationUnsupported">
            <anchor>NextProtocolNegotiationStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllowedNextProtocols</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setAllowedNextProtocols</anchor>
            <arglist>(const QList&lt;QByteArray&gt; &amp;protocols)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>allowedNextProtocols</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>allowedNextProtocols</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>nextNegotiatedProtocol</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>nextNegotiatedProtocol</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NextProtocolNegotiationStatus</type>
            <name>nextProtocolNegotiationStatus</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>nextProtocolNegotiationStatus</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslEllipticCurve</name>
        <filename>qsslellipticcurve.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslEllipticCurve</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>QSslEllipticCurve</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslEllipticCurve</type>
            <name>fromShortName</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>fromShortName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslEllipticCurve</type>
            <name>fromLongName</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>fromLongName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>shortName</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>shortName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>longName</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>longName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTlsNamedCurve</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>isTlsNamedCurve</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslError</name>
        <filename>qsslerror.html</filename>
        <member kind="enum">
            <name>SslError</name>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnableToGetIssuerCertificate">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnableToDecryptCertificateSignature">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnableToDecodeIssuerPublicKey">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CertificateSignatureFailed">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CertificateNotYetValid">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CertificateExpired">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidNotBeforeField">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidNotAfterField">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelfSignedCertificate">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelfSignedCertificateInChain">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnableToGetLocalIssuerCertificate">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnableToVerifyFirstCertificate">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CertificateRevoked">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidCaCertificate">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PathLengthExceeded">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidPurpose">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CertificateUntrusted">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CertificateRejected">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubjectIssuerMismatch">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AuthorityIssuerSerialNumberMismatch">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoPeerCertificate">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HostNameMismatch">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSslSupport">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CertificateBlacklisted">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnspecifiedError">
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>QSslError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>QSslError-2</anchor>
            <arglist>(SslError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>QSslError-3</anchor>
            <arglist>(SslError error, const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>QSslError-4</anchor>
            <arglist>(const QSslError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>dtor.QSslError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslError &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslError &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslError &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SslError</type>
            <name>error</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>certificate</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>certificate</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslKey</name>
        <filename>qsslkey.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey-2</anchor>
            <arglist>(const QByteArray &amp;encoded, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat encoding, QSsl::KeyType type, const QByteArray &amp;passPhrase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey-3</anchor>
            <arglist>(QIODevice *device, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat encoding, QSsl::KeyType type, const QByteArray &amp;passPhrase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey-4</anchor>
            <arglist>(Qt::HANDLE handle, QSsl::KeyType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey-5</anchor>
            <arglist>(const QSslKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>dtor.QSslKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::KeyType</type>
            <name>type</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::KeyAlgorithm</type>
            <name>algorithm</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>algorithm</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toPem</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>toPem</anchor>
            <arglist>(const QByteArray &amp;passPhrase) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toDer</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>toDer</anchor>
            <arglist>(const QByteArray &amp;passPhrase) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::HANDLE</type>
            <name>handle</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslKey &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslKey &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslPreSharedKeyAuthenticator</name>
        <filename>qsslpresharedkeyauthenticator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslPreSharedKeyAuthenticator</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>QSslPreSharedKeyAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslPreSharedKeyAuthenticator</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>dtor.QSslPreSharedKeyAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslPreSharedKeyAuthenticator</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>QSslPreSharedKeyAuthenticator-2</anchor>
            <arglist>(const QSslPreSharedKeyAuthenticator &amp;authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslPreSharedKeyAuthenticator &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslPreSharedKeyAuthenticator &amp;authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslPreSharedKeyAuthenticator &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator &amp;&amp;authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator &amp;authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>identityHint</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>identityHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIdentity</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>setIdentity</anchor>
            <arglist>(const QByteArray &amp;identity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>identity</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>identity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumIdentityLength</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>maximumIdentityLength</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreSharedKey</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>setPreSharedKey</anchor>
            <arglist>(const QByteArray &amp;preSharedKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>preSharedKey</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>preSharedKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumPreSharedKeyLength</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>maximumPreSharedKeyLength</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslSocket</name>
        <filename>qsslsocket.html</filename>
        <base>QTcpSocket</base>
        <member kind="enum">
            <name>SslMode</name>
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnencryptedMode">
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslClientMode">
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SslServerMode">
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PeerVerifyMode</name>
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerifyNone">
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QueryPeer">
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerifyPeer">
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoVerifyPeer">
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslSocket</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>QSslSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslSocket</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>dtor.QSslSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resume</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHostEncrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>connectToHostEncrypted</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, OpenMode mode, NetworkLayerProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHostEncrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>connectToHostEncrypted-2</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, const QString &amp;sslPeerName, OpenMode mode, NetworkLayerProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(qintptr socketDescriptor, SocketState state, OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSocketOption</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setSocketOption</anchor>
            <arglist>(QAbstractSocket::SocketOption option, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>socketOption</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>socketOption</anchor>
            <arglist>(QAbstractSocket::SocketOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SslMode</type>
            <name>mode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>mode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEncrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>isEncrypted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>protocol</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>protocol</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProtocol</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setProtocol</anchor>
            <arglist>(QSsl::SslProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslSocket::PeerVerifyMode</type>
            <name>peerVerifyMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerVerifyMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPeerVerifyMode</anchor>
            <arglist>(QSslSocket::PeerVerifyMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>peerVerifyDepth</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerVerifyDepth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyDepth</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPeerVerifyDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerVerifyName</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerVerifyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyName</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPeerVerifyName</anchor>
            <arglist>(const QString &amp;hostName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>encryptedBytesAvailable</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>encryptedBytesAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>encryptedBytesToWrite</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>encryptedBytesToWrite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>sslConfiguration</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslConfiguration</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setSslConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;configuration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificateChain</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setLocalCertificateChain</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;localChain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>localCertificateChain</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>localCertificateChain</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setLocalCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setLocalCertificate-2</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>localCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>localCertificate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>peerCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerCertificate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>peerCertificateChain</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerCertificateChain</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCipher</type>
            <name>sessionCipher</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sessionCipher</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>sessionProtocol</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sessionProtocol</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrivateKey</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPrivateKey</anchor>
            <arglist>(const QSslKey &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrivateKey</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPrivateKey-2</anchor>
            <arglist>(const QString &amp;fileName, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, const QByteArray &amp;passPhrase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey</type>
            <name>privateKey</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>privateKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>ciphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>ciphers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setCiphers</anchor>
            <arglist>(const QList&lt;QSslCipher&gt; &amp;ciphers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setCiphers-2</anchor>
            <arglist>(const QString &amp;ciphers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setDefaultCiphers</anchor>
            <arglist>(const QList&lt;QSslCipher&gt; &amp;ciphers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>defaultCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>defaultCiphers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>supportedCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>supportedCiphers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCaCertificates</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>addCaCertificates</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCaCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>addCaCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCaCertificates</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>addCaCertificates-2</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setCaCertificates</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>caCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>caCertificates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>addDefaultCaCertificates</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>addDefaultCaCertificates</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat encoding, QRegExp::PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addDefaultCaCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>addDefaultCaCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addDefaultCaCertificates</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>addDefaultCaCertificates-2</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setDefaultCaCertificates</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>defaultCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>defaultCaCertificates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>systemCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>systemCaCertificates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForConnected</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForConnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForEncrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForEncrypted</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForDisconnected</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForDisconnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslError&gt;</type>
            <name>sslErrors</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslErrors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsSsl</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>supportsSsl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>long</type>
            <name>sslLibraryVersionNumber</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslLibraryVersionNumber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>sslLibraryVersionString</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslLibraryVersionString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>long</type>
            <name>sslLibraryBuildVersionNumber</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslLibraryBuildVersionNumber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>sslLibraryBuildVersionString</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslLibraryBuildVersionString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>ignoreSslErrors-2</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startClientEncryption</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>startClientEncryption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startServerEncryption</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>startServerEncryption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>ignoreSslErrors</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>encrypted</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>peerVerifyError</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerVerifyError</anchor>
            <arglist>(const QSslError &amp;error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sslErrors</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslErrors-2</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modeChanged</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>modeChanged</anchor>
            <arglist>(QSslSocket::SslMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encryptedBytesWritten</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>encryptedBytesWritten</anchor>
            <arglist>(qint64 written)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preSharedKeyAuthenticationRequired</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>preSharedKeyAuthenticationRequired</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len)</arglist>
        </member>
    </compound>
</tagfile>
