<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAbstractAnimation</name>
        <filename>qabstractanimation.html</filename>
        <base>QObject</base>
        <member kind="property" type="State">
            <name>state</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>loopCount</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentLoop</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoop-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Direction">
            <name>direction</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Direction</name>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Forward">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Backward">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Stopped">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Paused">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Running">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DeletionPolicy</name>
            <anchor>DeletionPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeepWhenStopped">
            <anchor>DeletionPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeleteWhenStopped">
            <anchor>DeletionPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAnimation</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>QAbstractAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractAnimation</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>dtor.QAbstractAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnimationGroup *</type>
            <name>group</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Direction</type>
            <name>direction</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(Direction direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentLoopTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoopTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoopCount</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>(int loopCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentLoop</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoop-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>totalDuration</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>totalDuration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentLoopChanged</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoop-prop</anchor>
            <arglist>(int currentLoop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directionChanged</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(QAbstractAnimation::Direction newDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(QAbstractAnimation::DeletionPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int currentTime) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateDirection</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>updateDirection</anchor>
            <arglist>(QAbstractAnimation::Direction direction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAnimationGroup</name>
        <filename>qanimationgroup.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationGroup</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>QAnimationGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAnimationGroup</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>dtor.QAnimationGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation *</type>
            <name>animationAt</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>animationAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>animationCount</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>animationCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>indexOfAnimation</anchor>
            <arglist>(QAbstractAnimation *animation) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>addAnimation</anchor>
            <arglist>(QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>insertAnimation</anchor>
            <arglist>(int index, QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>removeAnimation</anchor>
            <arglist>(QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation *</type>
            <name>takeAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>takeAnimation</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QParallelAnimationGroup</name>
        <filename>qparallelanimationgroup.html</filename>
        <base>QAnimationGroup</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParallelAnimationGroup</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>QParallelAnimationGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QParallelAnimationGroup</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>dtor.QParallelAnimationGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>duration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int currentTime)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateDirection</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>updateDirection</anchor>
            <arglist>(QAbstractAnimation::Direction direction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPauseAnimation</name>
        <filename>qpauseanimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPauseAnimation</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>QPauseAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPauseAnimation</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>QPauseAnimation-2</anchor>
            <arglist>(int msecs, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPauseAnimation</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>dtor.QPauseAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPropertyAnimation</name>
        <filename>qpropertyanimation.html</filename>
        <base>QVariantAnimation</base>
        <member kind="property" type="QByteArray">
            <name>propertyName</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>propertyName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QObject *">
            <name>targetObject</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>targetObject-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyAnimation</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>QPropertyAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyAnimation</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>QPropertyAnimation-2</anchor>
            <arglist>(QObject *target, const QByteArray &amp;propertyName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPropertyAnimation</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>dtor.QPropertyAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>targetObject</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>targetObject-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetObject</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>targetObject-prop</anchor>
            <arglist>(QObject *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>propertyName</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>propertyName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>propertyName-prop</anchor>
            <arglist>(const QByteArray &amp;propertyName)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentValue</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>updateCurrentValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSequentialAnimationGroup</name>
        <filename>qsequentialanimationgroup.html</filename>
        <base>QAnimationGroup</base>
        <member kind="property" type="QAbstractAnimation *">
            <name>currentAnimation</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>currentAnimation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSequentialAnimationGroup</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>QSequentialAnimationGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSequentialAnimationGroup</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>dtor.QSequentialAnimationGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPauseAnimation *</type>
            <name>addPause</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>addPause</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPauseAnimation *</type>
            <name>insertPause</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>insertPause</anchor>
            <arglist>(int index, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation *</type>
            <name>currentAnimation</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>currentAnimation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>duration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentAnimationChanged</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>currentAnimation-prop</anchor>
            <arglist>(QAbstractAnimation *current)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int currentTime)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateDirection</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>updateDirection</anchor>
            <arglist>(QAbstractAnimation::Direction direction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVariantAnimation</name>
        <filename>qvariantanimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="property" type="QVariant">
            <name>startValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>startValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>endValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>endValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>currentValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>currentValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEasingCurve">
            <name>easingCurve</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>KeyValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>KeyValue-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>KeyValues</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>KeyValues-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariantAnimation</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>QVariantAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVariantAnimation</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>dtor.QVariantAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>startValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>startValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>startValue-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>endValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>endValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>endValue-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>keyValueAt</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>keyValueAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyValueAt</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>setKeyValueAt</anchor>
            <arglist>(qreal step, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>KeyValues</type>
            <name>keyValues</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>keyValues</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyValues</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>setKeyValues</anchor>
            <arglist>(const KeyValues &amp;keyValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>currentValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>currentValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>easingCurve</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEasingCurve</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>currentValue-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>updateCurrentValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>interpolated</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>interpolated</anchor>
            <arglist>(const QVariant &amp;from, const QVariant &amp;to, qreal progress) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextCodec</name>
        <filename>qtextcodec.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForName</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>codecForName</anchor>
            <arglist>(const QByteArray &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForName</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>codecForName-2</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForMib</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>codecForMib</anchor>
            <arglist>(int mib)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>availableCodecs</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>availableCodecs</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;int&gt;</type>
            <name>availableMibs</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>availableMibs</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForLocale</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>codecForLocale</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setCodecForLocale</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>setCodecForLocale</anchor>
            <arglist>(QTextCodec *c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForTr</name>
            <anchorfile>qtextcodec-obsolete.html</anchorfile>
            <anchor>codecForTr</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForHtml</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>codecForHtml-2</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForHtml</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>codecForHtml</anchor>
            <arglist>(const QByteArray &amp;ba, QTextCodec *defaultCodec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForUtfText</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>codecForUtfText-2</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextCodec *</type>
            <name>codecForUtfText</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>codecForUtfText</anchor>
            <arglist>(const QByteArray &amp;ba, QTextCodec *defaultCodec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canEncode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>canEncode</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canEncode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>canEncode-2</anchor>
            <arglist>(const QString &amp;s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUnicode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>toUnicode</anchor>
            <arglist>(const QByteArray &amp;a) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUnicode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>toUnicode-3</anchor>
            <arglist>(const char *chars) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fromUnicode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>fromUnicode</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="enum">
            <name>ConversionFlag</name>
            <anchor>ConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultConversion">
            <anchor>ConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConvertInvalidToNull">
            <anchor>ConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IgnoreHeader">
            <anchor>ConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FreeFunction">
            <anchor>ConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextCodec::ConversionFlag">
            <name>ConversionFlags</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>ConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QTextCodec::ConverterState</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUnicode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>toUnicode-2</anchor>
            <arglist>(const char *input, int size, ConverterState *state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fromUnicode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>fromUnicode-2</anchor>
            <arglist>(const QChar *input, int number, ConverterState *state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDecoder *</type>
            <name>makeDecoder</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>makeDecoder</anchor>
            <arglist>(ConversionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextEncoder *</type>
            <name>makeEncoder</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>makeEncoder</anchor>
            <arglist>(ConversionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QByteArray</type>
            <name>name</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QByteArray&gt;</type>
            <name>aliases</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>aliases</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>mibEnum</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>mibEnum</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>convertToUnicode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>convertToUnicode</anchor>
            <arglist>(const char *chars, int len, ConverterState *state) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual QByteArray</type>
            <name>convertFromUnicode</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>convertFromUnicode</anchor>
            <arglist>(const QChar *input, int number, ConverterState *state) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTextCodec</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>QTextCodec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextCodec</name>
            <anchorfile>qtextcodec.html</anchorfile>
            <anchor>dtor.QTextCodec</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextCodec::ConverterState</name>
        <filename>qtextcodec-converterstate.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ConverterState</name>
            <anchorfile>qtextcodec-converterstate.html</anchorfile>
            <anchor>ConverterState</anchor>
            <arglist>(ConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~ConverterState</name>
            <anchorfile>qtextcodec-converterstate.html</anchorfile>
            <anchor>dtor.ConverterState</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextEncoder</name>
        <filename>qtextencoder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextEncoder</name>
            <anchorfile>qtextencoder.html</anchorfile>
            <anchor>QTextEncoder</anchor>
            <arglist>(const QTextCodec *codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextEncoder</name>
            <anchorfile>qtextencoder.html</anchorfile>
            <anchor>QTextEncoder-2</anchor>
            <arglist>(const QTextCodec *codec, QTextCodec::ConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextEncoder</name>
            <anchorfile>qtextencoder.html</anchorfile>
            <anchor>dtor.QTextEncoder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fromUnicode</name>
            <anchorfile>qtextencoder.html</anchorfile>
            <anchor>fromUnicode</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fromUnicode</name>
            <anchorfile>qtextencoder.html</anchorfile>
            <anchor>fromUnicode-2</anchor>
            <arglist>(const QChar *uc, int len)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextDecoder</name>
        <filename>qtextdecoder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDecoder</name>
            <anchorfile>qtextdecoder.html</anchorfile>
            <anchor>QTextDecoder</anchor>
            <arglist>(const QTextCodec *codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDecoder</name>
            <anchorfile>qtextdecoder.html</anchorfile>
            <anchor>QTextDecoder-2</anchor>
            <arglist>(const QTextCodec *codec, QTextCodec::ConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextDecoder</name>
            <anchorfile>qtextdecoder.html</anchorfile>
            <anchor>dtor.QTextDecoder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUnicode</name>
            <anchorfile>qtextdecoder.html</anchorfile>
            <anchor>toUnicode</anchor>
            <arglist>(const char *chars, int len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUnicode</name>
            <anchorfile>qtextdecoder.html</anchorfile>
            <anchor>toUnicode-3</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toUnicode</name>
            <anchorfile>qtextdecoder.html</anchorfile>
            <anchor>toUnicode-2</anchor>
            <arglist>(QString *target, const char *chars, int len)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFlag</name>
        <filename>qflag.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlag</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>QFlag</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator int</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>operator-int</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlag</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>QFlag-2</anchor>
            <arglist>(uint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlag</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>QFlag-3</anchor>
            <arglist>(short value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlag</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>QFlag-4</anchor>
            <arglist>(ushort value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator uint</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>operator-uint</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFlags</name>
        <filename>qflags.html</filename>
        <member kind="typedef" type="">
            <name>Int</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>Int-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>enum_type</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>enum_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags</anchor>
            <arglist>(const QFlags &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags &amp;</type>
            <name>operator=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFlags &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-2</anchor>
            <arglist>(Enum flag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-3</anchor>
            <arglist>(Zero zero)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-4</anchor>
            <arglist>(QFlag value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-5</anchor>
            <arglist>(std::initializer_list&lt;Enum&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(int mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-eq-2</anchor>
            <arglist>(uint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-eq-3</anchor>
            <arglist>(Enum mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags &amp;</type>
            <name>operator|=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(QFlags other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags &amp;</type>
            <name>operator|=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7c-eq-2</anchor>
            <arglist>(Enum other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags &amp;</type>
            <name>operator^=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(QFlags other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags &amp;</type>
            <name>operator^=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-5e-eq-2</anchor>
            <arglist>(Enum other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator Int</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-Int</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags</type>
            <name>operator|</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(QFlags other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags</type>
            <name>operator|</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7c-2</anchor>
            <arglist>(Enum other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags</type>
            <name>operator^</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-5e</anchor>
            <arglist>(QFlags other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags</type>
            <name>operator^</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-5e-2</anchor>
            <arglist>(Enum other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags</type>
            <name>operator&amp;</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(int mask) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags</type>
            <name>operator&amp;</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-2</anchor>
            <arglist>(uint mask) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags</type>
            <name>operator&amp;</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-3</anchor>
            <arglist>(Enum mask) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags</type>
            <name>operator~</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7e</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testFlag</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>testFlag</anchor>
            <arglist>(Enum flag) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGlobalStatic</name>
        <filename>qglobalstatic.html</filename>
        <member kind="typedef" type="">
            <name>Type</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>Type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDestroyed</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>isDestroyed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator Type *</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>operator-Type--2a</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type *</type>
            <name>operator()</name>
            <anchorfile>qglobalstatic-obsolete.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type *</type>
            <name>operator-&gt;</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type &amp;</type>
            <name>operator*</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLibraryInfo</name>
        <filename>qlibraryinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>licensee</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>licensee</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>licensedProducts</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>licensedProducts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>buildDate</name>
            <anchorfile>qlibraryinfo-obsolete.html</anchorfile>
            <anchor>buildDate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isDebugBuild</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>isDebugBuild</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>LibraryLocation</name>
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrefixPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DocumentationPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HeadersPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LibrariesPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LibraryExecutablesPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BinariesPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PluginsPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImportsPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qml2ImportsPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ArchDataPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DataPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TranslationsPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExamplesPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TestsPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SettingsPath">
            <anchor>LibraryLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>location</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>location</anchor>
            <arglist>(LibraryLocation loc)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageLogContext</name>
        <filename>qmessagelogcontext.html</filename>
    </compound>
    <compound kind="class">
        <name>QMessageLogger</name>
        <filename>qmessagelogger.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageLogger</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>QMessageLogger</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageLogger</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>QMessageLogger-2</anchor>
            <arglist>(const char *file, int line, const char *function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageLogger</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>QMessageLogger-3</anchor>
            <arglist>(const char *file, int line, const char *function, const char *category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug</anchor>
            <arglist>(const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning</anchor>
            <arglist>(const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical</anchor>
            <arglist>(const char *msg, ... ) const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>CategoryFunction</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>CategoryFunction-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-2</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-3</anchor>
            <arglist>(CategoryFunction catFunc, const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-2</anchor>
            <arglist>(CategoryFunction catFunc, const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-2</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-3</anchor>
            <arglist>(CategoryFunction catFunc, const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-2</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-3</anchor>
            <arglist>(CategoryFunction catFunc, const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fatal</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>fatal</anchor>
            <arglist>(const char *msg, ... ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-4</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-5</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-6</anchor>
            <arglist>(CategoryFunction catFunc) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-3</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-4</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-5</anchor>
            <arglist>(CategoryFunction catFunc) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-4</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-5</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-6</anchor>
            <arglist>(CategoryFunction catFunc) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-4</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-5</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-6</anchor>
            <arglist>(CategoryFunction catFunc) const</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt</name>
        <filename>qt.html</filename>
        <member kind="enum">
            <name>GlobalColor</name>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="color0">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="color1">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="black">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="white">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="darkGray">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="gray">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="lightGray">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="red">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="green">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="blue">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="cyan">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="magenta">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="yellow">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="darkRed">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="darkGreen">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="darkBlue">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="darkCyan">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="darkMagenta">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="darkYellow">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="transparent">
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>KeyboardModifier</name>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoModifier">
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShiftModifier">
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControlModifier">
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AltModifier">
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaModifier">
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeypadModifier">
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GroupSwitchModifier">
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeyboardModifierMask">
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::KeyboardModifier">
            <name>KeyboardModifiers</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Modifier</name>
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="META">
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SHIFT">
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CTRL">
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ALT">
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MODIFIER_MASK">
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UNICODE_ACCEL">
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MouseButton</name>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MidButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="XButton1">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton1">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForwardButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="XButton2">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton2">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TaskButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton3">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton4">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton5">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton6">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton7">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton8">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton9">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton10">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton11">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton12">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton13">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton14">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton15">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton16">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton17">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton18">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton19">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton20">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton21">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton22">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton23">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraButton24">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllButtons">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaxMouseButton">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseButtonMask">
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::MouseButton">
            <name>MouseButtons</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Orientation</name>
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Horizontal">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vertical">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::Orientation">
            <name>Orientations</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FocusPolicy</name>
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFocus">
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabFocus">
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClickFocus">
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StrongFocus">
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WheelFocus">
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TabFocusBehavior</name>
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoTabFocus">
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabFocusTextControls">
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabFocusListControls">
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabFocusAllControls">
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SortOrder</name>
            <anchor>SortOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AscendingOrder">
            <anchor>SortOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DescendingOrder">
            <anchor>SortOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TileRule</name>
            <anchor>TileRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StretchTile">
            <anchor>TileRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RepeatTile">
            <anchor>TileRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoundTile">
            <anchor>TileRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AlignmentFlag</name>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignLeft">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignLeading">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignRight">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignTrailing">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignHCenter">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignJustify">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignAbsolute">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignHorizontal_Mask">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignTop">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignBottom">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignVCenter">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignBaseline">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignVertical_Mask">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignCenter">
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::AlignmentFlag">
            <name>Alignment</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TextFlag</name>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextSingleLine">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextDontClip">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextExpandTabs">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextShowMnemonic">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextWordWrap">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextWrapAnywhere">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextDontPrint">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextIncludeTrailingSpaces">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextHideMnemonic">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextJustificationForced">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextForceLeftToRight">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextForceRightToLeft">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextLongestVariant">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextBypassShaping">
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TextElideMode</name>
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElideLeft">
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElideRight">
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElideMiddle">
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElideNone">
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WhiteSpaceMode</name>
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteSpaceNormal">
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteSpacePre">
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteSpaceNoWrap">
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteSpaceModeUndefined">
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>HitTestAccuracy</name>
            <anchor>HitTestAccuracy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExactHit">
            <anchor>HitTestAccuracy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FuzzyHit">
            <anchor>HitTestAccuracy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WindowType</name>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Widget">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Window">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dialog">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sheet">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Drawer">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Popup">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tool">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolTip">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SplashScreen">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Desktop">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubWindow">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForeignWindow">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoverWindow">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowType_Mask">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MSWindowsFixedSizeDialogHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MSWindowsOwnDC">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BypassWindowManagerHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="X11BypassWindowManagerHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FramelessWindowHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowTitleHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowSystemMenuHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowMinimizeButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowMaximizeButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowMinMaxButtonsHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowContextHelpButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowShadeButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowStaysOnTopHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowTransparentForInput">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowOverridesSystemGestures">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowDoesNotAcceptFocus">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaximizeUsingFullscreenGeometryHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomizeWindowHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowStaysOnBottomHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowCloseButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MacWindowToolBarButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BypassGraphicsProxyWidget">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDropShadowWindowHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowFullscreenButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowOkButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowCancelButtonHint">
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::WindowType">
            <name>WindowFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WindowState</name>
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowNoState">
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowMinimized">
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowMaximized">
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowFullScreen">
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowActive">
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::WindowState">
            <name>WindowStates</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ApplicationState</name>
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationSuspended">
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationHidden">
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationInactive">
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationActive">
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ApplicationState">
            <name>ApplicationStates</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ScreenOrientation</name>
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrimaryOrientation">
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PortraitOrientation">
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LandscapeOrientation">
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvertedPortraitOrientation">
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvertedLandscapeOrientation">
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ScreenOrientation">
            <name>ScreenOrientations</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WidgetAttribute</name>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_Disabled">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_UnderMouse">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MouseTracking">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_ContentsPropagated">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_OpaquePaintEvent">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_NoBackground">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_StaticContents">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_LaidOut">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_PaintOnScreen">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_NoSystemBackground">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_UpdatesDisabled">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_Mapped">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacNoClickThrough">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_InputMethodEnabled">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_Visible">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_Hidden">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_ForceDisabled">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_KeyCompression">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_PendingMoveEvent">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_PendingResizeEvent">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_SetPalette">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_SetFont">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_SetCursor">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_NoChildEventsFromChildren">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WindowModified">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_Resized">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_Moved">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_PendingUpdate">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_InvalidSize">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacBrushedMetal">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacMetalStyle">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_CustomWhatsThis">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_LayoutOnEntireRect">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_OutsideWSRange">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_GrabbedShortcut">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_TransparentForMouseEvents">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_PaintUnclipped">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_SetWindowIcon">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_NoMouseReplay">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_DeleteOnClose">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_RightToLeft">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_SetLayoutDirection">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_NoChildEventsForParent">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_ForceUpdatesDisabled">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_Created">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_CompressKeys">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_InPaintEvent">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_Reparented">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_ConfigPending">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_Polished">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_DND">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_OwnSizePolicy">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_ExplicitShowHide">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_ShowModal">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MouseNoMask">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_GroupLeader">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_NoMousePropagation">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_Hover">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_InputMethodTransparent">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_QuitOnClose">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_KeyboardFocusChange">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_AcceptDrops">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_DropSiteRegistered">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_ForceAcceptDrops">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WindowPropagation">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_NoX11EventCompression">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_TintedBackground">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11OpenGLOverlay">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_AlwaysShowToolTips">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacOpaqueSizeGrip">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_SetStyle">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_SetLocale">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacShowFocusRect">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacNormalSize">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacSmallSize">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacMiniSize">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_LayoutUsesWidgetRect">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_StyledBackground">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MSWindowsUseDirect3D">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_CanHostQMdiSubWindowTitleBar">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacAlwaysShowToolWindow">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_StyleSheet">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_ShowWithoutActivating">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11BypassTransientForHint">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_NativeWindow">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_DontCreateNativeAncestors">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacVariableSize">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_DontShowOnScreen">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeDesktop">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeDock">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeToolBar">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeMenu">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeUtility">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeSplash">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeDialog">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeDropDownMenu">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypePopupMenu">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeToolTip">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeNotification">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeCombo">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11NetWmWindowTypeDND">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacFrameworkScaled">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_SetWindowModality">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_WindowOpacitySet">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_TranslucentBackground">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_AcceptTouchEvents">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_WState_AcceptedTouchBeginEvent">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_TouchPadAcceptSingleTouchEvents">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_X11DoNotAcceptFocus">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_MacNoShadow">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_AlwaysStackOnTop">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WA_AttributeCount">
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ApplicationAttribute</name>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_ImmediateWidgetCreation">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_MSWindowsUseDirect3DByDefault">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_DontShowIconsInMenus">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_NativeWindows">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_DontCreateNativeWidgetSiblings">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_MacPluginApplication">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_DontUseNativeMenuBar">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_MacDontSwapCtrlAndMeta">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_Use96Dpi">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_X11InitThreads">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_SynthesizeTouchForUnhandledMouseEvents">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_SynthesizeMouseForUnhandledTouchEvents">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_UseHighDpiPixmaps">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_ForceRasterWidgets">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_UseDesktopOpenGL">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_UseOpenGLES">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_UseSoftwareOpenGL">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_ShareOpenGLContexts">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_SetPalette">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AA_AttributeCount">
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ImageConversionFlag</name>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorMode_Mask">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoColor">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ColorOnly">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MonoOnly">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlphaDither_Mask">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThresholdAlphaDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrderedAlphaDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DiffuseAlphaDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoAlpha">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dither_Mask">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DiffuseDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrderedDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThresholdDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DitherMode_Mask">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidDither">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoOpaqueDetection">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFormatConversion">
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ImageConversionFlag">
            <name>ImageConversionFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BGMode</name>
            <anchor>BGMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TransparentMode">
            <anchor>BGMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpaqueMode">
            <anchor>BGMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Key</name>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Escape">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Tab">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Backtab">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Backspace">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Return">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Enter">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Insert">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Delete">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Pause">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Print">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_SysReq">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Clear">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Home">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_End">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Left">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Up">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Right">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Down">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_PageUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_PageDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Shift">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Control">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Meta">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Alt">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_CapsLock">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_NumLock">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ScrollLock">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F1">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F2">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F3">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F4">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F5">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F6">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F7">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F8">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F9">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F10">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F11">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F12">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F13">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F14">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F15">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F16">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F17">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F18">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F19">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F20">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F21">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F22">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F23">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F24">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F25">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F26">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F27">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F28">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F29">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F30">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F31">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F32">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F33">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F34">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F35">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Super_L">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Super_R">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Menu">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hyper_L">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hyper_R">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Help">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Direction_L">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Direction_R">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Space">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Any">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Exclam">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_QuoteDbl">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_NumberSign">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dollar">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Percent">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ampersand">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Apostrophe">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ParenLeft">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ParenRight">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Asterisk">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Plus">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Comma">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Minus">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Period">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Slash">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_0">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_1">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_2">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_3">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_4">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_5">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_6">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_7">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_8">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_9">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Colon">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Semicolon">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Less">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Equal">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Greater">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Question">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_At">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_A">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_B">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_C">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_D">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_E">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_F">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_G">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_H">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_I">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_J">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_K">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_L">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_M">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_N">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_O">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_P">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Q">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_R">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_S">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_T">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_U">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_V">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_W">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_X">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Y">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Z">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BracketLeft">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Backslash">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BracketRight">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AsciiCircum">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Underscore">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_QuoteLeft">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BraceLeft">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Bar">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BraceRight">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AsciiTilde">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_nobreakspace">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_exclamdown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_cent">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_sterling">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_currency">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_yen">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_brokenbar">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_section">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_diaeresis">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_copyright">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ordfeminine">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_guillemotleft">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_notsign">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_hyphen">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_registered">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_macron">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_degree">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_plusminus">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_twosuperior">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_threesuperior">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_acute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_mu">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_paragraph">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_periodcentered">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_cedilla">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_onesuperior">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_masculine">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_guillemotright">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_onequarter">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_onehalf">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_threequarters">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_questiondown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Agrave">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Aacute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Acircumflex">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Atilde">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Adiaeresis">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Aring">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AE">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ccedilla">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Egrave">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Eacute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ecircumflex">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ediaeresis">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Igrave">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Iacute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Icircumflex">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Idiaeresis">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ETH">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ntilde">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ograve">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Oacute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ocircumflex">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Otilde">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Odiaeresis">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_multiply">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ooblique">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ugrave">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Uacute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Ucircumflex">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Udiaeresis">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Yacute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_THORN">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ssharp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_division">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ydiaeresis">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AltGr">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Multi_key">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Codeinput">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_SingleCandidate">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MultipleCandidate">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_PreviousCandidate">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Mode_switch">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Kanji">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Muhenkan">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Henkan">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Romaji">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hiragana">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Katakana">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hiragana_Katakana">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Zenkaku">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hankaku">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Zenkaku_Hankaku">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Touroku">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Massyo">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Kana_Lock">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Kana_Shift">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Eisu_Shift">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Eisu_toggle">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_Start">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_End">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_Hanja">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_Jamo">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_Romaja">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_Jeonja">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_Banja">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_PreHanja">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_PostHanja">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangul_Special">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Grave">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Acute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Circumflex">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Tilde">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Macron">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Breve">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Abovedot">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Diaeresis">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Abovering">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Doubleacute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Caron">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Cedilla">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Ogonek">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Iota">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Voiced_Sound">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Semivoiced_Sound">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Belowdot">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Hook">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Dead_Horn">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Back">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Forward">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Stop">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Refresh">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_VolumeDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_VolumeMute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_VolumeUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BassBoost">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BassUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BassDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_TrebleUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_TrebleDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MediaPlay">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MediaStop">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MediaPrevious">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MediaNext">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MediaRecord">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MediaPause">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MediaTogglePlayPause">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_HomePage">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Favorites">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Search">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Standby">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_OpenUrl">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchMail">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchMedia">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch0">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch1">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch2">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch3">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch4">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch5">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch6">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch7">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch8">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Launch9">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchA">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchB">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchC">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchD">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchE">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchF">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MonBrightnessUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MonBrightnessDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_KeyboardLightOnOff">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_KeyboardBrightnessUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_KeyboardBrightnessDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_PowerOff">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_WakeUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Eject">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ScreenSaver">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_WWW">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Memo">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LightBulb">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Shop">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_History">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AddFavorite">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_HotLinks">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BrightnessAdjust">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Finance">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Community">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AudioRewind">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_BackForward">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ApplicationLeft">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ApplicationRight">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Book">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_CD">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Calculator">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ToDoList">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ClearGrab">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Close">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Copy">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Cut">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Display">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_DOS">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Documents">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Excel">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Explorer">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Game">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Go">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_iTouch">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LogOff">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Market">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Meeting">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MenuKB">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MenuPB">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MySites">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_News">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_OfficeHome">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Option">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Paste">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Phone">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Calendar">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Reply">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Reload">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_RotateWindows">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_RotationPB">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_RotationKB">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Save">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Send">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Spell">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_SplitScreen">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Support">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_TaskPane">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Terminal">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Tools">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Travel">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Video">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Word">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Xfer">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ZoomIn">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ZoomOut">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Away">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Messenger">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_WebCam">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MailForward">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Pictures">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Music">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Battery">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Bluetooth">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_WLAN">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_UWB">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AudioForward">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AudioRepeat">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AudioRandomPlay">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Subtitle">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_AudioCycleTrack">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Time">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hibernate">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_View">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_TopMenu">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_PowerDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Suspend">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ContrastAdjust">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchG">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LaunchH">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_TouchpadToggle">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_TouchpadOn">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_TouchpadOff">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MicMute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Red">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Green">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Yellow">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Blue">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ChannelUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ChannelDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Guide">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Info">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Settings">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MicVolumeUp">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MicVolumeDown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_New">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Open">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Find">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Undo">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Redo">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_MediaLast">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Select">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Yes">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_No">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Cancel">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Printer">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Execute">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Sleep">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Play">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Zoom">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Exit">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Context1">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Context2">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Context3">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Context4">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Call">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Hangup">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Flip">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_ToggleCallHangup">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_VoiceDial">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_LastNumberRedial">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_Camera">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_CameraFocus">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Key_unknown">
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ArrowType</name>
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoArrow">
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UpArrow">
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DownArrow">
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftArrow">
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightArrow">
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PenStyle</name>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoPen">
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SolidLine">
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DashLine">
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DotLine">
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DashDotLine">
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DashDotDotLine">
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomDashLine">
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MPenStyle">
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PenCapStyle</name>
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlatCap">
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SquareCap">
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoundCap">
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MPenCapStyle">
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PenJoinStyle</name>
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiterJoin">
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BevelJoin">
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoundJoin">
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SvgMiterJoin">
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MPenJoinStyle">
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BrushStyle</name>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoBrush">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SolidPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dense1Pattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dense2Pattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dense3Pattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dense4Pattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dense5Pattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dense6Pattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dense7Pattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HorPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CrossPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BDiagPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FDiagPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DiagCrossPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearGradientPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RadialGradientPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConicalGradientPattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TexturePattern">
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SizeMode</name>
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AbsoluteSize">
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RelativeSize">
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>UIEffect</name>
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UI_General">
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UI_AnimateMenu">
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UI_FadeMenu">
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UI_AnimateCombo">
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UI_AnimateTooltip">
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UI_FadeTooltip">
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UI_AnimateToolBox">
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CursorShape</name>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ArrowCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UpArrowCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CrossCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WaitCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IBeamCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeVerCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeHorCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeBDiagCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeFDiagCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeAllCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlankCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SplitVCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SplitHCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PointingHandCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForbiddenCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhatsThisCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BusyCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenHandCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClosedHandCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragCopyCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragMoveCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragLinkCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BitmapCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomCursor">
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TextFormat</name>
            <anchor>TextFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlainText">
            <anchor>TextFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RichText">
            <anchor>TextFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoText">
            <anchor>TextFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AspectRatioMode</name>
            <anchor>AspectRatioMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IgnoreAspectRatio">
            <anchor>AspectRatioMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeepAspectRatio">
            <anchor>AspectRatioMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeepAspectRatioByExpanding">
            <anchor>AspectRatioMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DockWidgetArea</name>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftDockWidgetArea">
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightDockWidgetArea">
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopDockWidgetArea">
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomDockWidgetArea">
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DockWidgetArea_Mask">
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllDockWidgetAreas">
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDockWidgetArea">
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::DockWidgetArea">
            <name>DockWidgetAreas</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ToolBarArea</name>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftToolBarArea">
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightToolBarArea">
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopToolBarArea">
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomToolBarArea">
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolBarArea_Mask">
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllToolBarAreas">
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoToolBarArea">
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ToolBarArea">
            <name>ToolBarAreas</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DateFormat</name>
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextDate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ISODate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SystemLocaleDate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalDate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocaleDate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SystemLocaleShortDate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SystemLocaleLongDate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultLocaleShortDate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultLocaleLongDate">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RFC2822Date">
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TimeSpec</name>
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalTime">
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UTC">
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OffsetFromUTC">
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TimeZone">
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DayOfWeek</name>
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Monday">
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tuesday">
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Wednesday">
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Thursday">
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Friday">
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Saturday">
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sunday">
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ScrollBarPolicy</name>
            <anchor>ScrollBarPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollBarAsNeeded">
            <anchor>ScrollBarPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollBarAlwaysOff">
            <anchor>ScrollBarPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollBarAlwaysOn">
            <anchor>ScrollBarPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CaseSensitivity</name>
            <anchor>CaseSensitivity-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaseInsensitive">
            <anchor>CaseSensitivity-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaseSensitive">
            <anchor>CaseSensitivity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Corner</name>
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopLeftCorner">
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopRightCorner">
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomLeftCorner">
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomRightCorner">
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Edge</name>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopEdge">
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftEdge">
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightEdge">
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomEdge">
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::Edge">
            <name>Edges</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ConnectionType</name>
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoConnection">
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectConnection">
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QueuedConnection">
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockingQueuedConnection">
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UniqueConnection">
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ShortcutContext</name>
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WidgetShortcut">
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowShortcut">
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationShortcut">
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WidgetWithChildrenShortcut">
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FillRule</name>
            <anchor>FillRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OddEvenFill">
            <anchor>FillRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindingFill">
            <anchor>FillRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MaskMode</name>
            <anchor>MaskMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaskInColor">
            <anchor>MaskMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaskOutColor">
            <anchor>MaskMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ClipOperation</name>
            <anchor>ClipOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoClip">
            <anchor>ClipOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReplaceClip">
            <anchor>ClipOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IntersectClip">
            <anchor>ClipOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ItemSelectionMode</name>
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContainsItemShape">
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IntersectsItemShape">
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContainsItemBoundingRect">
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IntersectsItemBoundingRect">
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ItemSelectionOperation</name>
            <anchor>ItemSelectionOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReplaceSelection">
            <anchor>ItemSelectionOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AddToSelection">
            <anchor>ItemSelectionOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TransformationMode</name>
            <anchor>TransformationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FastTransformation">
            <anchor>TransformationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SmoothTransformation">
            <anchor>TransformationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Axis</name>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="XAxis">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YAxis">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ZAxis">
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FocusReason</name>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BacktabFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveWindowFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PopupFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShortcutFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MenuBarFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OtherFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFocusReason">
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ContextMenuPolicy</name>
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoContextMenu">
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultContextMenu">
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionsContextMenu">
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomContextMenu">
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreventContextMenu">
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>InputMethodQuery</name>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImEnabled">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImCursorRectangle">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImMicroFocus">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImFont">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImCursorPosition">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImSurroundingText">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImCurrentSelection">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImMaximumTextLength">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImAnchorPosition">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImHints">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImPreferredLanguage">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImAbsolutePosition">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImTextBeforeCursor">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImTextAfterCursor">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImPlatformData">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImQueryInput">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImQueryAll">
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::InputMethodQuery">
            <name>InputMethodQueries</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>InputMethodHint</name>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhNone">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhHiddenText">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhSensitiveData">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhNoAutoUppercase">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhPreferNumbers">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhPreferUppercase">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhPreferLowercase">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhNoPredictiveText">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhDate">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhTime">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhPreferLatin">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhMultiLine">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhDigitsOnly">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhFormattedNumbersOnly">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhUppercaseOnly">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhLowercaseOnly">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhDialableCharactersOnly">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhEmailCharactersOnly">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhUrlCharactersOnly">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhLatinOnly">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImhExclusiveInputMask">
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::InputMethodHint">
            <name>InputMethodHints</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ToolButtonStyle</name>
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolButtonIconOnly">
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolButtonTextOnly">
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolButtonTextBesideIcon">
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolButtonTextUnderIcon">
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolButtonFollowStyle">
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LayoutDirection</name>
            <anchor>LayoutDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftToRight">
            <anchor>LayoutDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightToLeft">
            <anchor>LayoutDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LayoutDirectionAuto">
            <anchor>LayoutDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AnchorPoint</name>
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorLeft">
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorHorizontalCenter">
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorRight">
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorTop">
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorVerticalCenter">
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorBottom">
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FindChildOption</name>
            <anchor>FindChildOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FindDirectChildrenOnly">
            <anchor>FindChildOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FindChildrenRecursively">
            <anchor>FindChildOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::FindChildOption">
            <name>FindChildOptions</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FindChildOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DropAction</name>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CopyAction">
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveAction">
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinkAction">
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionMask">
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TargetMoveAction">
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IgnoreAction">
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::DropAction">
            <name>DropActions</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CheckState</name>
            <anchor>CheckState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unchecked">
            <anchor>CheckState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PartiallyChecked">
            <anchor>CheckState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Checked">
            <anchor>CheckState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ItemDataRole</name>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DisplayRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecorationRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EditRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolTipRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StatusTipRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhatsThisRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextAlignmentRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundColorRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextColorRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForegroundRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CheckStateRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AccessibleTextRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AccessibleDescriptionRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeHintRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InitialSortOrderRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DisplayPropertyRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecorationPropertyRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolTipPropertyRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StatusTipPropertyRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhatsThisPropertyRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserRole">
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ItemFlag</name>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoItemFlags">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsSelectable">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsEditable">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsDragEnabled">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsDropEnabled">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsUserCheckable">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsEnabled">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsTristate">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemNeverHasChildren">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsUserTristate">
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ItemFlag">
            <name>ItemFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MatchFlag</name>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchExactly">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchContains">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchStartsWith">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchEndsWith">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchRegExp">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchWildcard">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchFixedString">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchCaseSensitive">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchWrap">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchRecursive">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::MatchFlag">
            <name>MatchFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>HANDLE</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HANDLE-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>WFlags</name>
            <anchorfile>qt-obsolete.html</anchorfile>
            <anchor>WFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WindowModality</name>
            <anchor>WindowModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonModal">
            <anchor>WindowModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowModal">
            <anchor>WindowModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationModal">
            <anchor>WindowModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TextInteractionFlag</name>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoTextInteraction">
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextSelectableByMouse">
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextSelectableByKeyboard">
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinksAccessibleByMouse">
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinksAccessibleByKeyboard">
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextEditable">
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextEditorInteraction">
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextBrowserInteraction">
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::TextInteractionFlag">
            <name>TextInteractionFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>EventPriority</name>
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighEventPriority">
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalEventPriority">
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowEventPriority">
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SizeHint</name>
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinimumSize">
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferredSize">
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaximumSize">
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinimumDescent">
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NSizeHints">
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WindowFrameSection</name>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopLeftSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopRightSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomRightSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomLeftSection">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TitleBarArea">
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CoordinateSystem</name>
            <anchor>CoordinateSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceCoordinates">
            <anchor>CoordinateSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LogicalCoordinates">
            <anchor>CoordinateSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TouchPointState</name>
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchPointPressed">
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchPointMoved">
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchPointStationary">
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchPointReleased">
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::TouchPointState">
            <name>TouchPointStates</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>GestureState</name>
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoGesture">
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GestureStarted">
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GestureUpdated">
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GestureFinished">
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GestureCanceled">
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>GestureType</name>
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TapGesture">
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TapAndHoldGesture">
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PanGesture">
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PinchGesture">
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SwipeGesture">
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomGesture">
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastGestureType">
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>GestureFlag</name>
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontStartGestureOnChildren">
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReceivePartialGestures">
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IgnoredGesturesPropagateToParent">
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::GestureFlag">
            <name>GestureFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>NativeGestureType</name>
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BeginNativeGesture">
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndNativeGesture">
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PanNativeGesture">
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ZoomNativeGesture">
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SmartZoomNativeGesture">
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RotateNativeGesture">
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SwipeNativeGesture">
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>NavigationMode</name>
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NavigationModeNone">
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NavigationModeKeypadTabOrder">
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NavigationModeKeypadDirectional">
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NavigationModeCursorAuto">
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NavigationModeCursorForceVisible">
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CursorMoveStyle</name>
            <anchor>CursorMoveStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LogicalMoveStyle">
            <anchor>CursorMoveStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VisualMoveStyle">
            <anchor>CursorMoveStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TimerType</name>
            <anchor>TimerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreciseTimer">
            <anchor>TimerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoarseTimer">
            <anchor>TimerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VeryCoarseTimer">
            <anchor>TimerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ScrollPhase</name>
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollBegin">
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollUpdate">
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollEnd">
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MouseEventSource</name>
            <anchor>MouseEventSource-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseEventNotSynthesized">
            <anchor>MouseEventSource-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseEventSynthesizedBySystem">
            <anchor>MouseEventSource-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseEventSynthesizedByQt">
            <anchor>MouseEventSource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MouseEventFlag</name>
            <anchor>MouseEventFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseEventCreatedDoubleClick">
            <anchor>MouseEventFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseEventFlagMask">
            <anchor>MouseEventFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::MouseEventFlag">
            <name>MouseEventFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>escape</name>
            <anchorfile>qt-obsolete.html</anchorfile>
            <anchor>escape</anchor>
            <arglist>(const QString &amp;plain)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSysInfo</name>
        <filename>qsysinfo.html</filename>
        <member kind="enum">
            <name>Sizes</name>
            <anchor>Sizes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WordSize">
            <anchor>Sizes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Endian</name>
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BigEndian">
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LittleEndian">
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ByteOrder">
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ByteOrder">
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WinVersion</name>
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_None">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_32s">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_95">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_98">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_Me">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_DOS_based">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_NT">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_2000">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_XP">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_2003">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_VISTA">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_WINDOWS7">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_WINDOWS8">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_WINDOWS8_1">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_WINDOWS10">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_NT_based">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_4_0">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_5_0">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_5_1">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_5_2">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_6_0">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_6_1">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_6_2">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_6_3">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_10_0">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_CE">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_CENET">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_CE_5">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_CE_6">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WV_CE_based">
            <anchor>WinVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>WinVersion</type>
            <name>windowsVersion</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>windowsVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>MacVersion</name>
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_None">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_Unknown">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_9">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_0">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_1">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_2">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_3">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_4">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_5">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_6">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_7">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_8">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_9">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_10">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_10_11">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_CHEETAH">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_PUMA">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_JAGUAR">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_PANTHER">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_TIGER">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_LEOPARD">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_SNOWLEOPARD">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_LION">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_MOUNTAINLION">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_MAVERICKS">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_YOSEMITE">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_ELCAPITAN">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_4_3">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_5_0">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_5_1">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_6_0">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_6_1">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_7_0">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_7_1">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_8_0">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_8_1">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_8_2">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_8_3">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_8_4">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MV_IOS_9_0">
            <anchor>MacVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>MacVersion</type>
            <name>macVersion</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>macVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>buildCpuArchitecture</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>buildCpuArchitecture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>currentCpuArchitecture</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>currentCpuArchitecture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>buildAbi</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>buildAbi</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>kernelType</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>kernelType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>kernelVersion</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>kernelVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>productType</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>productType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>productVersion</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>productVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>prettyProductName</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>prettyProductName</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBuffer</name>
        <filename>qbuffer.html</filename>
        <base>QIODevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>QBuffer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>QBuffer-2</anchor>
            <arglist>(QByteArray *byteArray, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBuffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>dtor.QBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>buffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>buffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QByteArray &amp;</type>
            <name>buffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>buffer-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>setBuffer</anchor>
            <arglist>(QByteArray *byteArray)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>setData-2</anchor>
            <arglist>(const char *data, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QByteArray &amp;</type>
            <name>data</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(OpenMode flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>size</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>pos</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>seek</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>seek</anchor>
            <arglist>(qint64 pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 len)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDataStream</name>
        <filename>qdatastream.html</filename>
        <member kind="enum">
            <name>Version</name>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_1_0">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_2_0">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_2_1">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_3_0">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_3_1">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_3_3">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_0">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_1">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_2">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_3">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_4">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_5">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_6">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_7">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_8">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_4_9">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_5_0">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_5_1">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_5_2">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_5_3">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_5_4">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_5_5">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt_DefaultCompiledVersion">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ByteOrder</name>
            <anchor>ByteOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BigEndian">
            <anchor>ByteOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LittleEndian">
            <anchor>ByteOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ok">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadPastEnd">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadCorruptData">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteFailed">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FloatingPointPrecision</name>
            <anchor>FloatingPointPrecision-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SinglePrecision">
            <anchor>FloatingPointPrecision-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoublePrecision">
            <anchor>FloatingPointPrecision-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>QDataStream</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>QDataStream-2</anchor>
            <arglist>(QIODevice *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>QDataStream-3</anchor>
            <arglist>(QByteArray *a, QIODevice::OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>QDataStream-4</anchor>
            <arglist>(const QByteArray &amp;a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>dtor.QDataStream</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetDevice</name>
            <anchorfile>qdatastream-obsolete.html</anchorfile>
            <anchor>unsetDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetStatus</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>resetStatus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FloatingPointPrecision</type>
            <name>floatingPointPrecision</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>floatingPointPrecision</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFloatingPointPrecision</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setFloatingPointPrecision</anchor>
            <arglist>(FloatingPointPrecision precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ByteOrder</type>
            <name>byteOrder</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>byteOrder</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteOrder</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setByteOrder</anchor>
            <arglist>(ByteOrder bo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>version</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVersion</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setVersion</anchor>
            <arglist>(int v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(qint8 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-3</anchor>
            <arglist>(quint8 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-5</anchor>
            <arglist>(qint16 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-4</anchor>
            <arglist>(quint16 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-7</anchor>
            <arglist>(qint32 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-6</anchor>
            <arglist>(quint32 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-9</anchor>
            <arglist>(qint64 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-8</anchor>
            <arglist>(quint64 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-2</anchor>
            <arglist>(bool &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-10</anchor>
            <arglist>(float &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-11</anchor>
            <arglist>(double &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-12</anchor>
            <arglist>(char *&amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(qint8 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(quint8 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(qint16 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(quint16 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-6</anchor>
            <arglist>(qint32 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-9</anchor>
            <arglist>(quint32 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-8</anchor>
            <arglist>(qint64 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-7</anchor>
            <arglist>(quint64 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(bool i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-10</anchor>
            <arglist>(float f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-11</anchor>
            <arglist>(double f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-12</anchor>
            <arglist>(const char *s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>readBytes</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>readBytes</anchor>
            <arglist>(char *&amp;s, uint &amp;l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>readRawData</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>readRawData</anchor>
            <arglist>(char *s, int len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>writeBytes</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>writeBytes</anchor>
            <arglist>(const char *s, uint len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>writeRawData</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>writeRawData</anchor>
            <arglist>(const char *s, int len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>skipRawData</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>skipRawData</anchor>
            <arglist>(int len)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDebug</name>
        <filename>qdebug.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>QDebug</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>QDebug-2</anchor>
            <arglist>(QString *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>QDebug-3</anchor>
            <arglist>(QtMsgType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>QDebug-4</anchor>
            <arglist>(const QDebug &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator=</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDebug &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>dtor.QDebug</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDebug &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>resetFormat</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>resetFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>space</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>space</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>nospace</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>nospace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>maybeSpace</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>maybeSpace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoInsertSpaces</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>autoInsertSpaces</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoInsertSpaces</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>setAutoInsertSpaces</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>quote</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>quote</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>noquote</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>noquote</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>maybeQuote</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>maybeQuote</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QChar t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(bool t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(char t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(signed short i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(unsigned short i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-6</anchor>
            <arglist>(signed int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-7</anchor>
            <arglist>(unsigned int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-8</anchor>
            <arglist>(signed long l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-9</anchor>
            <arglist>(unsigned long l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-10</anchor>
            <arglist>(qint64 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-11</anchor>
            <arglist>(quint64 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-12</anchor>
            <arglist>(float f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-13</anchor>
            <arglist>(double f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-14</anchor>
            <arglist>(const char *s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-15</anchor>
            <arglist>(const QString &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-16</anchor>
            <arglist>(const QStringRef &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-17</anchor>
            <arglist>(QLatin1String s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-18</anchor>
            <arglist>(const QByteArray &amp;b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-19</anchor>
            <arglist>(const void *p)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDebugStateSaver</name>
        <filename>qdebugstatesaver.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebugStateSaver</name>
            <anchorfile>qdebugstatesaver.html</anchorfile>
            <anchor>QDebugStateSaver</anchor>
            <arglist>(QDebug &amp;dbg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDebugStateSaver</name>
            <anchorfile>qdebugstatesaver.html</anchorfile>
            <anchor>dtor.QDebugStateSaver</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDir</name>
        <filename>qdir.html</filename>
        <member kind="enum">
            <name>Filter</name>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dirs">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Files">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Drives">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSymLinks">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllEntries">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TypeMask">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Readable">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Writable">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Executable">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionMask">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Modified">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hidden">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="System">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AccessMask">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllDirs">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaseSensitive">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDot">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDotDot">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDotAndDotDot">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFilter">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDir::Filter">
            <name>Filters</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SortFlag</name>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Name">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Time">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Size">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unsorted">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SortByMask">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirsFirst">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reversed">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IgnoreCase">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirsLast">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocaleAware">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSort">
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDir::SortFlag">
            <name>SortFlags</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>QDir</anchor>
            <arglist>(const QDir &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>QDir-2</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>QDir-3</anchor>
            <arglist>(const QString &amp;path, const QString &amp;nameFilter, SortFlags sort, Filters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>dtor.QDir</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir &amp;</type>
            <name>operator=</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDir &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir &amp;</type>
            <name>operator=</name>
            <anchorfile>qdir-obsolete.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir &amp;</type>
            <name>operator=</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QDir &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDir &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absolutePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>absolutePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>canonicalPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>canonicalPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addResourceSearchPath</name>
            <anchorfile>qdir-obsolete.html</anchorfile>
            <anchor>addResourceSearchPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setSearchPaths</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setSearchPaths</anchor>
            <arglist>(const QString &amp;prefix, const QStringList &amp;searchPaths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addSearchPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>addSearchPath</anchor>
            <arglist>(const QString &amp;prefix, const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>searchPaths</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>searchPaths</anchor>
            <arglist>(const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dirName</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>dirName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>(const QString &amp;fileName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absoluteFilePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>absoluteFilePath</anchor>
            <arglist>(const QString &amp;fileName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>relativeFilePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>relativeFilePath</anchor>
            <arglist>(const QString &amp;fileName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>toNativeSeparators</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>toNativeSeparators</anchor>
            <arglist>(const QString &amp;pathName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromNativeSeparators</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>fromNativeSeparators</anchor>
            <arglist>(const QString &amp;pathName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cd</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>cd</anchor>
            <arglist>(const QString &amp;dirName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cdUp</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>cdUp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>nameFilters</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>nameFilters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameFilters</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setNameFilters</anchor>
            <arglist>(const QStringList &amp;nameFilters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Filters</type>
            <name>filter</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(Filters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SortFlags</type>
            <name>sorting</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(SortFlags sort)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>count</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator[]</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>entryList</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>entryList-2</anchor>
            <arglist>(Filters filters, SortFlags sort) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>entryList</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>entryList</anchor>
            <arglist>(const QStringList &amp;nameFilters, Filters filters, SortFlags sort) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfoList</type>
            <name>entryInfoList</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>entryInfoList-2</anchor>
            <arglist>(Filters filters, SortFlags sort) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfoList</type>
            <name>entryInfoList</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>entryInfoList</anchor>
            <arglist>(const QStringList &amp;nameFilters, Filters filters, SortFlags sort) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mkdir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>mkdir</anchor>
            <arglist>(const QString &amp;dirName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rmdir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>rmdir</anchor>
            <arglist>(const QString &amp;dirName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mkpath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>mkpath</anchor>
            <arglist>(const QString &amp;dirPath) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rmpath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>rmpath</anchor>
            <arglist>(const QString &amp;dirPath) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeRecursively</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>removeRecursively</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>exists-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoot</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isRoot</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isRelativePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isRelativePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isAbsolutePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isAbsolutePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRelative</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isRelative</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAbsolute</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isAbsolute</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>makeAbsolute</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>makeAbsolute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QDir &amp;dir) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QDir &amp;dir) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>rename</anchor>
            <arglist>(const QString &amp;oldName, const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFileInfoList</type>
            <name>drives</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>drives</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>separator</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>separator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>setCurrent</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setCurrent</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDir</type>
            <name>current</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>current</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>currentPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>currentPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDir</type>
            <name>home</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>home</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>homePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>homePath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDir</type>
            <name>root</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>root</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>rootPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>rootPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDir</type>
            <name>temp</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>temp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>tempPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>tempPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>match</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>match-2</anchor>
            <arglist>(const QStringList &amp;filters, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>match</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QString &amp;filter, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>cleanPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>cleanPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refresh</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>refresh</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDirIterator</name>
        <filename>qdiriterator.html</filename>
        <member kind="enum">
            <name>IteratorFlag</name>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoIteratorFlags">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FollowSymlinks">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Subdirectories">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDirIterator::IteratorFlag">
            <name>IteratorFlags</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>QDirIterator</anchor>
            <arglist>(const QDir &amp;dir, IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>QDirIterator-2</anchor>
            <arglist>(const QString &amp;path, IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>QDirIterator-3</anchor>
            <arglist>(const QString &amp;path, QDir::Filters filters, IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>QDirIterator-4</anchor>
            <arglist>(const QString &amp;path, const QStringList &amp;nameFilters, QDir::Filters filters, IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>dtor.QDirIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>next</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo</type>
            <name>fileInfo</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>fileInfo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFile</name>
        <filename>qfile.html</filename>
        <base>QFileDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile-3</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile-4</anchor>
            <arglist>(const QString &amp;name, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>dtor.QFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>fileName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>encodeName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>encodeName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>decodeName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>decodeName</anchor>
            <arglist>(const QByteArray &amp;localFileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>decodeName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>decodeName-2</anchor>
            <arglist>(const char *localFileName)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>EncoderFn</name>
            <anchorfile>qfile-obsolete.html</anchorfile>
            <anchor>EncoderFn-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>DecoderFn</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>DecoderFn-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setEncodingFunction</name>
            <anchorfile>qfile-obsolete.html</anchorfile>
            <anchor>setEncodingFunction</anchor>
            <arglist>(EncoderFn function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDecodingFunction</name>
            <anchorfile>qfile-obsolete.html</anchorfile>
            <anchor>setDecodingFunction</anchor>
            <arglist>(DecoderFn function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>exists-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readLink</name>
            <anchorfile>qfile-obsolete.html</anchorfile>
            <anchor>readLink</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>readLink</name>
            <anchorfile>qfile-obsolete.html</anchorfile>
            <anchor>readLink-2</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>symLinkTarget</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>symLinkTarget-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>symLinkTarget</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>symLinkTarget</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>rename</anchor>
            <arglist>(const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>rename-2</anchor>
            <arglist>(const QString &amp;oldName, const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>link</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>link</anchor>
            <arglist>(const QString &amp;linkName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>link</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>link-2</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;linkName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>copy</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>copy</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>copy-2</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>open</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>open-2</anchor>
            <arglist>(FILE *fh, OpenMode mode, FileHandleFlags handleFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>open</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>open-3</anchor>
            <arglist>(int fd, OpenMode mode, FileHandleFlags handleFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>size</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>resize</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qint64 sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>resize</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>resize-2</anchor>
            <arglist>(const QString &amp;fileName, qint64 sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Permissions</type>
            <name>permissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>permissions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Permissions</type>
            <name>permissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>permissions-2</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setPermissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>setPermissions</anchor>
            <arglist>(Permissions permissions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>setPermissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>setPermissions-2</anchor>
            <arglist>(const QString &amp;fileName, Permissions permissions)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileDevice</name>
        <filename>qfiledevice.html</filename>
        <base>QIODevice</base>
        <member kind="enum">
            <name>FileError</name>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FatalError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResourceError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AbortError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TimeOutError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnspecifiedError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RenameError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PositionError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResizeError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionsError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CopyError">
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Permission</name>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOwner">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteOwner">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExeOwner">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadUser">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteUser">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExeUser">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadGroup">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteGroup">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExeGroup">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOther">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteOther">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExeOther">
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QFileDevice::Permission">
            <name>Permissions</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FileHandleFlag</name>
            <anchor>FileHandleFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoCloseHandle">
            <anchor>FileHandleFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontCloseHandle">
            <anchor>FileHandleFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QFileDevice::FileHandleFlag">
            <name>FileHandleFlags</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileHandleFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFileDevice</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>dtor.QFileDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FileError</type>
            <name>error</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>unsetError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>handle</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>fileName</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>pos</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>seek</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>seek</anchor>
            <arglist>(qint64 pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>size</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>resize</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qint64 sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Permissions</type>
            <name>permissions</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>permissions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setPermissions</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>setPermissions</anchor>
            <arglist>(Permissions permissions)</arglist>
        </member>
        <member kind="enum">
            <name>MemoryMapFlags</name>
            <anchor>MemoryMapFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoOptions">
            <anchor>MemoryMapFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MapPrivateOption">
            <anchor>MemoryMapFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar *</type>
            <name>map</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(qint64 offset, qint64 size, MemoryMapFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unmap</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>unmap</anchor>
            <arglist>(uchar *address)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 len)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readLineData</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>readLineData</anchor>
            <arglist>(char *data, qint64 maxlen)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileInfo</name>
        <filename>qfileinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-3</anchor>
            <arglist>(const QString &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-4</anchor>
            <arglist>(const QFile &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-5</anchor>
            <arglist>(const QDir &amp;dir, const QString &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-6</anchor>
            <arglist>(const QFileInfo &amp;fileinfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>dtor.QFileInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFileInfo &amp;fileinfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QFileInfo &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFileInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QFileInfo &amp;fileinfo) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QFileInfo &amp;fileinfo) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setFile</anchor>
            <arglist>(const QString &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setFile-2</anchor>
            <arglist>(const QFile &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setFile-3</anchor>
            <arglist>(const QDir &amp;dir, const QString &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>exists-2</anchor>
            <arglist>(const QString &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refresh</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>refresh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absoluteFilePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>absoluteFilePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>canonicalFilePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>canonicalFilePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>baseName</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>baseName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>completeBaseName</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>completeBaseName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>suffix</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>suffix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>bundleName</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>bundleName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>completeSuffix</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>completeSuffix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absolutePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>absolutePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>canonicalPath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>canonicalPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir</type>
            <name>dir</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>dir</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir</type>
            <name>absoluteDir</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>absoluteDir</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExecutable</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isExecutable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHidden</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isHidden</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNativePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isNativePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRelative</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isRelative</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAbsolute</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isAbsolute</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>makeAbsolute</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>makeAbsolute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isFile</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDir</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isDir</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSymLink</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isSymLink</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoot</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isRoot</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBundle</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isBundle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readLink</name>
            <anchorfile>qfileinfo-obsolete.html</anchorfile>
            <anchor>readLink</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>symLinkTarget</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>symLinkTarget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>owner</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>owner</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>ownerId</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>ownerId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>group</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>groupId</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>groupId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>permission</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>permission</anchor>
            <arglist>(QFile::Permissions permissions) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFile::Permissions</type>
            <name>permissions</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>permissions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>size</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>created</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>created</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastModified</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>lastModified</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastRead</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>lastRead</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>caching</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>caching</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaching</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setCaching</anchor>
            <arglist>(bool enable)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileSelector</name>
        <filename>qfileselector.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileSelector</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>QFileSelector</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFileSelector</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>dtor.QFileSelector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>select</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>select</anchor>
            <arglist>(const QString &amp;filePath) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>select</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>select-2</anchor>
            <arglist>(const QUrl &amp;filePath) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>extraSelectors</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>extraSelectors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtraSelectors</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>setExtraSelectors</anchor>
            <arglist>(const QStringList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allSelectors</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>allSelectors</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileSystemWatcher</name>
        <filename>qfilesystemwatcher.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileSystemWatcher</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>QFileSystemWatcher</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileSystemWatcher</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>QFileSystemWatcher-2</anchor>
            <arglist>(const QStringList &amp;paths, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFileSystemWatcher</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>dtor.QFileSystemWatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addPath</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>addPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>addPaths</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>addPaths</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removePath</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>removePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>removePaths</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>removePaths</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>files</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>files</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>directories</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>directories</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fileChanged</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>fileChanged</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directoryChanged</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>directoryChanged</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIODevice</name>
        <filename>qiodevice.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>OpenModeFlag</name>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotOpen">
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteOnly">
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWrite">
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Append">
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Truncate">
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Text">
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unbuffered">
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QIODevice::OpenModeFlag">
            <name>OpenMode</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIODevice</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>QIODevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIODevice</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>QIODevice-2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QIODevice</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>dtor.QIODevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OpenMode</type>
            <name>openMode</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>openMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextModeEnabled</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>setTextModeEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTextModeEnabled</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isTextModeEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpen</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isOpen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>pos</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>size</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>seek</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>seek</anchor>
            <arglist>(qint64 pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>reset</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>read</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>read</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>read-2</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readAll</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readLine</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLine</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readLine</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLine-2</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>write</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>write</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>write-2</anchor>
            <arglist>(const char *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>write</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>write-3</anchor>
            <arglist>(const QByteArray &amp;byteArray)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>peek</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>peek</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>peek</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>peek-2</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungetChar</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>ungetChar</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>putChar</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>putChar</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>getChar</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>getChar</anchor>
            <arglist>(char *c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readyRead</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readyRead</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bytesWritten</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>bytesWritten</anchor>
            <arglist>(qint64 bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToClose</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>aboutToClose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readChannelFinished</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readChannelFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxSize) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readLineData</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLineData</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 maxSize) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setOpenMode</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>setOpenMode</anchor>
            <arglist>(OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorString</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>setErrorString</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLockFile</name>
        <filename>qlockfile.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLockFile</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>QLockFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLockFile</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>dtor.QLockFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>lock</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>tryLock</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStaleLockTime</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>setStaleLockTime</anchor>
            <arglist>(int staleLockTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>staleLockTime</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>staleLockTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLocked</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>isLocked</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>getLockInfo</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>getLockInfo</anchor>
            <arglist>(qint64 *pid, QString *hostname, QString *appname) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeStaleLockFile</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>removeStaleLockFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>LockError</name>
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockFailedError">
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionError">
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LockError</type>
            <name>error</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLoggingCategory</name>
        <filename>qloggingcategory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLoggingCategory</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>QLoggingCategory</anchor>
            <arglist>(const char *category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLoggingCategory</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>QLoggingCategory-2</anchor>
            <arglist>(const char *category, QtMsgType enableForLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLoggingCategory</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>dtor.QLoggingCategory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>(QtMsgType msgtype) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(QtMsgType type, bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDebugEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isDebugEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInfoEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isInfoEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWarningEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isWarningEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCriticalEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isCriticalEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>categoryName</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>categoryName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLoggingCategory &amp;</type>
            <name>operator()</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QLoggingCategory &amp;</type>
            <name>operator()</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>operator-28-29-2</anchor>
            <arglist>()() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLoggingCategory *</type>
            <name>defaultCategory</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>defaultCategory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="">
            <name>CategoryFilter</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>CategoryFilter-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>CategoryFilter</type>
            <name>installFilter</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>installFilter</anchor>
            <arglist>(CategoryFilter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFilterRules</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>setFilterRules</anchor>
            <arglist>(const QString &amp;rules)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProcessEnvironment</name>
        <filename>qprocessenvironment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProcessEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>QProcessEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProcessEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>QProcessEnvironment-2</anchor>
            <arglist>(const QProcessEnvironment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QProcessEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>dtor.QProcessEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcessEnvironment &amp;</type>
            <name>operator=</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QProcessEnvironment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QProcessEnvironment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QProcessEnvironment &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QProcessEnvironment &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp;name, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;name, const QString &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>toStringList</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>toStringList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>keys</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(const QProcessEnvironment &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QProcessEnvironment</type>
            <name>systemEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>systemEnvironment</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProcess</name>
        <filename>qprocess.html</filename>
        <base>QIODevice</base>
        <member kind="enum">
            <name>ProcessError</name>
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FailedToStart">
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Crashed">
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Timedout">
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadError">
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteError">
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ProcessState</name>
            <anchor>ProcessState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotRunning">
            <anchor>ProcessState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Starting">
            <anchor>ProcessState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Running">
            <anchor>ProcessState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ProcessChannel</name>
            <anchor>ProcessChannel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandardOutput">
            <anchor>ProcessChannel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandardError">
            <anchor>ProcessChannel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ProcessChannelMode</name>
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SeparateChannels">
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MergedChannels">
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForwardedChannels">
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForwardedOutputChannel">
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForwardedErrorChannel">
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>InputChannelMode</name>
            <anchor>InputChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ManagedInputChannel">
            <anchor>InputChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForwardedInputChannel">
            <anchor>InputChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ExitStatus</name>
            <anchor>ExitStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalExit">
            <anchor>ExitStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CrashExit">
            <anchor>ExitStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProcess</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>QProcess</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QProcess</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>dtor.QProcess</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(const QString &amp;program, const QStringList &amp;arguments, OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>start-3</anchor>
            <arglist>(const QString &amp;command, OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>start-2</anchor>
            <arglist>(OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>program</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>program</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProgram</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setProgram</anchor>
            <arglist>(const QString &amp;program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>arguments</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>arguments</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArguments</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setArguments</anchor>
            <arglist>(const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ProcessChannelMode</type>
            <name>readChannelMode</name>
            <anchorfile>qprocess-obsolete.html</anchorfile>
            <anchor>readChannelMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadChannelMode</name>
            <anchorfile>qprocess-obsolete.html</anchorfile>
            <anchor>setReadChannelMode</anchor>
            <arglist>(ProcessChannelMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ProcessChannelMode</type>
            <name>processChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>processChannelMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProcessChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setProcessChannelMode</anchor>
            <arglist>(ProcessChannelMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InputChannelMode</type>
            <name>inputChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>inputChannelMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setInputChannelMode</anchor>
            <arglist>(InputChannelMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ProcessChannel</type>
            <name>readChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readChannel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setReadChannel</anchor>
            <arglist>(ProcessChannel channel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeReadChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>closeReadChannel</anchor>
            <arglist>(ProcessChannel channel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeWriteChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>closeWriteChannel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardInputFile</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setStandardInputFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardOutputFile</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setStandardOutputFile</anchor>
            <arglist>(const QString &amp;fileName, OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardErrorFile</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setStandardErrorFile</anchor>
            <arglist>(const QString &amp;fileName, OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardOutputProcess</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setStandardOutputProcess</anchor>
            <arglist>(QProcess *destination)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeArguments</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>nativeArguments</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeArguments</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setNativeArguments</anchor>
            <arglist>(const QString &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>workingDirectory</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>workingDirectory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkingDirectory</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setWorkingDirectory</anchor>
            <arglist>(const QString &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnvironment</name>
            <anchorfile>qprocess-obsolete.html</anchorfile>
            <anchor>setEnvironment</anchor>
            <arglist>(const QStringList &amp;environment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>environment</name>
            <anchorfile>qprocess-obsolete.html</anchorfile>
            <anchor>environment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProcessEnvironment</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setProcessEnvironment</anchor>
            <arglist>(const QProcessEnvironment &amp;environment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcessEnvironment</type>
            <name>processEnvironment</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>processEnvironment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::ProcessError</type>
            <name>error</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::ProcessState</type>
            <name>state</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Q_PID</type>
            <name>pid</name>
            <anchorfile>qprocess-obsolete.html</anchorfile>
            <anchor>pid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>processId</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>processId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForStarted</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>waitForStarted</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForFinished</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readAllStandardOutput</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readAllStandardOutput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readAllStandardError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readAllStandardError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>exitCode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>exitCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::ExitStatus</type>
            <name>exitStatus</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>exitStatus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>execute</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>execute</anchor>
            <arglist>(const QString &amp;program, const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>execute</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>execute-2</anchor>
            <arglist>(const QString &amp;command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>startDetached</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>startDetached</anchor>
            <arglist>(const QString &amp;program, const QStringList &amp;arguments, const QString &amp;workingDirectory, qint64 *pid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>startDetached</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>startDetached-2</anchor>
            <arglist>(const QString &amp;command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>systemEnvironment</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>systemEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>nullDevice</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>nullDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>terminate</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>terminate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>kill</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>kill</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qprocess-obsolete.html</anchorfile>
            <anchor>finished-2</anchor>
            <arglist>(int exitCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(int exitCode, QProcess::ExitStatus exitStatus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QProcess::ProcessError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QProcess::ProcessState newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readyReadStandardOutput</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readyReadStandardOutput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readyReadStandardError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readyReadStandardError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setProcessState</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setProcessState</anchor>
            <arglist>(ProcessState state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setupChildProcess</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setupChildProcess</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QResource</name>
        <filename>qresource.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>QResource</anchor>
            <arglist>(const QString &amp;file, const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>dtor.QResource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absoluteFilePath</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>absoluteFilePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCompressed</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>isCompressed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>size</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>data</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addSearchPath</name>
            <anchorfile>qresource-obsolete.html</anchorfile>
            <anchor>addSearchPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>searchPaths</name>
            <anchorfile>qresource-obsolete.html</anchorfile>
            <anchor>searchPaths</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>registerResource</anchor>
            <arglist>(const QString &amp;rccFileName, const QString &amp;mapRoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>unregisterResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>unregisterResource</anchor>
            <arglist>(const QString &amp;rccFileName, const QString &amp;mapRoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>registerResource-2</anchor>
            <arglist>(const uchar *rccData, const QString &amp;mapRoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>unregisterResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>unregisterResource-2</anchor>
            <arglist>(const uchar *rccData, const QString &amp;mapRoot)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isDir</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>isDir</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isFile</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>isFile</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QStringList</type>
            <name>children</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>children</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSaveFile</name>
        <filename>qsavefile.html</filename>
        <base>QFileDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSaveFile</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>QSaveFile</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSaveFile</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>QSaveFile-2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSaveFile</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>QSaveFile-3</anchor>
            <arglist>(const QString &amp;name, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSaveFile</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>dtor.QSaveFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>fileName</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>commit</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>commit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelWriting</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>cancelWriting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirectWriteFallback</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>setDirectWriteFallback</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>directWriteFallback</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>directWriteFallback</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSettings</name>
        <filename>qsettings.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AccessError">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatError">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Format</name>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NativeFormat">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IniFormat">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidFormat">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat1">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat2">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat3">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat4">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat5">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat6">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat7">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat9">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat10">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat11">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat12">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat13">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat14">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat15">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomFormat16">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Scope</name>
            <anchor>Scope-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserScope">
            <anchor>Scope-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SystemScope">
            <anchor>Scope-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings</anchor>
            <arglist>(const QString &amp;organization, const QString &amp;application, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-2</anchor>
            <arglist>(Scope scope, const QString &amp;organization, const QString &amp;application, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-3</anchor>
            <arglist>(Format format, Scope scope, const QString &amp;organization, const QString &amp;application, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-4</anchor>
            <arglist>(const QString &amp;fileName, Format format, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-5</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>dtor.QSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sync</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>sync</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginGroup</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>beginGroup</anchor>
            <arglist>(const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endGroup</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>endGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>group</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>beginReadArray</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>beginReadArray</anchor>
            <arglist>(const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginWriteArray</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>beginWriteArray</anchor>
            <arglist>(const QString &amp;prefix, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endArray</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>endArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArrayIndex</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setArrayIndex</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allKeys</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>allKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>childKeys</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>childKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>childGroups</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>childGroups</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFallbacksEnabled</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setFallbacksEnabled</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fallbacksEnabled</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>fallbacksEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Format</type>
            <name>format</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Scope</type>
            <name>scope</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>scope</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>organizationName</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>organizationName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>applicationName</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>applicationName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIniCodec</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setIniCodec</anchor>
            <arglist>(QTextCodec *codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIniCodec</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setIniCodec-2</anchor>
            <arglist>(const char *codecName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCodec *</type>
            <name>iniCodec</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>iniCodec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setDefaultFormat</anchor>
            <arglist>(Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Format</type>
            <name>defaultFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>defaultFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setSystemIniPath</name>
            <anchorfile>qsettings-obsolete.html</anchorfile>
            <anchor>setSystemIniPath</anchor>
            <arglist>(const QString &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setUserIniPath</name>
            <anchorfile>qsettings-obsolete.html</anchorfile>
            <anchor>setUserIniPath</anchor>
            <arglist>(const QString &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(Format format, Scope scope, const QString &amp;path)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>SettingsMap</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>SettingsMap-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ReadFunc</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>ReadFunc-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>WriteFunc</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>WriteFunc-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Format</type>
            <name>registerFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>registerFormat</anchor>
            <arglist>(const QString &amp;extension, ReadFunc readFunc, WriteFunc writeFunc, Qt::CaseSensitivity caseSensitivity)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStandardPaths</name>
        <filename>qstandardpaths.html</filename>
        <member kind="enum">
            <name>StandardLocation</name>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DesktopLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DocumentsLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontsLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationsLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MusicLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoviesLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PicturesLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TempLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HomeLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DataLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GenericDataLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RuntimeLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConfigLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DownloadLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GenericCacheLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GenericConfigLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AppDataLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AppConfigLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AppLocalDataLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>writableLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>writableLocation</anchor>
            <arglist>(StandardLocation type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>standardLocations</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>standardLocations</anchor>
            <arglist>(StandardLocation type)</arglist>
        </member>
        <member kind="enum">
            <name>LocateOption</name>
            <anchor>LocateOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocateFile">
            <anchor>LocateOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocateDirectory">
            <anchor>LocateOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStandardPaths::LocateOption">
            <name>LocateOptions</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>LocateOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>locate</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>locate</anchor>
            <arglist>(StandardLocation type, const QString &amp;fileName, LocateOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>locateAll</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>locateAll</anchor>
            <arglist>(StandardLocation type, const QString &amp;fileName, LocateOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>displayName</anchor>
            <arglist>(StandardLocation type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>findExecutable</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>findExecutable</anchor>
            <arglist>(const QString &amp;executableName, const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>enableTestMode</name>
            <anchorfile>qstandardpaths-obsolete.html</anchorfile>
            <anchor>enableTestMode</anchor>
            <arglist>(bool testMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setTestModeEnabled</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>setTestModeEnabled</anchor>
            <arglist>(bool testMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStorageInfo</name>
        <filename>qstorageinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>QStorageInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>QStorageInfo-2</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>QStorageInfo-3</anchor>
            <arglist>(const QDir &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>QStorageInfo-4</anchor>
            <arglist>(const QStorageInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>dtor.QStorageInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStorageInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QStorageInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStorageInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QStorageInfo &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QStorageInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>rootPath</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>rootPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>device</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fileSystemType</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>fileSystemType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>displayName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bytesTotal</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>bytesTotal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bytesFree</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>bytesFree</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoot</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>isRoot</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>isReadOnly</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReady</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>isReady</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refresh</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>refresh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QStorageInfo&gt;</type>
            <name>mountedVolumes</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>mountedVolumes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStorageInfo</type>
            <name>root</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>root</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTemporaryDir</name>
        <filename>qtemporarydir.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryDir</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>QTemporaryDir</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryDir</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>QTemporaryDir-2</anchor>
            <arglist>(const QString &amp;templatePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTemporaryDir</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>dtor.QTemporaryDir</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRemove</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>autoRemove</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRemove</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>setAutoRemove</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTemporaryFile</name>
        <filename>qtemporaryfile.html</filename>
        <base>QFile</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile-2</anchor>
            <arglist>(const QString &amp;templateName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile-3</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile-4</anchor>
            <arglist>(const QString &amp;templateName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>dtor.QTemporaryFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRemove</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>autoRemove</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRemove</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>setAutoRemove</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>open</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>open</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>fileName</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileTemplate</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>fileTemplate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileTemplate</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>setFileTemplate</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTemporaryFile *</type>
            <name>createLocalFile</name>
            <anchorfile>qtemporaryfile-obsolete.html</anchorfile>
            <anchor>createLocalFile-2</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTemporaryFile *</type>
            <name>createLocalFile</name>
            <anchorfile>qtemporaryfile-obsolete.html</anchorfile>
            <anchor>createLocalFile</anchor>
            <arglist>(QFile &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTemporaryFile *</type>
            <name>createNativeFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>createNativeFile-2</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTemporaryFile *</type>
            <name>createNativeFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>createNativeFile</anchor>
            <arglist>(QFile &amp;file)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>open-2</anchor>
            <arglist>(OpenMode flags)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextStream</name>
        <filename>qtextstream.html</filename>
        <member kind="enum">
            <name>RealNumberNotation</name>
            <anchor>RealNumberNotation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SmartNotation">
            <anchor>RealNumberNotation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FixedNotation">
            <anchor>RealNumberNotation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScientificNotation">
            <anchor>RealNumberNotation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FieldAlignment</name>
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignLeft">
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignRight">
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignCenter">
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignAccountingStyle">
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ok">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadPastEnd">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadCorruptData">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteFailed">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>NumberFlag</name>
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShowBase">
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForcePoint">
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForceSign">
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UppercaseBase">
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UppercaseDigits">
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextStream::NumberFlag">
            <name>NumberFlags</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-3</anchor>
            <arglist>(FILE *fileHandle, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-4</anchor>
            <arglist>(QString *string, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-5</anchor>
            <arglist>(QByteArray *array, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-6</anchor>
            <arglist>(const QByteArray &amp;array, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>dtor.QTextStream</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(QTextCodec *codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setCodec-2</anchor>
            <arglist>(const char *codecName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCodec *</type>
            <name>codec</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoDetectUnicode</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setAutoDetectUnicode</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoDetectUnicode</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>autoDetectUnicode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateByteOrderMark</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setGenerateByteOrderMark</anchor>
            <arglist>(bool generate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateByteOrderMark</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>generateByteOrderMark</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setString</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setString</anchor>
            <arglist>(QString *string, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString *</type>
            <name>string</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>string</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetStatus</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>resetStatus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flush</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>seek</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>seek</anchor>
            <arglist>(qint64 pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>pos</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>skipWhiteSpace</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>skipWhiteSpace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readLine</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>readLine</anchor>
            <arglist>(qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>readLineInto</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>readLineInto</anchor>
            <arglist>(QString *line, qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readAll</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>readAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>read</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldAlignment</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setFieldAlignment</anchor>
            <arglist>(FieldAlignment mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FieldAlignment</type>
            <name>fieldAlignment</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>fieldAlignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPadChar</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setPadChar</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>padChar</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>padChar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldWidth</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setFieldWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fieldWidth</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>fieldWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberFlags</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setNumberFlags</anchor>
            <arglist>(NumberFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NumberFlags</type>
            <name>numberFlags</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>numberFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntegerBase</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setIntegerBase</anchor>
            <arglist>(int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>integerBase</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>integerBase</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRealNumberNotation</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setRealNumberNotation</anchor>
            <arglist>(RealNumberNotation notation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RealNumberNotation</type>
            <name>realNumberNotation</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>realNumberNotation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRealNumberPrecision</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setRealNumberPrecision</anchor>
            <arglist>(int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>realNumberPrecision</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>realNumberPrecision</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QChar &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-5</anchor>
            <arglist>(char &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-2</anchor>
            <arglist>(signed short &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-6</anchor>
            <arglist>(unsigned short &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-7</anchor>
            <arglist>(signed int &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-8</anchor>
            <arglist>(unsigned int &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-9</anchor>
            <arglist>(signed long &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-10</anchor>
            <arglist>(unsigned long &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-11</anchor>
            <arglist>(qlonglong &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-12</anchor>
            <arglist>(qulonglong &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-3</anchor>
            <arglist>(float &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-13</anchor>
            <arglist>(double &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-4</anchor>
            <arglist>(QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-14</anchor>
            <arglist>(QByteArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-15</anchor>
            <arglist>(char *c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QChar c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(signed short i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-6</anchor>
            <arglist>(unsigned short i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-7</anchor>
            <arglist>(signed int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-8</anchor>
            <arglist>(unsigned int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-9</anchor>
            <arglist>(signed long i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-10</anchor>
            <arglist>(unsigned long i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-11</anchor>
            <arglist>(qlonglong i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-12</anchor>
            <arglist>(qulonglong i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(float f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-13</anchor>
            <arglist>(double f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-14</anchor>
            <arglist>(QLatin1String string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-15</anchor>
            <arglist>(const QByteArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-16</anchor>
            <arglist>(const char *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-17</anchor>
            <arglist>(const void *ptr)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUrl</name>
        <filename>qurl.html</filename>
        <member kind="enum">
            <name>ParsingMode</name>
            <anchor>ParsingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TolerantMode">
            <anchor>ParsingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StrictMode">
            <anchor>ParsingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecodedMode">
            <anchor>ParsingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>UrlFormattingOption</name>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveScheme">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemovePassword">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveUserInfo">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemovePort">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveAuthority">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemovePath">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveQuery">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveFragment">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferLocalFile">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StripTrailingSlash">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveFilename">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalizePathSegments">
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ComponentFormattingOption</name>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrettyDecoded">
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EncodeSpaces">
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EncodeUnicode">
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EncodeDelimiters">
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EncodeReserved">
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecodeReserved">
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FullyEncoded">
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FullyDecoded">
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QUrl::ComponentFormattingOption">
            <name>ComponentFormattingOptions</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QUrl::UrlFormattingOption">
            <name>FormattingOptions</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QUrl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QUrl-2</anchor>
            <arglist>(const QUrl &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl &amp;</type>
            <name>operator=</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QUrl-3</anchor>
            <arglist>(const QString &amp;url, ParsingMode parsingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl &amp;</type>
            <name>operator=</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QString &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QUrl-4</anchor>
            <arglist>(QUrl &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl &amp;</type>
            <name>operator=</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(QUrl &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>dtor.QUrl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QUrl &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QString &amp;url, ParsingMode parsingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>url</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>url</anchor>
            <arglist>(FormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(FormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toDisplayString</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toDisplayString</anchor>
            <arglist>(FormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>adjusted</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>adjusted</anchor>
            <arglist>(FormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toEncoded</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toEncoded</anchor>
            <arglist>(FormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromEncoded</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromEncoded</anchor>
            <arglist>(const QByteArray &amp;input, ParsingMode parsingMode)</arglist>
        </member>
        <member kind="enum">
            <name>UserInputResolutionOption</name>
            <anchor>UserInputResolutionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultResolution">
            <anchor>UserInputResolutionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AssumeLocalFile">
            <anchor>UserInputResolutionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QUrl::UserInputResolutionOption">
            <name>UserInputResolutionOptions</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UserInputResolutionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromUserInput</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromUserInput</anchor>
            <arglist>(const QString &amp;userInput)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromUserInput</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromUserInput-2</anchor>
            <arglist>(const QString &amp;userInput, const QString &amp;workingDirectory, UserInputResolutionOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScheme</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setScheme</anchor>
            <arglist>(const QString &amp;scheme)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scheme</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>scheme</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAuthority</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setAuthority</anchor>
            <arglist>(const QString &amp;authority, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>authority</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>authority</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserInfo</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setUserInfo</anchor>
            <arglist>(const QString &amp;userInfo, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>userInfo</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>userInfo</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserName</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setUserName</anchor>
            <arglist>(const QString &amp;userName, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>userName</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>userName</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPassword</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setPassword</anchor>
            <arglist>(const QString &amp;password, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>password</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>password</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHost</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setHost</anchor>
            <arglist>(const QString &amp;host, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>host</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>host</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>topLevelDomain</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>topLevelDomain</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPort</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setPort</anchor>
            <arglist>(int port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>port</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>port</anchor>
            <arglist>(int defaultPort) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>path</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasQuery</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>hasQuery</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setQuery</anchor>
            <arglist>(const QString &amp;query, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setQuery-2</anchor>
            <arglist>(const QUrlQuery &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>query</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>query</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFragment</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>hasFragment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fragment</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fragment</anchor>
            <arglist>(ComponentFormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFragment</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setFragment</anchor>
            <arglist>(const QString &amp;fragment, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>resolved</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>resolved</anchor>
            <arglist>(const QUrl &amp;relative) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRelative</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isRelative</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isParentOf</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isParentOf</anchor>
            <arglist>(const QUrl &amp;childUrl) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLocalFile</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isLocalFile</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromLocalFile</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromLocalFile</anchor>
            <arglist>(const QString &amp;localFile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toLocalFile</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toLocalFile</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QUrl &amp;url) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QUrl &amp;url) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(const QUrl &amp;url, FormattingOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromPercentEncoding</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromPercentEncoding</anchor>
            <arglist>(const QByteArray &amp;input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>toPercentEncoding</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toPercentEncoding</anchor>
            <arglist>(const QString &amp;input, const QByteArray &amp;exclude, const QByteArray &amp;include)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromCFURL</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromCFURL</anchor>
            <arglist>(CFURLRef url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFURLRef</type>
            <name>toCFURL</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toCFURL</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromNSURL</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromNSURL</anchor>
            <arglist>(const NSURL *url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSURL *</type>
            <name>toNSURL</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toNSURL</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromPunycode</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>fromPunycode</anchor>
            <arglist>(const QByteArray &amp;pc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>toPunycode</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>toPunycode</anchor>
            <arglist>(const QString &amp;uc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQueryItems</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setQueryItems</anchor>
            <arglist>(const QList&lt;QPair&lt;QString, QString&gt; &gt; &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addQueryItem</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>addQueryItem</anchor>
            <arglist>(const QString &amp;key, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPair&lt;QString, QString&gt; &gt;</type>
            <name>queryItems</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>queryItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasQueryItem</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>hasQueryItem</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>queryItemValue</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>queryItemValue</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allQueryItemValues</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>allQueryItemValues</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeQueryItem</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>removeQueryItem</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllQueryItems</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>removeAllQueryItems</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodedQueryItems</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setEncodedQueryItems</anchor>
            <arglist>(const QList&lt;QPair&lt;QByteArray, QByteArray&gt; &gt; &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEncodedQueryItem</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>addEncodedQueryItem</anchor>
            <arglist>(const QByteArray &amp;key, const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPair&lt;QByteArray, QByteArray&gt; &gt;</type>
            <name>encodedQueryItems</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>encodedQueryItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasEncodedQueryItem</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>hasEncodedQueryItem</anchor>
            <arglist>(const QByteArray &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>encodedQueryItemValue</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>encodedQueryItemValue</anchor>
            <arglist>(const QByteArray &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>allEncodedQueryItemValues</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>allEncodedQueryItemValues</anchor>
            <arglist>(const QByteArray &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeEncodedQueryItem</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>removeEncodedQueryItem</anchor>
            <arglist>(const QByteArray &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllEncodedQueryItems</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>removeAllEncodedQueryItems</anchor>
            <arglist>(const QByteArray &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodedUrl</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setEncodedUrl</anchor>
            <arglist>(const QByteArray &amp;encodedUrl, ParsingMode parsingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>encodedUserName</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>encodedUserName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodedUserName</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setEncodedUserName</anchor>
            <arglist>(const QByteArray &amp;userName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>encodedPassword</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>encodedPassword</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodedPassword</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setEncodedPassword</anchor>
            <arglist>(const QByteArray &amp;password)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>encodedHost</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>encodedHost</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodedHost</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setEncodedHost</anchor>
            <arglist>(const QByteArray &amp;host)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>encodedPath</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>encodedPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodedPath</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setEncodedPath</anchor>
            <arglist>(const QByteArray &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>encodedQuery</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>encodedQuery</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodedQuery</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setEncodedQuery</anchor>
            <arglist>(const QByteArray &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>encodedFragment</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>encodedFragment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodedFragment</name>
            <anchorfile>qurl-obsolete.html</anchorfile>
            <anchor>setEncodedFragment</anchor>
            <arglist>(const QByteArray &amp;fragment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromAce</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromAce</anchor>
            <arglist>(const QByteArray &amp;domain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>toAce</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toAce</anchor>
            <arglist>(const QString &amp;domain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>idnWhitelist</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>idnWhitelist</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>toStringList</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toStringList</anchor>
            <arglist>(const QList&lt;QUrl&gt; &amp;urls, FormattingOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QUrl&gt;</type>
            <name>fromStringList</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromStringList</anchor>
            <arglist>(const QStringList &amp;urls, ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setIdnWhitelist</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setIdnWhitelist</anchor>
            <arglist>(const QStringList &amp;list)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUrlQuery</name>
        <filename>qurlquery.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery-2</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery-3</anchor>
            <arglist>(const QString &amp;queryString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery-4</anchor>
            <arglist>(const QUrlQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrlQuery &amp;</type>
            <name>operator=</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QUrlQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrlQuery &amp;</type>
            <name>operator=</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QUrlQuery &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>dtor.QUrlQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QUrlQuery &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QUrlQuery &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QUrlQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>query</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>query</anchor>
            <arglist>(QUrl::ComponentFormattingOptions encoding) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>setQuery</anchor>
            <arglist>(const QString &amp;queryString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QUrl::ComponentFormattingOptions encoding) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQueryDelimiters</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>setQueryDelimiters</anchor>
            <arglist>(QChar valueDelimiter, QChar pairDelimiter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>queryValueDelimiter</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>queryValueDelimiter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>queryPairDelimiter</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>queryPairDelimiter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQueryItems</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>setQueryItems</anchor>
            <arglist>(const QList&lt;QPair&lt;QString, QString&gt; &gt; &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPair&lt;QString, QString&gt; &gt;</type>
            <name>queryItems</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>queryItems</anchor>
            <arglist>(QUrl::ComponentFormattingOptions encoding) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasQueryItem</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>hasQueryItem</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addQueryItem</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>addQueryItem</anchor>
            <arglist>(const QString &amp;key, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeQueryItem</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>removeQueryItem</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>queryItemValue</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>queryItemValue</anchor>
            <arglist>(const QString &amp;key, QUrl::ComponentFormattingOptions encoding) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allQueryItemValues</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>allQueryItemValues</anchor>
            <arglist>(const QString &amp;key, QUrl::ComponentFormattingOptions encoding) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllQueryItems</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>removeAllQueryItems</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>defaultQueryValueDelimiter</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>defaultQueryValueDelimiter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>defaultQueryPairDelimiter</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>defaultQueryPairDelimiter</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModelIndex</name>
        <filename>qmodelindex.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModelIndex</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>QModelIndex</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quintptr</type>
            <name>internalId</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>internalId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>internalPointer</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>internalPointer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>parent</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>child</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>child</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QModelIndex &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QModelIndex &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QModelIndex &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPersistentModelIndex</name>
        <filename>qpersistentmodelindex.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPersistentModelIndex</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>QPersistentModelIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPersistentModelIndex</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>QPersistentModelIndex-3</anchor>
            <arglist>(const QPersistentModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QPersistentModelIndex &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPersistentModelIndex &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPersistentModelIndex &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPersistentModelIndex &amp;</type>
            <name>operator=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPersistentModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPersistentModelIndex</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>QPersistentModelIndex-4</anchor>
            <arglist>(QPersistentModelIndex &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPersistentModelIndex &amp;</type>
            <name>operator=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QPersistentModelIndex &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPersistentModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const QModelIndex &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const QModelIndex &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPersistentModelIndex &amp;</type>
            <name>operator=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(const QModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator const QModelIndex &amp;</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-const-QModelIndex--and</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>parent</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>child</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>child</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractItemModel</name>
        <filename>qabstractitemmodel.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractItemModel</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>QAbstractItemModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractItemModel</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>dtor.QAbstractItemModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>hasIndex</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canDropMimeData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>canDropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDragActions</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>supportedDragActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedDragActions</name>
            <anchorfile>qabstractitemmodel-obsolete.html</anchorfile>
            <anchor>setSupportedDragActions</anchor>
            <arglist>(Qt::DropActions actions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>moveRows</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceRow, int count, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>moveColumns</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceColumn, int count, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertRow</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>insertRow</anchor>
            <arglist>(int row, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertColumn</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>insertColumn</anchor>
            <arglist>(int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeRow</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>removeRow</anchor>
            <arglist>(int row, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeColumn</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>removeColumn</anchor>
            <arglist>(int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>moveRow</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>moveRow</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceRow, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>moveColumn</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>moveColumn</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceColumn, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fetchMore</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>fetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canFetchMore</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>canFetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>buddy</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>buddy</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>match</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>span</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QHash&lt;int, QByteArray&gt;</type>
            <name>roleNames</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>roleNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>LayoutChangeHint</name>
            <anchor>LayoutChangeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoLayoutChangeHint">
            <anchor>LayoutChangeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerticalSortHint">
            <anchor>LayoutChangeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HorizontalSortHint">
            <anchor>LayoutChangeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight, const QVector&lt;int&gt; &amp;roles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>headerDataChanged</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>headerDataChanged</anchor>
            <arglist>(Qt::Orientation orientation, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layoutChanged</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>layoutChanged</anchor>
            <arglist>(const QList&lt;QPersistentModelIndex&gt; &amp;parents, QAbstractItemModel::LayoutChangeHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layoutAboutToBeChanged</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>layoutAboutToBeChanged</anchor>
            <arglist>(const QList&lt;QPersistentModelIndex&gt; &amp;parents, QAbstractItemModel::LayoutChangeHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsAboutToBeInserted</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsAboutToBeInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsInserted</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsAboutToBeRemoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsAboutToBeRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsRemoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsAboutToBeInserted</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsAboutToBeInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsInserted</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsAboutToBeRemoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsAboutToBeRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsRemoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modelAboutToBeReset</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>modelAboutToBeReset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modelReset</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>modelReset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsAboutToBeMoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsAboutToBeMoved</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationRow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsMoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsMoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end, const QModelIndex &amp;destination, int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsAboutToBeMoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsAboutToBeMoved</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationColumn)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsMoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsMoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end, const QModelIndex &amp;destination, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>submit</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>submit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>revert</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>revert</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>resetInternalData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>resetInternalData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>createIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>createIndex</anchor>
            <arglist>(int row, int column, void *ptr) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>createIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>createIndex-2</anchor>
            <arglist>(int row, int column, quintptr id) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginInsertRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginInsertRows</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endInsertRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endInsertRows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginRemoveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginRemoveRows</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endRemoveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endRemoveRows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>beginMoveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginMoveRows</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceFirst, int sourceLast, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endMoveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endMoveRows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginInsertColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginInsertColumns</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endInsertColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endInsertColumns</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginRemoveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginRemoveColumns</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endRemoveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endRemoveColumns</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>beginMoveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginMoveColumns</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceFirst, int sourceLast, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endMoveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endMoveColumns</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qabstractitemmodel-obsolete.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginResetModel</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginResetModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endResetModel</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endResetModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>changePersistentIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>changePersistentIndex</anchor>
            <arglist>(const QModelIndex &amp;from, const QModelIndex &amp;to)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>changePersistentIndexList</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>changePersistentIndexList</anchor>
            <arglist>(const QModelIndexList &amp;from, const QModelIndexList &amp;to)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>persistentIndexList</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>persistentIndexList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRoleNames</name>
            <anchorfile>qabstractitemmodel-obsolete.html</anchorfile>
            <anchor>setRoleNames</anchor>
            <arglist>(const QHash&lt;int, QByteArray&gt; &amp;roleNames)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractTableModel</name>
        <filename>qabstracttablemodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTableModel</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>QAbstractTableModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractTableModel</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>dtor.QAbstractTableModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractListModel</name>
        <filename>qabstractlistmodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractListModel</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>QAbstractListModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractListModel</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>dtor.QAbstractListModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractProxyModel</name>
        <filename>qabstractproxymodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="property" type="QAbstractItemModel *">
            <name>sourceModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sourceModel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractProxyModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>QAbstractProxyModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractProxyModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>dtor.QAbstractProxyModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSourceModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sourceModel-prop</anchor>
            <arglist>(QAbstractItemModel *sourceModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>sourceModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sourceModel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>mapToSource</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mapToSource</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>mapFromSource</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mapFromSource</anchor>
            <arglist>(const QModelIndex &amp;sourceIndex) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionToSource</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mapSelectionToSource</anchor>
            <arglist>(const QItemSelection &amp;proxySelection) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionFromSource</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mapSelectionFromSource</anchor>
            <arglist>(const QItemSelection &amp;sourceSelection) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>submit</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>submit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>revert</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>revert</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>buddy</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>buddy</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canFetchMore</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>canFetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fetchMore</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>fetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>span</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canDropMimeData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>canDropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDragActions</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>supportedDragActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceModelChanged</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sourceModel-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>resetInternalData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>resetInternalData</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIdentityProxyModel</name>
        <filename>qidentityproxymodel.html</filename>
        <base>QAbstractProxyModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIdentityProxyModel</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>QIdentityProxyModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QIdentityProxyModel</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>dtor.QIdentityProxyModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapFromSource</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>mapFromSource</anchor>
            <arglist>(const QModelIndex &amp;sourceIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapToSource</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>mapToSource</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;child) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionFromSource</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>mapSelectionFromSource</anchor>
            <arglist>(const QItemSelection &amp;selection) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionToSource</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>mapSelectionToSource</anchor>
            <arglist>(const QItemSelection &amp;selection) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>match</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSourceModel</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>setSourceModel</anchor>
            <arglist>(QAbstractItemModel *newSourceModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemSelectionRange</name>
        <filename>qitemselectionrange.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionRange</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>QItemSelectionRange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionRange</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>QItemSelectionRange-2</anchor>
            <arglist>(const QItemSelectionRange &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionRange</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>QItemSelectionRange-3</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionRange</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>QItemSelectionRange-4</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>top</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>right</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPersistentModelIndex &amp;</type>
            <name>topLeft</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>topLeft</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPersistentModelIndex &amp;</type>
            <name>bottomRight</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>bottomRight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>parent</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parentIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QItemSelectionRange &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QItemSelectionRange</type>
            <name>intersect</name>
            <anchorfile>qitemselectionrange-obsolete.html</anchorfile>
            <anchor>intersect</anchor>
            <arglist>(const QItemSelectionRange &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QItemSelectionRange</type>
            <name>intersected</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QItemSelectionRange &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QItemSelectionRange &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QItemSelectionRange &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QItemSelectionRange &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>indexes</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>indexes</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemSelectionModel</name>
        <filename>qitemselectionmodel.html</filename>
        <base>QObject</base>
        <member kind="property" type="QModelIndexList">
            <name>selectedIndexes</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedIndexes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SelectionFlag</name>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoUpdate">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Clear">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Select">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Deselect">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Toggle">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Current">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rows">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Columns">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectCurrent">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToggleCurrent">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClearAndSelect">
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QItemSelectionModel::SelectionFlag">
            <name>SelectionFlags</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionModel</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>QItemSelectionModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionModel</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>QItemSelectionModel-2</anchor>
            <arglist>(QAbstractItemModel *model, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QItemSelectionModel</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>dtor.QItemSelectionModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>currentIndex</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>currentIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelected</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>isSelected</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRowSelected</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>isRowSelected</anchor>
            <arglist>(int row, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isColumnSelected</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>isColumnSelected</anchor>
            <arglist>(int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rowIntersectsSelection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>rowIntersectsSelection</anchor>
            <arglist>(int row, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>columnIntersectsSelection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>columnIntersectsSelection</anchor>
            <arglist>(int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSelection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>hasSelection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>selectedIndexes</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedIndexes-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>selectedRows</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedRows</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>selectedColumns</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedColumns</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QItemSelection</type>
            <name>selection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>model-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModel</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>setCurrentIndex</anchor>
            <arglist>(const QModelIndex &amp;index, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>select</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>select</anchor>
            <arglist>(const QModelIndex &amp;index, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>select</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>select-2</anchor>
            <arglist>(const QItemSelection &amp;selection, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>reset</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearSelection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>clearSelection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clearCurrentIndex</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>clearCurrentIndex</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedIndexes-prop</anchor>
            <arglist>(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentRowChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>currentRowChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentColumnChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>currentColumnChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modelChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>modelChanged</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>emitSelectionChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>emitSelectionChanged</anchor>
            <arglist>(const QItemSelection &amp;newSelection, const QItemSelection &amp;oldSelection)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemSelection</name>
        <filename>qitemselection.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelection</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>QItemSelection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelection</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>QItemSelection-2</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>select</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>select</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>indexes</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>indexes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>merge</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>merge</anchor>
            <arglist>(const QItemSelection &amp;other, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>split</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>split</anchor>
            <arglist>(const QItemSelectionRange &amp;range, const QItemSelectionRange &amp;other, QItemSelection *result)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSortFilterProxyModel</name>
        <filename>qsortfilterproxymodel.html</filename>
        <base>QAbstractProxyModel</base>
        <member kind="property" type="QRegExp">
            <name>filterRegExp</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRegExp-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>filterKeyColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterKeyColumn-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dynamicSortFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dynamicSortFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::CaseSensitivity">
            <name>filterCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterCaseSensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::CaseSensitivity">
            <name>sortCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortCaseSensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isSortLocaleAware</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>isSortLocaleAware-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>sortRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>filterRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRole-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSortFilterProxyModel</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>QSortFilterProxyModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSortFilterProxyModel</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dtor.QSortFilterProxyModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSourceModel</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setSourceModel</anchor>
            <arglist>(QAbstractItemModel *sourceModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapToSource</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mapToSource</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapFromSource</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mapFromSource</anchor>
            <arglist>(const QModelIndex &amp;sourceIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionToSource</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mapSelectionToSource</anchor>
            <arglist>(const QItemSelection &amp;proxySelection) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionFromSource</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mapSelectionFromSource</anchor>
            <arglist>(const QItemSelection &amp;sourceSelection) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegExp</type>
            <name>filterRegExp</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRegExp-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterRegExp</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRegExp-prop</anchor>
            <arglist>(const QRegExp &amp;regExp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>filterKeyColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterKeyColumn-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterKeyColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterKeyColumn-prop</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>filterCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterCaseSensitivity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterCaseSensitivity-prop</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>sortCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortCaseSensitivity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortCaseSensitivity-prop</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSortLocaleAware</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>isSortLocaleAware-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortLocaleAware</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>isSortLocaleAware-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sortColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortColumn</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::SortOrder</type>
            <name>sortOrder</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortOrder</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>dynamicSortFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dynamicSortFilter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDynamicSortFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dynamicSortFilter-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sortRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>(int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>filterRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRole-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRole-prop</anchor>
            <arglist>(int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterRegExp</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRegExp-prop</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterWildcard</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setFilterWildcard</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterFixedString</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setFilterFixedString</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsortfilterproxymodel-obsolete.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>filterAcceptsRow</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterAcceptsRow</anchor>
            <arglist>(int source_row, const QModelIndex &amp;source_parent) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>filterAcceptsColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterAcceptsColumn</anchor>
            <arglist>(int source_column, const QModelIndex &amp;source_parent) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>lessThan</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>lessThan</anchor>
            <arglist>(const QModelIndex &amp;source_left, const QModelIndex &amp;source_right) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>filterChanged</name>
            <anchorfile>qsortfilterproxymodel-obsolete.html</anchorfile>
            <anchor>filterChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>invalidateFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>invalidateFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;child) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fetchMore</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>fetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canFetchMore</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>canFetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>buddy</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>buddy</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>match</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>span</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringListModel</name>
        <filename>qstringlistmodel.html</filename>
        <base>QAbstractListModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringListModel</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>QStringListModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringListModel</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>QStringListModel-2</anchor>
            <arglist>(const QStringList &amp;strings, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>stringList</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>stringList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStringList</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>setStringList</anchor>
            <arglist>(const QStringList &amp;strings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonArray</name>
        <filename>qjsonarray.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>QJsonArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>QJsonArray-2</anchor>
            <arglist>(std::initializer_list&lt;QJsonValue&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>dtor.QJsonArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>QJsonArray-3</anchor>
            <arglist>(const QJsonArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QJsonArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonArray</type>
            <name>fromStringList</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>fromStringList</anchor>
            <arglist>(const QStringList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonArray</type>
            <name>fromVariantList</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>fromVariantList</anchor>
            <arglist>(const QVariantList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>toVariantList</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>toVariantList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>at</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>first</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>first</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>last</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>last</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAt</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>takeAt</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int i, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int i, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QJsonValue &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonArray &amp;other) const</arglist>
        </member>
        <class>QJsonArray::iterator</class>
        <class>QJsonArray::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(iterator before, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(iterator it)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>operator+</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QJsonValue &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_front</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonArray::iterator</name>
        <filename>qjsonarray-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator*</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-lt-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-lt-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-gt-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-gt-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator+</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator-</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator-</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator--2</anchor>
            <arglist>(iterator other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonArray::const_iterator</name>
        <filename>qjsonarray-const-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>const_iterator-4</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator*</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator-</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator--2</anchor>
            <arglist>(const_iterator other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonParseError</name>
        <filename>qjsonparseerror.html</filename>
        <member kind="enum">
            <name>ParseError</name>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnterminatedObject">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MissingNameSeparator">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnterminatedArray">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MissingValueSeparator">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IllegalValue">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TerminationByNumber">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IllegalNumber">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IllegalEscapeSequence">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IllegalUTF8String">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnterminatedString">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MissingObject">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeepNesting">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DocumentTooLarge">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GarbageAtEnd">
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonDocument</name>
        <filename>qjsondocument.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument-2</anchor>
            <arglist>(const QJsonObject &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument-3</anchor>
            <arglist>(const QJsonArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>dtor.QJsonDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument-4</anchor>
            <arglist>(const QJsonDocument &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonDocument &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QJsonDocument &amp;other)</arglist>
        </member>
        <member kind="enum">
            <name>DataValidation</name>
            <anchor>DataValidation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Validate">
            <anchor>DataValidation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BypassValidation">
            <anchor>DataValidation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonDocument</type>
            <name>fromRawData</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>fromRawData</anchor>
            <arglist>(const char *data, int size, DataValidation validation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>rawData</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>rawData</anchor>
            <arglist>(int *size) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonDocument</type>
            <name>fromBinaryData</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>fromBinaryData</anchor>
            <arglist>(const QByteArray &amp;data, DataValidation validation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toBinaryData</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>toBinaryData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonDocument</type>
            <name>fromVariant</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>fromVariant</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>toVariant</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>toVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>JsonFormat</name>
            <anchor>JsonFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Indented">
            <anchor>JsonFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Compact">
            <anchor>JsonFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonDocument</type>
            <name>fromJson</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>fromJson</anchor>
            <arglist>(const QByteArray &amp;json, QJsonParseError *error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toJson</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>toJson</anchor>
            <arglist>(JsonFormat format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isArray</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>isArray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isObject</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>isObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>object</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>array</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>array</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObject</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>setObject</anchor>
            <arglist>(const QJsonObject &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArray</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>setArray</anchor>
            <arglist>(const QJsonArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonDocument &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonDocument &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonObject</name>
        <filename>qjsonobject.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>QJsonObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>QJsonObject-2</anchor>
            <arglist>(std::initializer_list&lt;QPair&lt;QString, QJsonValue&gt; &gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>dtor.QJsonObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>QJsonObject-3</anchor>
            <arglist>(const QJsonObject &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QJsonObject &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonObject</type>
            <name>fromVariantMap</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>fromVariantMap</anchor>
            <arglist>(const QVariantMap &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>toVariantMap</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>toVariantMap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonObject</type>
            <name>fromVariantHash</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>fromVariantHash</anchor>
            <arglist>(const QVariantHash &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantHash</type>
            <name>toVariantHash</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>toVariantHash</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>keys</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>value</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>take</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonObject &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonObject &amp;other) const</arglist>
        </member>
        <class>QJsonObject::iterator</class>
        <class>QJsonObject::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(iterator it)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>find</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>find</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constFind</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp;key, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>mapped_type</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>mapped_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonObject::iterator</name>
        <filename>qjsonobject-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>value</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator*</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator+</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator-</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonObject::const_iterator</name>
        <filename>qjsonobject-const-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>value</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator*</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonValue</name>
        <filename>qjsonvalue.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bool">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="String">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Array">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Object">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Undefined">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-2</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-3</anchor>
            <arglist>(double n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-12</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-13</anchor>
            <arglist>(qint64 n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-4</anchor>
            <arglist>(const QString &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-5</anchor>
            <arglist>(QLatin1String s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-6</anchor>
            <arglist>(const char *s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-7</anchor>
            <arglist>(const QJsonArray &amp;a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-8</anchor>
            <arglist>(const QJsonObject &amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>dtor.QJsonValue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-9</anchor>
            <arglist>(const QJsonValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QJsonValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonValue</type>
            <name>fromVariant</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>fromVariant</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>toVariant</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBool</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isBool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDouble</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isDouble</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isString</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isArray</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isArray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isObject</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndefined</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isUndefined</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toBool</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toBool</anchor>
            <arglist>(bool defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(int defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(double defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(const QString &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>toArray</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toArray-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>toArray</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toArray</anchor>
            <arglist>(const QJsonArray &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>toObject</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toObject-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>toObject</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toObject</anchor>
            <arglist>(const QJsonObject &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonValue &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonValue &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractEventDispatcher</name>
        <filename>qabstracteventdispatcher.html</filename>
        <base>QObject</base>
        <class>QAbstractEventDispatcher::TimerInfo</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractEventDispatcher</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>QAbstractEventDispatcher</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractEventDispatcher</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>dtor.QAbstractEventDispatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAbstractEventDispatcher *</type>
            <name>instance</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>(QThread *thread)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>processEvents</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>processEvents</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>hasPendingEvents</name>
            <anchorfile>qabstracteventdispatcher-obsolete.html</anchorfile>
            <anchor>hasPendingEvents</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>registerSocketNotifier</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registerSocketNotifier</anchor>
            <arglist>(QSocketNotifier *notifier) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>unregisterSocketNotifier</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>unregisterSocketNotifier</anchor>
            <arglist>(QSocketNotifier *notifier) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>registerTimer</name>
            <anchorfile>qabstracteventdispatcher-obsolete.html</anchorfile>
            <anchor>registerTimer-3</anchor>
            <arglist>(int interval, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerTimer</name>
            <anchorfile>qabstracteventdispatcher-obsolete.html</anchorfile>
            <anchor>registerTimer-2</anchor>
            <arglist>(int timerId, int interval, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>registerTimer</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registerTimer</anchor>
            <arglist>(int interval, Qt::TimerType timerType, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>registerTimer</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registerTimer-4</anchor>
            <arglist>(int timerId, int interval, Qt::TimerType timerType, QObject *object) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>unregisterTimer</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>unregisterTimer</anchor>
            <arglist>(int timerId) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>unregisterTimers</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>unregisterTimers</anchor>
            <arglist>(QObject *object) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;TimerInfo&gt;</type>
            <name>registeredTimers</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registeredTimers</anchor>
            <arglist>(QObject *object) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>remainingTime</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>remainingTime</anchor>
            <arglist>(int timerId) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>registerEventNotifier</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registerEventNotifier</anchor>
            <arglist>(QWinEventNotifier *notifier) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>unregisterEventNotifier</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>unregisterEventNotifier</anchor>
            <arglist>(QWinEventNotifier *notifier) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>wakeUp</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>wakeUp</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>interrupt</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>interrupt</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>flush</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installNativeEventFilter</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>installNativeEventFilter</anchor>
            <arglist>(QAbstractNativeEventFilter *filterObj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeNativeEventFilter</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>removeNativeEventFilter</anchor>
            <arglist>(QAbstractNativeEventFilter *filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>filterNativeEvent</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>filterNativeEvent</anchor>
            <arglist>(const QByteArray &amp;eventType, void *message, long *result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>filterEvent</name>
            <anchorfile>qabstracteventdispatcher-obsolete.html</anchorfile>
            <anchor>filterEvent</anchor>
            <arglist>(void *message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToBlock</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>aboutToBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>awake</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>awake</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractEventDispatcher::TimerInfo</name>
        <filename>qabstracteventdispatcher-timerinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>TimerInfo</name>
            <anchorfile>qabstracteventdispatcher-timerinfo.html</anchorfile>
            <anchor>TimerInfo</anchor>
            <arglist>(int timerId, int interval, Qt::TimerType timerType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractNativeEventFilter</name>
        <filename>qabstractnativeeventfilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractNativeEventFilter</name>
            <anchorfile>qabstractnativeeventfilter.html</anchorfile>
            <anchor>QAbstractNativeEventFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractNativeEventFilter</name>
            <anchorfile>qabstractnativeeventfilter.html</anchorfile>
            <anchor>dtor.QAbstractNativeEventFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>nativeEventFilter</name>
            <anchorfile>qabstractnativeeventfilter.html</anchorfile>
            <anchor>nativeEventFilter</anchor>
            <arglist>(const QByteArray &amp;eventType, void *message, long *result) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBasicTimer</name>
        <filename>qbasictimer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBasicTimer</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>QBasicTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBasicTimer</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>dtor.QBasicTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timerId</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>timerId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(int msec, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>start-2</anchor>
            <arglist>(int msec, Qt::TimerType timerType, QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCoreApplication</name>
        <filename>qcoreapplication.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>applicationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>applicationVersion</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>organizationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>organizationDomain</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationDomain-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>quitLockEnabled</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>quitLockEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCoreApplication</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>QCoreApplication</anchor>
            <arglist>(int &amp;argc, char **argv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCoreApplication</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>dtor.QCoreApplication</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>arguments</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>arguments</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(Qt::ApplicationAttribute attribute, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>testAttribute</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>testAttribute</anchor>
            <arglist>(Qt::ApplicationAttribute attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setOrganizationDomain</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationDomain-prop</anchor>
            <arglist>(const QString &amp;orgDomain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>organizationDomain</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationDomain-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setOrganizationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationName-prop</anchor>
            <arglist>(const QString &amp;orgName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>organizationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationName-prop</anchor>
            <arglist>(const QString &amp;application)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationVersion</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationVersion-prop</anchor>
            <arglist>(const QString &amp;version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationVersion</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationVersion-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setSetuidAllowed</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>setSetuidAllowed</anchor>
            <arglist>(bool allow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSetuidAllowed</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>isSetuidAllowed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCoreApplication *</type>
            <name>instance</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>processEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>processEvents</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>processEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>processEvents-2</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags, int maxtime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>exit</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>exit</anchor>
            <arglist>(int returnCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>sendEvent</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>sendEvent</anchor>
            <arglist>(QObject *receiver, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>postEvent</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>postEvent</anchor>
            <arglist>(QObject *receiver, QEvent *event, int priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>sendPostedEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>sendPostedEvents</anchor>
            <arglist>(QObject *receiver, int event_type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removePostedEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>removePostedEvents</anchor>
            <arglist>(QObject *receiver, int eventType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasPendingEvents</name>
            <anchorfile>qcoreapplication-obsolete.html</anchorfile>
            <anchor>hasPendingEvents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAbstractEventDispatcher *</type>
            <name>eventDispatcher</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>eventDispatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setEventDispatcher</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>setEventDispatcher</anchor>
            <arglist>(QAbstractEventDispatcher *eventDispatcher)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>notify</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>notify</anchor>
            <arglist>(QObject *receiver, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>startingUp</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>startingUp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>closingDown</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>closingDown</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationDirPath</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationDirPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationFilePath</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationFilePath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qint64</type>
            <name>applicationPid</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationPid</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setLibraryPaths</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>setLibraryPaths</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>libraryPaths</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>libraryPaths</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addLibraryPath</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>addLibraryPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removeLibraryPath</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>removeLibraryPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>installTranslator</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>installTranslator</anchor>
            <arglist>(QTranslator *translationFile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>removeTranslator</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>removeTranslator</anchor>
            <arglist>(QTranslator *translationFile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>translate</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const char *context, const char *sourceText, const char *disambiguation, int n)</arglist>
        </member>
        <member kind="enum">
            <name>Encoding</name>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnicodeUTF8">
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Latin1">
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultCodec">
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CodecForTr">
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>translate</name>
            <anchorfile>qcoreapplication-obsolete.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(const char *context, const char *key, const char *disambiguation, Encoding encoding, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>flush</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installNativeEventFilter</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>installNativeEventFilter</anchor>
            <arglist>(QAbstractNativeEventFilter *filterObj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeNativeEventFilter</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>removeNativeEventFilter</anchor>
            <arglist>(QAbstractNativeEventFilter *filterObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isQuitLockEnabled</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>quitLockEnabled-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setQuitLockEnabled</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>quitLockEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>quit</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>quit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToQuit</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>aboutToQuit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEvent</name>
        <filename>qevent.html</filename>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Timer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseButtonPress">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseButtonRelease">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseButtonDblClick">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeyPress">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeyRelease">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocusIn">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocusOut">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocusAboutToChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Enter">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Leave">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Paint">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Move">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Resize">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Create">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Destroy">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Show">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hide">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Close">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Quit">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParentChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParentAboutToChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThreadChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowActivate">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowDeactivate">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShowToParent">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HideToParent">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Wheel">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowTitleChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowIconChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationWindowIconChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationFontChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationLayoutDirectionChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationPaletteChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PaletteChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Clipboard">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Speech">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaCall">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SockAct">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WinEventAct">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeferredDelete">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragEnter">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragLeave">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Drop">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragResponse">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChildAdded">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChildPolished">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChildRemoved">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShowWindowRequest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PolishRequest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Polish">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LayoutRequest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UpdateRequest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UpdateLater">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmbeddingControl">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActivateControl">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeactivateControl">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContextMenu">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InputMethod">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabletMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocaleChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LanguageChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LayoutDirectionChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Style">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabletPress">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabletRelease">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OkRequest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HelpRequest">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IconDrag">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EnabledChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActivationChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StyleChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IconTextChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ModifiedChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseTrackingChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowBlocked">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowUnblocked">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowStateChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnlyChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolTip">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhatsThis">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StatusTip">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionChanged">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionAdded">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionRemoved">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FileOpen">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Shortcut">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShortcutOverride">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhatsThisClicked">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolBarChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationActivate">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationActivated">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationDeactivate">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationDeactivated">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QueryWhatsThis">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EnterWhatsThisMode">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeaveWhatsThisMode">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ZOrderChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HoverEnter">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HoverLeave">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HoverMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EnterEditFocus">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeaveEditFocus">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AcceptDropsChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ZeroTimerEvent">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneMouseMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneMousePress">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneMouseRelease">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneMouseDoubleClick">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneContextMenu">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneHoverEnter">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneHoverMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneHoverLeave">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneHelp">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneDragEnter">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneDragMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneDragLeave">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneDrop">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneWheel">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeyboardLayoutChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicPropertyChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabletEnterProximity">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabletLeaveProximity">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonClientAreaMouseMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonClientAreaMouseButtonPress">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonClientAreaMouseButtonRelease">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonClientAreaMouseButtonDblClick">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MacSizeChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentsRectChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MacGLWindowChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FutureCallOut">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneResize">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsSceneMove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CursorChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolTipChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkReplyUpdated">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GrabMouse">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UngrabMouse">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GrabKeyboard">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UngrabKeyboard">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MacGLClearDrawable">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StateMachineSignal">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StateMachineWrapped">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchBegin">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchUpdate">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchEnd">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NativeGesture">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RequestSoftwareInputPanel">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseSoftwareInputPanel">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WinIdChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gesture">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GestureOverride">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollPrepare">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Scroll">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Expose">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InputMethodQuery">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrientationChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchCancel">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SockClose">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlatformPanel">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StyleAnimationUpdate">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationStateChange">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowChangeInternal">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScreenChangeInternal">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlatformSurface">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="User">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaxUser">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEvent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>QEvent</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QEvent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>dtor.QEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>spontaneous</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>spontaneous</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>ignore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>registerEventType</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>registerEventType</anchor>
            <arglist>(int hint)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimerEvent</name>
        <filename>qtimerevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimerEvent</name>
            <anchorfile>qtimerevent.html</anchorfile>
            <anchor>QTimerEvent</anchor>
            <arglist>(int timerId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timerId</name>
            <anchorfile>qtimerevent.html</anchorfile>
            <anchor>timerId</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QChildEvent</name>
        <filename>qchildevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChildEvent</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>QChildEvent</anchor>
            <arglist>(Type type, QObject *child)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>child</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>child</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>added</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>added</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>polished</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>polished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removed</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>removed</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDynamicPropertyChangeEvent</name>
        <filename>qdynamicpropertychangeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDynamicPropertyChangeEvent</name>
            <anchorfile>qdynamicpropertychangeevent.html</anchorfile>
            <anchor>QDynamicPropertyChangeEvent</anchor>
            <arglist>(const QByteArray &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>propertyName</name>
            <anchorfile>qdynamicpropertychangeevent.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEventLoop</name>
        <filename>qeventloop.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoop</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>QEventLoop</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEventLoop</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>dtor.QEventLoop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ProcessEventsFlag</name>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllEvents">
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExcludeUserInputEvents">
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExcludeSocketNotifiers">
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WaitForMoreEvents">
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="X11ExcludeTimers">
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EventLoopExec">
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DialogExec">
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QEventLoop::ProcessEventsFlag">
            <name>ProcessEventsFlags</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>processEvents</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>processEvents</anchor>
            <arglist>(ProcessEventsFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>processEvents</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>processEvents-2</anchor>
            <arglist>(ProcessEventsFlags flags, int maxTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>(ProcessEventsFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exit</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>exit</anchor>
            <arglist>(int returnCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wakeUp</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>wakeUp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quit</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>quit</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEventLoopLocker</name>
        <filename>qeventlooplocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>QEventLoopLocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>QEventLoopLocker-2</anchor>
            <arglist>(QEventLoop *loop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>QEventLoopLocker-3</anchor>
            <arglist>(QThread *thread)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>dtor.QEventLoopLocker</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaMethod</name>
        <filename>qmetamethod.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>methodSignature</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>methodSignature</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>name</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>typeName</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>typeName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>returnType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>returnType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>parameterCount</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>parameterType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterType</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>parameterTypes</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>parameterNames</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>tag</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>tag</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Access</name>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Private">
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Protected">
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Public">
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Access</type>
            <name>access</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>access</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>MethodType</name>
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Method">
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Signal">
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Slot">
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Constructor">
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MethodType</type>
            <name>methodType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>methodType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>methodIndex</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>methodIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>revision</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>revision</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invoke</anchor>
            <arglist>(QObject *object, Qt::ConnectionType connectionType, QGenericReturnArgument returnValue, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invoke-2</anchor>
            <arglist>(QObject *object, QGenericReturnArgument returnValue, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invoke-3</anchor>
            <arglist>(QObject *object, Qt::ConnectionType connectionType, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invoke-4</anchor>
            <arglist>(QObject *object, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invokeOnGadget</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invokeOnGadget</anchor>
            <arglist>(void *gadget, QGenericReturnArgument returnValue, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invokeOnGadget</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invokeOnGadget-2</anchor>
            <arglist>(void *gadget, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaMethod</type>
            <name>fromSignal</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>fromSignal</anchor>
            <arglist>(PointerToMemberFunction signal)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaEnum</name>
        <filename>qmetaenum.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFlag</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>isFlag</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyCount</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>keyCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>key</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>key</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>value</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>scope</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>scope</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyToValue</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>keyToValue</anchor>
            <arglist>(const char *key, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>valueToKey</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>valueToKey</anchor>
            <arglist>(int value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keysToValue</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>keysToValue</anchor>
            <arglist>(const char *keys, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>valueToKeys</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>valueToKeys</anchor>
            <arglist>(int value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaEnum</type>
            <name>fromType</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>fromType</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaProperty</name>
        <filename>qmetaproperty.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>typeName</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>typeName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant::Type</type>
            <name>type</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>userType</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>userType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyIndex</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>propertyIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResettable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isResettable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDesignable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isDesignable</anchor>
            <arglist>(const QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isScriptable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isScriptable</anchor>
            <arglist>(const QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStored</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isStored</anchor>
            <arglist>(const QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEditable</name>
            <anchorfile>qmetaproperty-obsolete.html</anchorfile>
            <anchor>isEditable</anchor>
            <arglist>(const QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUser</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isUser</anchor>
            <arglist>(const QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConstant</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isConstant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinal</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isFinal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFlagType</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isFlagType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnumType</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isEnumType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaEnum</type>
            <name>enumerator</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>enumerator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNotifySignal</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>hasNotifySignal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod</type>
            <name>notifySignal</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>notifySignal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>notifySignalIndex</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>notifySignalIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>revision</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>revision</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>read</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(const QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QObject *object, const QVariant &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>reset</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>(QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>readOnGadget</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>readOnGadget</anchor>
            <arglist>(const void *gadget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>writeOnGadget</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>writeOnGadget</anchor>
            <arglist>(void *gadget, const QVariant &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>resetOnGadget</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>resetOnGadget</anchor>
            <arglist>(void *gadget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaClassInfo</name>
        <filename>qmetaclassinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qmetaclassinfo.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>value</name>
            <anchorfile>qmetaclassinfo.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaType</name>
        <filename>qmetatype.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bool">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UInt">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LongLong">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ULongLong">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Long">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Short">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Char">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ULong">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UShort">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UChar">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VoidStar">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QChar">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QString">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QStringList">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QByteArray">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QBitArray">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QDate">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QTime">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QDateTime">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QUrl">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QLocale">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QRect">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QRectF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QSize">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QSizeF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QLine">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QLineF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QPoint">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QPointF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QRegExp">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QEasingCurve">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QUuid">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QVariant">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QModelIndex">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QPersistentModelIndex">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QRegularExpression">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QJsonValue">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QJsonObject">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QJsonArray">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QJsonDocument">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QByteArrayList">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QObjectStar">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SChar">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Void">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QVariantMap">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QVariantList">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QVariantHash">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QFont">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QPixmap">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QBrush">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QColor">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QPalette">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QIcon">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QImage">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QPolygon">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QRegion">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QBitmap">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QCursor">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QKeySequence">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QPen">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QTextLength">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QTextFormat">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QMatrix">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QTransform">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QMatrix4x4">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QVector2D">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QVector3D">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QVector4D">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QQuaternion">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QPolygonF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QSizePolicy">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="User">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TypeFlag</name>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NeedsConstruction">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NeedsDestruction">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MovableType">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PointerToQObject">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IsEnumeration">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SharedPointerToQObject">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WeakPointerToQObject">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrackingPointerToQObject">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WasDeclaredAsMetaType">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IsGadget">
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMetaType::TypeFlag">
            <name>TypeFlags</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>type</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>type</anchor>
            <arglist>(const char *typeName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>type</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>type-2</anchor>
            <arglist>(const QByteArray &amp;typeName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const char *</type>
            <name>typeName</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>typeName</anchor>
            <arglist>(int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>sizeOf</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>sizeOf</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>TypeFlags</type>
            <name>typeFlags</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>typeFlags</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QMetaObject *</type>
            <name>metaObjectForType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>metaObjectForType</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isRegistered</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isRegistered</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void *</type>
            <name>create</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(int type, const void *copy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void *</type>
            <name>construct</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>construct-2</anchor>
            <arglist>(int type, const void *copy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(int type, void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void *</type>
            <name>construct</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>construct</anchor>
            <arglist>(int type, void *where, const void *copy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>destruct</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>destruct</anchor>
            <arglist>(int type, void *where)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(QDataStream &amp;stream, int type, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(QDataStream &amp;stream, int type, void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMetaType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>QMetaType</anchor>
            <arglist>(const int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMetaType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>dtor.QMetaType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRegistered</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isRegistered-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sizeOf</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>sizeOf-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TypeFlags</type>
            <name>flags</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>create</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>create-2</anchor>
            <arglist>(const void *copy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>destroy-2</anchor>
            <arglist>(void *data) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>construct</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>construct-3</anchor>
            <arglist>(void *where, const void *copy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destruct</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>destruct-2</anchor>
            <arglist>(void *data) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerComparators</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerComparators</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerEqualsComparator</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerEqualsComparator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredComparators</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredComparators</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredComparators</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredComparators-2</anchor>
            <arglist>(int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerDebugStreamOperator</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerDebugStreamOperator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredDebugStreamOperator</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredDebugStreamOperator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredDebugStreamOperator</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredDebugStreamOperator-2</anchor>
            <arglist>(int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerConverter</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerConverter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerConverter</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerConverter-2</anchor>
            <arglist>(MemberFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerConverter</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerConverter-3</anchor>
            <arglist>(MemberFunctionOk function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerConverter</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerConverter-4</anchor>
            <arglist>(UnaryFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>convert</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>convert</anchor>
            <arglist>(const void *from, int fromTypeId, void *to, int toTypeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>compare</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const void *lhs, const void *rhs, int typeId, int *result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>equals</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>equals</anchor>
            <arglist>(const void *lhs, const void *rhs, int typeId, int *result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>debugStream</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>debugStream</anchor>
            <arglist>(QDebug &amp;dbg, const void *rhs, int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredConverterFunction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredConverterFunction-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredConverterFunction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredConverterFunction</anchor>
            <arglist>(int fromTypeId, int toTypeId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMimeData</name>
        <filename>qmimedata.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMimeData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>QMimeData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMimeData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>dtor.QMimeData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QUrl&gt;</type>
            <name>urls</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>urls</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrls</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setUrls</anchor>
            <arglist>(const QList&lt;QUrl&gt; &amp;urls)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasUrls</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasUrls</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasText</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>html</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>html</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHtml</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setHtml</anchor>
            <arglist>(const QString &amp;html)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasHtml</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasHtml</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>imageData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>imageData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImageData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setImageData</anchor>
            <arglist>(const QVariant &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasImage</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasImage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>colorData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>colorData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setColorData</anchor>
            <arglist>(const QVariant &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasColor</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QString &amp;mimeType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QString &amp;mimeType, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFormat</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>removeFormat</anchor>
            <arglist>(const QString &amp;mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasFormat</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasFormat</anchor>
            <arglist>(const QString &amp;mimeType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>formats</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>formats</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>retrieveData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>retrieveData</anchor>
            <arglist>(const QString &amp;mimeType, QVariant::Type type) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QObject</name>
        <filename>qobject.html</filename>
        <member kind="property" type="QString">
            <name>objectName</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>objectName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObject</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>QObject</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QObject</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>dtor.QObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *watched, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>tr</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>tr</anchor>
            <arglist>(const char *sourceText, const char *disambiguation, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>trUtf8</name>
            <anchorfile>qobject-obsolete.html</anchorfile>
            <anchor>trUtf8</anchor>
            <arglist>(const char *sourceText, const char *disambiguation, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>objectName</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>objectName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObjectName</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>objectName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWidgetType</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>isWidgetType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWindowType</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>isWindowType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>signalsBlocked</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>signalsBlocked</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>blockSignals</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>blockSignals</anchor>
            <arglist>(bool block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QThread *</type>
            <name>thread</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>thread</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveToThread</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>moveToThread</anchor>
            <arglist>(QThread *targetThread)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startTimer</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>startTimer</anchor>
            <arglist>(int interval, Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>killTimer</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>killTimer</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>findChild</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChild</anchor>
            <arglist>(const QString &amp;name, Qt::FindChildOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>findChildren</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChildren</anchor>
            <arglist>(const QString &amp;name, Qt::FindChildOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>findChildren</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChildren-2</anchor>
            <arglist>(const QRegExp &amp;regExp, Qt::FindChildOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>findChildren</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChildren-3</anchor>
            <arglist>(const QRegularExpression &amp;re, Qt::FindChildOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QObjectList &amp;</type>
            <name>children</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>children</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>setParent</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installEventFilter</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>installEventFilter</anchor>
            <arglist>(QObject *filterObj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeEventFilter</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>removeEventFilter</anchor>
            <arglist>(QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect</anchor>
            <arglist>(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-2</anchor>
            <arglist>(const QObject *sender, const QMetaMethod &amp;signal, const QObject *receiver, const QMetaMethod &amp;method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-3</anchor>
            <arglist>(const QObject *sender, const char *signal, const char *method, Qt::ConnectionType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-4</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, const QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-5</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, Functor functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-6</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, const QObject *context, Functor functor, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect</anchor>
            <arglist>(const QObject *sender, const char *signal, const QObject *receiver, const char *method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-2</anchor>
            <arglist>(const QObject *sender, const QMetaMethod &amp;signal, const QObject *receiver, const QMetaMethod &amp;method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-4</anchor>
            <arglist>(const char *signal, const QObject *receiver, const char *method) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-5</anchor>
            <arglist>(const QObject *receiver, const char *method) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-3</anchor>
            <arglist>(const QMetaObject::Connection &amp;connection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-6</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, const QObject *receiver, PointerToMemberFunction method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dumpObjectTree</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>dumpObjectTree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dumpObjectInfo</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>dumpObjectInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setProperty</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>setProperty</anchor>
            <arglist>(const char *name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>property</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>property</anchor>
            <arglist>(const char *name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>dynamicPropertyNames</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>dynamicPropertyNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroyed</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>destroyed</anchor>
            <arglist>(QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>objectNameChanged</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>objectName-prop</anchor>
            <arglist>(const QString &amp;objectName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>parent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inherits</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>inherits</anchor>
            <arglist>(const char *className) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deleteLater</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>deleteLater</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QObject *</type>
            <name>sender</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>sender</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>senderSignalIndex</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>senderSignalIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>receivers</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>receivers</anchor>
            <arglist>(const char *signal) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isSignalConnected</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>isSignalConnected</anchor>
            <arglist>(const QMetaMethod &amp;signal) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>childEvent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>childEvent</anchor>
            <arglist>(QChildEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>customEvent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>customEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectNotify</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connectNotify</anchor>
            <arglist>(const QMetaMethod &amp;signal)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>disconnectNotify</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnectNotify</anchor>
            <arglist>(const QMetaMethod &amp;signal)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSignalBlocker</name>
        <filename>qsignalblocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalBlocker</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>QSignalBlocker</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalBlocker</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>QSignalBlocker-3</anchor>
            <arglist>(QObject &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSignalBlocker</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>dtor.QSignalBlocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalBlocker</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>QSignalBlocker-2</anchor>
            <arglist>(QSignalBlocker &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSignalBlocker &amp;</type>
            <name>operator=</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QSignalBlocker &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reblock</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>reblock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unblock</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>unblock</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QObjectCleanupHandler</name>
        <filename>qobjectcleanuphandler.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectCleanupHandler</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>QObjectCleanupHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QObjectCleanupHandler</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>dtor.QObjectCleanupHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>add</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>add</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericArgument</name>
        <filename>qgenericargument.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericArgument</name>
            <anchorfile>qgenericargument.html</anchorfile>
            <anchor>QGenericArgument</anchor>
            <arglist>(const char *name, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>data</name>
            <anchorfile>qgenericargument.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qgenericargument.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericReturnArgument</name>
        <filename>qgenericreturnargument.html</filename>
        <base>QGenericArgument</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericReturnArgument</name>
            <anchorfile>qgenericreturnargument.html</anchorfile>
            <anchor>QGenericReturnArgument</anchor>
            <arglist>(const char *name, void *data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaObject</name>
        <filename>qmetaobject.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>className</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>className</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>superClass</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>superClass</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>methodOffset</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>methodOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>enumeratorOffset</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>enumeratorOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyOffset</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>propertyOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>classInfoOffset</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>classInfoOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>constructorCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>constructorCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>methodCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>methodCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>enumeratorCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>enumeratorCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>propertyCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>classInfoCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>classInfoCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfConstructor</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfConstructor</anchor>
            <arglist>(const char *constructor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfMethod</anchor>
            <arglist>(const char *method) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfSignal</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfSignal</anchor>
            <arglist>(const char *signal) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfSlot</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfSlot</anchor>
            <arglist>(const char *slot) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfEnumerator</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfEnumerator</anchor>
            <arglist>(const char *name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfProperty</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfProperty</anchor>
            <arglist>(const char *name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfClassInfo</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfClassInfo</anchor>
            <arglist>(const char *name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod</type>
            <name>constructor</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>constructor</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod</type>
            <name>method</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>method</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaEnum</type>
            <name>enumerator</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>enumerator</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaProperty</type>
            <name>property</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>property</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaClassInfo</type>
            <name>classInfo</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>classInfo</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaProperty</type>
            <name>userProperty</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>userProperty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>checkConnectArgs</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>checkConnectArgs</anchor>
            <arglist>(const char *signal, const char *method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>checkConnectArgs</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>checkConnectArgs-2</anchor>
            <arglist>(const QMetaMethod &amp;signal, const QMetaMethod &amp;method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>normalizedSignature</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>normalizedSignature</anchor>
            <arglist>(const char *method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>normalizedType</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>normalizedType</anchor>
            <arglist>(const char *type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>connectSlotsByName</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>connectSlotsByName</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod</anchor>
            <arglist>(QObject *obj, const char *member, Qt::ConnectionType type, QGenericReturnArgument ret, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-2</anchor>
            <arglist>(QObject *obj, const char *member, QGenericReturnArgument ret, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-3</anchor>
            <arglist>(QObject *obj, const char *member, Qt::ConnectionType type, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-4</anchor>
            <arglist>(QObject *obj, const char *member, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>newInstance</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>newInstance</anchor>
            <arglist>(QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const</arglist>
        </member>
        <class>QMetaObject::Connection</class>
    </compound>
    <compound kind="class">
        <name>QMetaObject::Connection</name>
        <filename>qmetaobject-connection.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Connection</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>dtor.Connection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Connection</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>Connection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Connection</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>Connection-3</anchor>
            <arglist>(const Connection &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Connection &amp;</type>
            <name>operator=</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const Connection &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator bool</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Connection</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>Connection-4</anchor>
            <arglist>(Connection &amp;&amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Connection &amp;</type>
            <name>operator=</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(Connection &amp;&amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPointer</name>
        <filename>qpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>QPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>QPointer-2</anchor>
            <arglist>(T *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>dtor.QPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(T *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator T *</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-T--2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSharedMemory</name>
        <filename>qsharedmemory.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>AccessMode</name>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWrite">
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SharedMemoryError</name>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionDenied">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidSize">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeyError">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlreadyExists">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotFound">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockError">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfResources">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedMemory</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>QSharedMemory-2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedMemory</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>QSharedMemory</anchor>
            <arglist>(const QString &amp;key, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSharedMemory</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>dtor.QSharedMemory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKey</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>setKey</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeKey</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>setNativeKey</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeKey</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>nativeKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(int size, AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>attach</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>attach</anchor>
            <arglist>(AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAttached</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>isAttached</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>detach</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>detach</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>data</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>constData</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>data</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>lock</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unlock</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SharedMemoryError</type>
            <name>error</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSignalMapper</name>
        <filename>qsignalmapper.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalMapper</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>QSignalMapper</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSignalMapper</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>dtor.QSignalMapper</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>setMapping</anchor>
            <arglist>(QObject *sender, int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>setMapping-2</anchor>
            <arglist>(QObject *sender, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>setMapping-3</anchor>
            <arglist>(QObject *sender, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>setMapping-4</anchor>
            <arglist>(QObject *sender, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMappings</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>removeMappings</anchor>
            <arglist>(QObject *sender)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>mapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapping</anchor>
            <arglist>(int id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>mapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapping-2</anchor>
            <arglist>(const QString &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>mapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapping-3</anchor>
            <arglist>(QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>mapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapping-4</anchor>
            <arglist>(QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mapped</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapped</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mapped</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapped-2</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mapped</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapped-3</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mapped</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapped-4</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>map</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>map-2</anchor>
            <arglist>(QObject *sender)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSocketNotifier</name>
        <filename>qsocketnotifier.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Read">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Write">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Exception">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSocketNotifier</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>QSocketNotifier</anchor>
            <arglist>(qintptr socket, Type type, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSocketNotifier</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>dtor.QSocketNotifier</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>socket</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>socket</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(int socket)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemSemaphore</name>
        <filename>qsystemsemaphore.html</filename>
        <member kind="enum">
            <name>AccessMode</name>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Open">
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Create">
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SystemSemaphoreError</name>
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionDenied">
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeyError">
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlreadyExists">
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotFound">
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfResources">
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemSemaphore</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>QSystemSemaphore</anchor>
            <arglist>(const QString &amp;key, int initialValue, AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSystemSemaphore</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>dtor.QSystemSemaphore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKey</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>setKey</anchor>
            <arglist>(const QString &amp;key, int initialValue, AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acquire</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>acquire</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>release</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SystemSemaphoreError</type>
            <name>error</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimer</name>
        <filename>qtimer.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>interval</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>remainingTime</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>remainingTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TimerType">
            <name>timerType</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimer</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>QTimer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTimer</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>dtor.QTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timerId</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterval</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>interval</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>remainingTime</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>remainingTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimerType</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist>(Qt::TimerType atype)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerType</type>
            <name>timerType</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSingleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist>(bool singleShot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSingleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot</anchor>
            <arglist>(int msec, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-2</anchor>
            <arglist>(int msec, Qt::TimerType timerType, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-3</anchor>
            <arglist>(int msec, const QObject *receiver, PointerToMemberFunction method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-4</anchor>
            <arglist>(int msec, Qt::TimerType timerType, const QObject *receiver, PointerToMemberFunction method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-5</anchor>
            <arglist>(int msec, Functor functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-6</anchor>
            <arglist>(int msec, Qt::TimerType timerType, Functor functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-7</anchor>
            <arglist>(int msec, const QObject *context, Functor functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-8</anchor>
            <arglist>(int msec, Qt::TimerType timerType, const QObject *context, Functor functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>start-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeout</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timeout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTranslator</name>
        <filename>qtranslator.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTranslator</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>QTranslator</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTranslator</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>dtor.QTranslator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>translate</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const char *context, const char *sourceText, const char *disambiguation, int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isEmpty</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;filename, const QString &amp;directory, const QString &amp;search_delimiters, const QString &amp;suffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(const QLocale &amp;locale, const QString &amp;filename, const QString &amp;prefix, const QString &amp;directory, const QString &amp;suffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>load-3</anchor>
            <arglist>(const uchar *data, int len, const QString &amp;directory)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVariant</name>
        <filename>qvariant.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bool">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UInt">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LongLong">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ULongLong">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Char">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Map">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="List">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="String">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StringList">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ByteArray">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BitArray">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Date">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Time">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DateTime">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Url">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Locale">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rect">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RectF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Size">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Line">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Point">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PointF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RegExp">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RegularExpression">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hash">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EasingCurve">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uuid">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ModelIndex">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PersistentModelIndex">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastCoreType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Font">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pixmap">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Brush">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Palette">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Polygon">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Region">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bitmap">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cursor">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeySequence">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pen">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextLength">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextFormat">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Matrix">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Transform">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Matrix4x4">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vector2D">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vector3D">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vector4D">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Quaternion">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PolygonF">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Icon">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastGuiType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizePolicy">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>dtor.QVariant</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-2</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-3</anchor>
            <arglist>(int typeId, const void *copy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-5</anchor>
            <arglist>(const QVariant &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-6</anchor>
            <arglist>(QDataStream &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-7</anchor>
            <arglist>(int val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-8</anchor>
            <arglist>(uint val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-9</anchor>
            <arglist>(qlonglong val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-10</anchor>
            <arglist>(qulonglong val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-11</anchor>
            <arglist>(bool val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-12</anchor>
            <arglist>(double val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-13</anchor>
            <arglist>(float val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-14</anchor>
            <arglist>(const char *val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-15</anchor>
            <arglist>(const QByteArray &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-16</anchor>
            <arglist>(const QBitArray &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-17</anchor>
            <arglist>(const QString &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-18</anchor>
            <arglist>(QLatin1String val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-19</anchor>
            <arglist>(const QStringList &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-20</anchor>
            <arglist>(QChar c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-21</anchor>
            <arglist>(const QDate &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-22</anchor>
            <arglist>(const QTime &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-23</anchor>
            <arglist>(const QDateTime &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-24</anchor>
            <arglist>(const QList&lt;QVariant&gt; &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-25</anchor>
            <arglist>(const QMap&lt;QString, QVariant&gt; &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-26</anchor>
            <arglist>(const QHash&lt;QString, QVariant&gt; &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-27</anchor>
            <arglist>(const QSize &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-28</anchor>
            <arglist>(const QSizeF &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-29</anchor>
            <arglist>(const QPoint &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-30</anchor>
            <arglist>(const QPointF &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-31</anchor>
            <arglist>(const QLine &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-32</anchor>
            <arglist>(const QLineF &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-33</anchor>
            <arglist>(const QRect &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-34</anchor>
            <arglist>(const QRectF &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-35</anchor>
            <arglist>(const QLocale &amp;l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-36</anchor>
            <arglist>(const QRegExp &amp;regExp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-37</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-38</anchor>
            <arglist>(const QUrl &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-39</anchor>
            <arglist>(const QEasingCurve &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-40</anchor>
            <arglist>(const QUuid &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-41</anchor>
            <arglist>(const QModelIndex &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-42</anchor>
            <arglist>(const QPersistentModelIndex &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-43</anchor>
            <arglist>(const QJsonValue &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-44</anchor>
            <arglist>(const QJsonObject &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-45</anchor>
            <arglist>(const QJsonArray &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-46</anchor>
            <arglist>(const QJsonDocument &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant &amp;</type>
            <name>operator=</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-47</anchor>
            <arglist>(QVariant &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant &amp;</type>
            <name>operator=</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QVariant &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QVariant &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>userType</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>userType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>typeName</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>typeName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canConvert</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>canConvert</anchor>
            <arglist>(int targetTypeId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>convert</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>convert</anchor>
            <arglist>(int targetTypeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toBool</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toBool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>toReal</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toReal</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toByteArray</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toByteArray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>toBitArray</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toBitArray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>toStringList</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toStringList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toChar</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toChar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>toDate</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toDate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>toTime</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toDateTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVariant&gt;</type>
            <name>toList</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QVariant&gt;</type>
            <name>toMap</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toMap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;QString, QVariant&gt;</type>
            <name>toHash</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toHash</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>toRect</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>toSize</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>toSizeF</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toSizeF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>toLine</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>toLineF</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toLineF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>toRectF</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toRectF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>toLocale</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toLocale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegExp</type>
            <name>toRegExp</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toRegExp</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>toRegularExpression</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toRegularExpression</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>toUrl</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>toEasingCurve</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toEasingCurve</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid</type>
            <name>toUuid</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toUuid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>toModelIndex</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toModelIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPersistentModelIndex</type>
            <name>toPersistentModelIndex</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toPersistentModelIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>toJsonValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toJsonValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>toJsonObject</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toJsonObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>toJsonArray</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toJsonArray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonDocument</type>
            <name>toJsonDocument</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toJsonDocument</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const char *</type>
            <name>typeToName</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>typeToName</anchor>
            <arglist>(int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Type</type>
            <name>nameToType</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>nameToType</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>fromValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>fromValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canConvert</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>canConvert-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QVariant &amp;v) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QVariant &amp;v) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QVariant &amp;v) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QVariant &amp;v) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QVariant &amp;v) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QVariant &amp;v) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSequentialIterable</name>
        <filename>qsequentialiterable.html</filename>
        <class>QSequentialIterable::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>at</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canReverseIterate</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>canReverseIterate</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSequentialIterable::const_iterator</name>
        <filename>qsequentialiterable-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~const_iterator</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>dtor.const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVariant</type>
            <name>operator*</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qsequentialiterable-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAssociativeIterable</name>
        <filename>qassociativeiterable.html</filename>
        <class>QAssociativeIterable::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>find</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QVariant &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QVariant &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAssociativeIterable::const_iterator</name>
        <filename>qassociativeiterable-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~const_iterator</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>dtor.const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVariant</type>
            <name>key</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVariant</type>
            <name>value</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVariant</type>
            <name>operator*</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qassociativeiterable-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWinEventNotifier</name>
        <filename>qwineventnotifier.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWinEventNotifier</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>QWinEventNotifier</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWinEventNotifier</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>QWinEventNotifier-2</anchor>
            <arglist>(HANDLE hEvent, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWinEventNotifier</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>dtor.QWinEventNotifier</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHandle</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>setHandle</anchor>
            <arglist>(HANDLE hEvent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>HANDLE</type>
            <name>handle</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(HANDLE hEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMimeDatabase</name>
        <filename>qmimedatabase.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMimeDatabase</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>QMimeDatabase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMimeDatabase</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>dtor.QMimeDatabase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForName</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForName</anchor>
            <arglist>(const QString &amp;nameOrAlias) const</arglist>
        </member>
        <member kind="enum">
            <name>MatchMode</name>
            <anchor>MatchMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchDefault">
            <anchor>MatchMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchExtension">
            <anchor>MatchMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchContent">
            <anchor>MatchMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForFile</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForFile-2</anchor>
            <arglist>(const QString &amp;fileName, MatchMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForFile</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForFile</anchor>
            <arglist>(const QFileInfo &amp;fileInfo, MatchMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QMimeType&gt;</type>
            <name>mimeTypesForFileName</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypesForFileName</anchor>
            <arglist>(const QString &amp;fileName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForData</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForData</anchor>
            <arglist>(const QByteArray &amp;data) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForData</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForData-2</anchor>
            <arglist>(QIODevice *device) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForUrl</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForUrl</anchor>
            <arglist>(const QUrl &amp;url) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForFileNameAndData</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForFileNameAndData</anchor>
            <arglist>(const QString &amp;fileName, QIODevice *device) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForFileNameAndData</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForFileNameAndData-2</anchor>
            <arglist>(const QString &amp;fileName, const QByteArray &amp;data) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>suffixForFileName</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>suffixForFileName</anchor>
            <arglist>(const QString &amp;fileName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QMimeType&gt;</type>
            <name>allMimeTypes</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>allMimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMimeType</name>
        <filename>qmimetype.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMimeType</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>QMimeType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMimeType</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>QMimeType-2</anchor>
            <arglist>(const QMimeType &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType &amp;</type>
            <name>operator=</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QMimeType &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType &amp;</type>
            <name>operator=</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QMimeType &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMimeType &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMimeType</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>dtor.QMimeType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMimeType &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMimeType &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDefault</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>isDefault</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>comment</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>comment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>genericIconName</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>genericIconName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>iconName</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>iconName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>globPatterns</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>globPatterns</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>parentMimeTypes</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>parentMimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allAncestors</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>allAncestors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>aliases</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>aliases</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>suffixes</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>suffixes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>preferredSuffix</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>preferredSuffix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inherits</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>inherits</anchor>
            <arglist>(const QString &amp;mimeTypeName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filterString</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>filterString</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLibrary</name>
        <filename>qlibrary.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>fileName</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="LoadHints">
            <name>loadHints</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LoadHint</name>
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResolveAllSymbolsHint">
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExportExternalSymbolsHint">
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LoadArchiveMemberHint">
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreventUnloadHint">
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeepBindHint">
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QLibrary::LoadHint">
            <name>LoadHints</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>QLibrary</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>QLibrary-2</anchor>
            <arglist>(const QString &amp;fileName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>QLibrary-3</anchor>
            <arglist>(const QString &amp;fileName, int verNum, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>QLibrary-4</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;version, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>dtor.QLibrary</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFunctionPointer</type>
            <name>resolve</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>resolve</anchor>
            <arglist>(const char *symbol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFunctionPointer</type>
            <name>resolve</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>resolve-2</anchor>
            <arglist>(const QString &amp;fileName, const char *symbol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFunctionPointer</type>
            <name>resolve</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>resolve-3</anchor>
            <arglist>(const QString &amp;fileName, int verNum, const char *symbol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFunctionPointer</type>
            <name>resolve</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>resolve-4</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;version, const char *symbol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>load</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unload</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>unload</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoaded</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>isLoaded</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>isLibrary</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileNameAndVersion</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>setFileNameAndVersion</anchor>
            <arglist>(const QString &amp;fileName, int versionNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileNameAndVersion</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>setFileNameAndVersion-2</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoadHints</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist>(LoadHints hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LoadHints</type>
            <name>loadHints</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStaticPlugin</name>
        <filename>qstaticplugin.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>instance</name>
            <anchorfile>qstaticplugin.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>rawMetaData</name>
            <anchorfile>qstaticplugin.html</anchorfile>
            <anchor>rawMetaData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>metaData</name>
            <anchorfile>qstaticplugin.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPluginLoader</name>
        <filename>qpluginloader.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>fileName</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QLibrary::LoadHints">
            <name>loadHints</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPluginLoader</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>QPluginLoader</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPluginLoader</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>QPluginLoader-2</anchor>
            <arglist>(const QString &amp;fileName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPluginLoader</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>dtor.QPluginLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>instance</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>metaData</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QObjectList</type>
            <name>staticInstances</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>staticInstances</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector&lt;QStaticPlugin&gt;</type>
            <name>staticPlugins</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>staticPlugins</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>load</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unload</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>unload</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoaded</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>isLoaded</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoadHints</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist>(QLibrary::LoadHints loadHints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLibrary::LoadHints</type>
            <name>loadHints</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUuid</name>
        <filename>quuid.html</filename>
        <member kind="enum">
            <name>Variant</name>
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VarUnknown">
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NCS">
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DCE">
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Microsoft">
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reserved">
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Version</name>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerUnknown">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Time">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmbeddedPOSIX">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Md5">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Name">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Random">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha1">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid-2</anchor>
            <arglist>(uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid-3</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid-5</anchor>
            <arglist>(const QByteArray &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toByteArray</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toByteArray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toRfc4122</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toRfc4122</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>fromRfc4122</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>fromRfc4122</anchor>
            <arglist>(const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QUuid &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QUuid &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QUuid &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QUuid &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid-6</anchor>
            <arglist>(const GUID &amp;guid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid &amp;</type>
            <name>operator=</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const GUID &amp;guid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator GUID</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-GUID</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const GUID &amp;guid) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const GUID &amp;guid) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuid</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV3</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV3</anchor>
            <arglist>(const QUuid &amp;ns, const QByteArray &amp;baseData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV5</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV5</anchor>
            <arglist>(const QUuid &amp;ns, const QByteArray &amp;baseData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV3</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV3-2</anchor>
            <arglist>(const QUuid &amp;ns, const QString &amp;baseData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV5</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV5-2</anchor>
            <arglist>(const QUuid &amp;ns, const QString &amp;baseData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Variant</type>
            <name>variant</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>variant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Version</type>
            <name>version</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractState</name>
        <filename>qabstractstate.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractState</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>dtor.QAbstractState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QState *</type>
            <name>parentState</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>parentState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStateMachine *</type>
            <name>machine</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>machine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>active</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exited</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>exited</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeChanged</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>(bool active)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractState</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>QAbstractState</anchor>
            <arglist>(QState *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>onEntry</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>onEntry</anchor>
            <arglist>(QEvent *event) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>onExit</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>onExit</anchor>
            <arglist>(QEvent *event) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstractstate.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractTransition</name>
        <filename>qabstracttransition.html</filename>
        <base>QObject</base>
        <member kind="property" type="QState *">
            <name>sourceState</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>sourceState-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QAbstractState *">
            <name>targetState</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>targetState-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QList&lt;QAbstractState *&gt;">
            <name>targetStates</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>targetStates-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="TransitionType">
            <name>transitionType</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>transitionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TransitionType</name>
            <anchor>TransitionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExternalTransition">
            <anchor>TransitionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InternalTransition">
            <anchor>TransitionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTransition</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>QAbstractTransition</anchor>
            <arglist>(QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractTransition</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>dtor.QAbstractTransition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QState *</type>
            <name>sourceState</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>sourceState-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractState *</type>
            <name>targetState</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>targetState-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetState</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>targetState-prop</anchor>
            <arglist>(QAbstractState *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractState *&gt;</type>
            <name>targetStates</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>targetStates-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetStates</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>targetStates-prop</anchor>
            <arglist>(const QList&lt;QAbstractState *&gt; &amp;targets)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TransitionType</type>
            <name>transitionType</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>transitionType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransitionType</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>transitionType-prop</anchor>
            <arglist>(TransitionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStateMachine *</type>
            <name>machine</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>machine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnimation</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>addAnimation</anchor>
            <arglist>(QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnimation</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>removeAnimation</anchor>
            <arglist>(QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractAnimation *&gt;</type>
            <name>animations</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>animations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggered</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>triggered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetStateChanged</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>targetState-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetStatesChanged</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>targetStates-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>eventTest</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>eventTest</anchor>
            <arglist>(QEvent *event) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>onTransition</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>onTransition</anchor>
            <arglist>(QEvent *event) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstracttransition.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEventTransition</name>
        <filename>qeventtransition.html</filename>
        <base>QAbstractTransition</base>
        <member kind="property" type="QObject *">
            <name>eventSource</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEvent::Type">
            <name>eventType</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>eventType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventTransition</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>QEventTransition</anchor>
            <arglist>(QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventTransition</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>QEventTransition-2</anchor>
            <arglist>(QObject *object, QEvent::Type type, QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEventTransition</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>dtor.QEventTransition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>eventSource</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventSource</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>eventType</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>eventType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventType</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>eventType-prop</anchor>
            <arglist>(QEvent::Type type)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventTest</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>eventTest</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onTransition</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>onTransition</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qeventtransition.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFinalState</name>
        <filename>qfinalstate.html</filename>
        <base>QAbstractState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFinalState</name>
            <anchorfile>qfinalstate.html</anchorfile>
            <anchor>QFinalState</anchor>
            <arglist>(QState *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFinalState</name>
            <anchorfile>qfinalstate.html</anchorfile>
            <anchor>dtor.QFinalState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onEntry</name>
            <anchorfile>qfinalstate.html</anchorfile>
            <anchor>onEntry</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onExit</name>
            <anchorfile>qfinalstate.html</anchorfile>
            <anchor>onExit</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qfinalstate.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHistoryState</name>
        <filename>qhistorystate.html</filename>
        <base>QAbstractState</base>
        <member kind="property" type="QAbstractState *">
            <name>defaultState</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>defaultState-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="HistoryType">
            <name>historyType</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>historyType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>HistoryType</name>
            <anchor>HistoryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShallowHistory">
            <anchor>HistoryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeepHistory">
            <anchor>HistoryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHistoryState</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>QHistoryState</anchor>
            <arglist>(QState *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHistoryState</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>QHistoryState-2</anchor>
            <arglist>(HistoryType type, QState *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHistoryState</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>dtor.QHistoryState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractState *</type>
            <name>defaultState</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>defaultState-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultState</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>defaultState-prop</anchor>
            <arglist>(QAbstractState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>HistoryType</type>
            <name>historyType</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>historyType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHistoryType</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>historyType-prop</anchor>
            <arglist>(HistoryType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>defaultStateChanged</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>defaultState-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>historyTypeChanged</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>historyType-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onEntry</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>onEntry</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onExit</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>onExit</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qhistorystate.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSignalTransition</name>
        <filename>qsignaltransition.html</filename>
        <base>QAbstractTransition</base>
        <member kind="property" type="QObject *">
            <name>senderObject</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>senderObject-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>signal</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>signal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalTransition</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>QSignalTransition</anchor>
            <arglist>(QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalTransition</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>QSignalTransition-2</anchor>
            <arglist>(const QObject *sender, const char *signal, QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSignalTransition</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>dtor.QSignalTransition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>senderObject</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>senderObject-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSenderObject</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>senderObject-prop</anchor>
            <arglist>(const QObject *sender)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>signal</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>signal-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSignal</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>signal-prop</anchor>
            <arglist>(const QByteArray &amp;signal)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventTest</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>eventTest</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onTransition</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>onTransition</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>senderObjectChanged</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>senderObject-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>signalChanged</name>
            <anchorfile>qsignaltransition.html</anchorfile>
            <anchor>signal-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QState</name>
        <filename>qstate.html</filename>
        <base>QAbstractState</base>
        <member kind="property" type="QAbstractState *">
            <name>initialState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>initialState-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QAbstractState *">
            <name>errorState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>errorState-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ChildMode">
            <name>childMode</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>childMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ChildMode</name>
            <anchor>ChildMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExclusiveStates">
            <anchor>ChildMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParallelStates">
            <anchor>ChildMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RestorePolicy</name>
            <anchor>RestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontRestoreProperties">
            <anchor>RestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RestoreProperties">
            <anchor>RestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>QState</anchor>
            <arglist>(QState *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>QState-2</anchor>
            <arglist>(ChildMode childMode, QState *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>dtor.QState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractState *</type>
            <name>errorState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>errorState-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>errorState-prop</anchor>
            <arglist>(QAbstractState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTransition</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>addTransition</anchor>
            <arglist>(QAbstractTransition *transition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSignalTransition *</type>
            <name>addTransition</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>addTransition-2</anchor>
            <arglist>(const QObject *sender, const char *signal, QAbstractState *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSignalTransition *</type>
            <name>addTransition</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>addTransition-4</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, QAbstractState *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTransition *</type>
            <name>addTransition</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>addTransition-3</anchor>
            <arglist>(QAbstractState *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTransition</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>removeTransition</anchor>
            <arglist>(QAbstractTransition *transition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractTransition *&gt;</type>
            <name>transitions</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>transitions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractState *</type>
            <name>initialState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>initialState-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInitialState</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>initialState-prop</anchor>
            <arglist>(QAbstractState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ChildMode</type>
            <name>childMode</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>childMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChildMode</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>childMode-prop</anchor>
            <arglist>(ChildMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>assignProperty</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>assignProperty</anchor>
            <arglist>(QObject *object, const char *name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>propertiesAssigned</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>propertiesAssigned</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>childModeChanged</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>childMode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialStateChanged</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>initialState-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorStateChanged</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>errorState-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onEntry</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>onEntry</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onExit</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>onExit</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qstate.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStateMachine</name>
        <filename>qstatemachine.html</filename>
        <base>QState</base>
        <member kind="property" type="QString">
            <name>errorString</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>errorString-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QState::RestorePolicy">
            <name>globalRestorePolicy</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>globalRestorePolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>running</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>animated</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist></arglist>
        </member>
        <class>QStateMachine::SignalEvent</class>
        <class>QStateMachine::WrappedEvent</class>
        <member kind="enum">
            <name>EventPriority</name>
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalPriority">
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighPriority">
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoInitialStateError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDefaultStateInHistoryStateError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoCommonAncestorForTransitionError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStateMachine</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>QStateMachine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStateMachine</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>QStateMachine-2</anchor>
            <arglist>(QState::ChildMode childMode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStateMachine</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>dtor.QStateMachine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addState</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>addState</anchor>
            <arglist>(QAbstractState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeState</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>removeState</anchor>
            <arglist>(QAbstractState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>errorString-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearError</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>clearError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnimated</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimated</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDefaultAnimation</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>addDefaultAnimation</anchor>
            <arglist>(QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractAnimation *&gt;</type>
            <name>defaultAnimations</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>defaultAnimations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeDefaultAnimation</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>removeDefaultAnimation</anchor>
            <arglist>(QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QState::RestorePolicy</type>
            <name>globalRestorePolicy</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>globalRestorePolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGlobalRestorePolicy</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>globalRestorePolicy-prop</anchor>
            <arglist>(QState::RestorePolicy restorePolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>postEvent</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>postEvent</anchor>
            <arglist>(QEvent *event, EventPriority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>postDelayedEvent</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>postDelayedEvent</anchor>
            <arglist>(QEvent *event, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cancelDelayedEvent</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>cancelDelayedEvent</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QAbstractState *&gt;</type>
            <name>configuration</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>configuration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *watched, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRunning</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stopped</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>stopped</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>runningChanged</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onEntry</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>onEntry</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onExit</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>onExit</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qstatemachine.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStateMachine::SignalEvent</name>
        <filename>qstatemachine-signalevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~SignalEvent</name>
            <anchorfile>qstatemachine-signalevent.html</anchorfile>
            <anchor>dtor.SignalEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>sender</name>
            <anchorfile>qstatemachine-signalevent.html</anchorfile>
            <anchor>sender</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>signalIndex</name>
            <anchorfile>qstatemachine-signalevent.html</anchorfile>
            <anchor>signalIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVariant&gt;</type>
            <name>arguments</name>
            <anchorfile>qstatemachine-signalevent.html</anchorfile>
            <anchor>arguments</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStateMachine::WrappedEvent</name>
        <filename>qstatemachine-wrappedevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~WrappedEvent</name>
            <anchorfile>qstatemachine-wrappedevent.html</anchorfile>
            <anchor>dtor.WrappedEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>object</name>
            <anchorfile>qstatemachine-wrappedevent.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent *</type>
            <name>event</name>
            <anchorfile>qstatemachine-wrappedevent.html</anchorfile>
            <anchor>event</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAtomicInteger</name>
        <filename>qatomicinteger.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicInteger</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>QAtomicInteger</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicInteger</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>QAtomicInteger-2</anchor>
            <arglist>(const QAtomicInteger &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAtomicInteger &amp;</type>
            <name>operator=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QAtomicInteger &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>load</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>load</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>loadAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>loadAcquire</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>store</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>store</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>storeRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>storeRelease</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator T</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-T</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAtomicInteger &amp;</type>
            <name>operator=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isReferenceCountingNative</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isReferenceCountingNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isReferenceCountingWaitFree</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isReferenceCountingWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ref</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>ref</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>deref</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>deref</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTestAndSetNative</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isTestAndSetNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTestAndSetWaitFree</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isTestAndSetWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetRelaxed</anchor>
            <arglist>(T expectedValue, T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetAcquire</anchor>
            <arglist>(T expectedValue, T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetRelease</anchor>
            <arglist>(T expectedValue, T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetOrdered</anchor>
            <arglist>(T expectedValue, T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndStoreNative</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isFetchAndStoreNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndStoreWaitFree</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isFetchAndStoreWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndStoreRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndStoreRelaxed</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndStoreAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndStoreAcquire</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndStoreRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndStoreRelease</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndStoreOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndStoreOrdered</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndAddNative</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isFetchAndAddNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndAddWaitFree</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isFetchAndAddWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAddRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAddRelaxed</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAddAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAddAcquire</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAddRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAddRelease</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAddOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAddOrdered</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndSubRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndSubRelaxed</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndSubAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndSubAcquire</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndSubRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndSubRelease</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndSubOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndSubOrdered</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndOrRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndOrRelaxed</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndOrAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndOrAcquire</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndOrRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndOrRelease</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndOrOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndOrOrdered</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAndRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAndRelaxed</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAndAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAndAcquire</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAndRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAndRelease</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAndOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAndOrdered</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndXorRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndXorRelaxed</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndXorAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndXorAcquire</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndXorRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndXorRelease</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndXorOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndXorOrdered</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator++</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator++</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator--</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator--</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator+=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator-=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator|=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator&amp;=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator^=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAtomicInt</name>
        <filename>qatomicint.html</filename>
        <base>QAtomicInteger</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicInt</name>
            <anchorfile>qatomicint.html</anchorfile>
            <anchor>QAtomicInt</anchor>
            <arglist>(int value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAtomicPointer</name>
        <filename>qatomicpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicPointer</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>QAtomicPointer</anchor>
            <arglist>(T *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicPointer</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>QAtomicPointer-2</anchor>
            <arglist>(const QAtomicPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAtomicPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QAtomicPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>load</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>load</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>loadAcquire</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>loadAcquire</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>store</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>store</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>storeRelease</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>storeRelease</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTestAndSetNative</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isTestAndSetNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTestAndSetWaitFree</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isTestAndSetWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelaxed</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>testAndSetRelaxed</anchor>
            <arglist>(T *expectedValue, T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetAcquire</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>testAndSetAcquire</anchor>
            <arglist>(T *expectedValue, T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelease</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>testAndSetRelease</anchor>
            <arglist>(T *expectedValue, T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetOrdered</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>testAndSetOrdered</anchor>
            <arglist>(T *expectedValue, T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndStoreNative</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isFetchAndStoreNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndStoreWaitFree</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isFetchAndStoreWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndStoreRelaxed</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndStoreRelaxed</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndStoreAcquire</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndStoreAcquire</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndStoreRelease</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndStoreRelease</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndStoreOrdered</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndStoreOrdered</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndAddNative</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isFetchAndAddNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndAddWaitFree</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isFetchAndAddWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndAddRelaxed</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndAddRelaxed</anchor>
            <arglist>(qptrdiff valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndAddAcquire</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndAddAcquire</anchor>
            <arglist>(qptrdiff valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndAddRelease</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndAddRelease</anchor>
            <arglist>(qptrdiff valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndAddOrdered</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndAddOrdered</anchor>
            <arglist>(qptrdiff valueToAdd)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QException</name>
        <filename>qexception.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>raise</name>
            <anchorfile>qexception.html</anchorfile>
            <anchor>raise</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QException *</type>
            <name>clone</name>
            <anchorfile>qexception.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUnhandledException</name>
        <filename>qunhandledexception.html</filename>
        <base>QException</base>
    </compound>
    <compound kind="class">
        <name>QFuture</name>
        <filename>qfuture.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFuture</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>QFuture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFuture</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>QFuture-3</anchor>
            <arglist>(const QFuture &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFuture</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>dtor.QFuture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture &amp;</type>
            <name>operator=</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFuture &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QFuture &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QFuture &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCanceled</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isCanceled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPaused</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isPaused</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>togglePaused</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>togglePaused</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStarted</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isStarted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>resultCount</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>resultCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressValue</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>progressValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressMinimum</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>progressMinimum</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressMaximum</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>progressMaximum</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>progressText</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>progressText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForFinished</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>result</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>resultAt</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>resultAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResultReadyAt</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isResultReadyAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator T</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>operator-T</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>results</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>results</anchor>
            <arglist>() const</arglist>
        </member>
        <class>QFuture::const_iterator</class>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFuture::const_iterator</name>
        <filename>qfuture-const-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFutureSynchronizer</name>
        <filename>qfuturesynchronizer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFutureSynchronizer</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>QFutureSynchronizer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFutureSynchronizer</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>QFutureSynchronizer-2</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFutureSynchronizer</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>dtor.QFutureSynchronizer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFuture</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>setFuture</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFuture</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>addFuture</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForFinished</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearFutures</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>clearFutures</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QFuture&lt;T&gt; &gt;</type>
            <name>futures</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>futures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCancelOnWait</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>setCancelOnWait</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cancelOnWait</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>cancelOnWait</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFutureWatcher</name>
        <filename>qfuturewatcher.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFutureWatcher</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>QFutureWatcher</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFutureWatcher</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>dtor.QFutureWatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFuture</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>setFuture</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>future</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>future</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>result</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>resultAt</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resultAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressValue</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressMinimum</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressMinimum</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressMaximum</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressMaximum</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>progressText</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStarted</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isStarted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCanceled</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isCanceled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPaused</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isPaused</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForFinished</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPendingResultsLimit</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>setPendingResultsLimit</anchor>
            <arglist>(int limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>canceled</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>canceled</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paused</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>paused</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resumed</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resumed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultReadyAt</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resultReadyAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultsReadyAt</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resultsReadyAt</anchor>
            <arglist>(int beginIndex, int endIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressRangeChanged</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressRangeChanged</anchor>
            <arglist>(int minimum, int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressValueChanged</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressValueChanged</anchor>
            <arglist>(int progressValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressTextChanged</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressTextChanged</anchor>
            <arglist>(const QString &amp;progressText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>togglePaused</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>togglePaused</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutex</name>
        <filename>qmutex.html</filename>
        <member kind="enum">
            <name>RecursionMode</name>
            <anchor>RecursionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonRecursive">
            <anchor>RecursionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Recursive">
            <anchor>RecursionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutex</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>QMutex</anchor>
            <arglist>(RecursionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>tryLock</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRecursive</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>isRecursive</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutexLocker</name>
        <filename>qmutexlocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutexLocker</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>QMutexLocker</anchor>
            <arglist>(QMutex *mutex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMutexLocker</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>dtor.QMutexLocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relock</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>relock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutex *</type>
            <name>mutex</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>mutex</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QReadWriteLock</name>
        <filename>qreadwritelock.html</filename>
        <member kind="enum">
            <name>RecursionMode</name>
            <anchor>RecursionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonRecursive">
            <anchor>RecursionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Recursive">
            <anchor>RecursionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QReadWriteLock</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>QReadWriteLock</anchor>
            <arglist>(RecursionMode recursionMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QReadWriteLock</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>dtor.QReadWriteLock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lockForRead</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>lockForRead</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLockForRead</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>tryLockForRead</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLockForRead</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>tryLockForRead-2</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lockForWrite</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>lockForWrite</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLockForWrite</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>tryLockForWrite</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLockForWrite</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>tryLockForWrite-2</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QReadLocker</name>
        <filename>qreadlocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QReadLocker</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>QReadLocker</anchor>
            <arglist>(QReadWriteLock *lock)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QReadLocker</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>dtor.QReadLocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relock</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>relock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QReadWriteLock *</type>
            <name>readWriteLock</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>readWriteLock</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWriteLocker</name>
        <filename>qwritelocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWriteLocker</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>QWriteLocker</anchor>
            <arglist>(QReadWriteLock *lock)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWriteLocker</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>dtor.QWriteLocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relock</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>relock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QReadWriteLock *</type>
            <name>readWriteLock</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>readWriteLock</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRunnable</name>
        <filename>qrunnable.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>run</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRunnable</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>QRunnable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QRunnable</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>dtor.QRunnable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoDelete</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>autoDelete</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoDelete</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>setAutoDelete</anchor>
            <arglist>(bool autoDelete)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSemaphore</name>
        <filename>qsemaphore.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSemaphore</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>QSemaphore</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSemaphore</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>dtor.QSemaphore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>acquire</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryAcquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>tryAcquire</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryAcquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>tryAcquire-2</anchor>
            <arglist>(int n, int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>available</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>available</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QThread</name>
        <filename>qthread.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::HANDLE</type>
            <name>currentThreadId</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>currentThreadId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QThread *</type>
            <name>currentThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>currentThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>idealThreadCount</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>idealThreadCount</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>yieldCurrentThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>yieldCurrentThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>QThread</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>dtor.QThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Priority</name>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IdlePriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowestPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighestPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TimeCriticalPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InheritPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setPriority</anchor>
            <arglist>(Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Priority</type>
            <name>priority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestInterruption</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>requestInterruption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInterruptionRequested</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>isInterruptionRequested</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStackSize</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setStackSize</anchor>
            <arglist>(uint stackSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>stackSize</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>stackSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exit</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>exit</anchor>
            <arglist>(int returnCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractEventDispatcher *</type>
            <name>eventDispatcher</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>eventDispatcher</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventDispatcher</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setEventDispatcher</anchor>
            <arglist>(QAbstractEventDispatcher *eventDispatcher)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopLevel</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>loopLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>terminate</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>terminate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quit</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>quit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>wait</anchor>
            <arglist>(unsigned long time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>sleep</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>sleep</anchor>
            <arglist>(unsigned long secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>msleep</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>msleep</anchor>
            <arglist>(unsigned long msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>usleep</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>usleep</anchor>
            <arglist>(unsigned long usecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>run</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>setTerminationEnabled</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setTerminationEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QThreadPool</name>
        <filename>qthreadpool.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>expiryTimeout</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>expiryTimeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>maxThreadCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>activeThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>activeThreadCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QThreadPool</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>QThreadPool</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QThreadPool</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>dtor.QThreadPool</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QThreadPool *</type>
            <name>globalInstance</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>globalInstance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(QRunnable *runnable, int priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryStart</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>tryStart</anchor>
            <arglist>(QRunnable *runnable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>expiryTimeout</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>expiryTimeout-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpiryTimeout</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>expiryTimeout-prop</anchor>
            <arglist>(int expiryTimeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>maxThreadCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>maxThreadCount-prop</anchor>
            <arglist>(int maxThreadCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>activeThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>activeThreadCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserveThread</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>reserveThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseThread</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>releaseThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForDone</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>waitForDone</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>(QRunnable *runnable)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QThreadStorage</name>
        <filename>qthreadstorage.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QThreadStorage</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>QThreadStorage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QThreadStorage</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>dtor.QThreadStorage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasLocalData</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>hasLocalData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>localData</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>localData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>localData</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>localData-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalData</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>setLocalData</anchor>
            <arglist>(T data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWaitCondition</name>
        <filename>qwaitcondition.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWaitCondition</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>QWaitCondition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWaitCondition</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>dtor.QWaitCondition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wait</anchor>
            <arglist>(QMutex *lockedMutex, unsigned long time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wait-2</anchor>
            <arglist>(QReadWriteLock *lockedReadWriteLock, unsigned long time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wakeOne</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wakeOne</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wakeAll</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wakeAll</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBitArray</name>
        <filename>qbitarray.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitArray</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>QBitArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitArray</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>QBitArray-2</anchor>
            <arglist>(int size, bool value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitArray</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>QBitArray-3</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitArray</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>QBitArray-4</anchor>
            <arglist>(QBitArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QBitArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>(bool on) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>testBit</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>setBit</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>setBit-2</anchor>
            <arglist>(int i, bool value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>clearBit</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toggleBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>toggleBit</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>at</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitRef</type>
            <name>operator[]</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator[]</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitRef</type>
            <name>operator[]</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5b-5d-3</anchor>
            <arglist>(uint i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator[]</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5b-5d-4</anchor>
            <arglist>(uint i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator|=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator^=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator~</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7e</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QBitArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QBitArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fill</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(bool value, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>fill-2</anchor>
            <arglist>(bool value, int begin, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(int pos)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QByteArray</name>
        <filename>qbytearray.html</filename>
        <member kind="enum">
            <name>Base64Option</name>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Base64Encoding">
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Base64UrlEncoding">
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeepTrailingEquals">
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OmitTrailingEquals">
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QByteArray::Base64Option">
            <name>Base64Options</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-2</anchor>
            <arglist>(const char *data, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-3</anchor>
            <arglist>(int size, char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-5</anchor>
            <arglist>(const QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>dtor.QByteArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-6</anchor>
            <arglist>(QByteArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QByteArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>fill</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(char ch, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator const char *</name>
            <anchorfile>qbytearray-obsolete.html</anchorfile>
            <anchor>operator-const-char--2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator const void *</name>
            <anchorfile>qbytearray-obsolete.html</anchorfile>
            <anchor>operator-const-void--2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>data</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>data</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>constData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>at</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>operator[]</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>operator[]</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-5b-5d-4</anchor>
            <arglist>(uint i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteRef</type>
            <name>operator[]</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteRef</type>
            <name>operator[]</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-5b-5d-3</anchor>
            <arglist>(uint i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>indexOf-4</anchor>
            <arglist>(char ch, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>indexOf-3</anchor>
            <arglist>(const char *str, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const QByteArray &amp;ba, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>lastIndexOf-4</anchor>
            <arglist>(char ch, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>lastIndexOf-3</anchor>
            <arglist>(const char *str, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const QByteArray &amp;ba, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(char ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(const char *str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QByteArray &amp;ba) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>count-3</anchor>
            <arglist>(char ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>(const char *str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const QByteArray &amp;ba) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>left</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(int len) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>right</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(int len) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>mid</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(int pos, int len) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(const QByteArray &amp;ba) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>startsWith-3</anchor>
            <arglist>(char ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>startsWith-2</anchor>
            <arglist>(const char *str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(const QByteArray &amp;ba) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>endsWith-3</anchor>
            <arglist>(char ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>endsWith-2</anchor>
            <arglist>(const char *str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(int pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLower</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toLower</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toUpper</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toUpper</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>trimmed</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>trimmed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>simplified</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>simplified</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>leftJustified</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>leftJustified</anchor>
            <arglist>(int width, char fill, bool truncate) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rightJustified</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>rightJustified</anchor>
            <arglist>(int width, char fill, bool truncate) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend-4</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend-2</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend-3</anchor>
            <arglist>(const char *str, int len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-5</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-4</anchor>
            <arglist>(const char *str, int len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-5</anchor>
            <arglist>(int i, char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(int i, const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(int i, const char *str, int len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int i, const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>remove</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(int pos, int len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-2</anchor>
            <arglist>(int pos, int len, const char *after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-3</anchor>
            <arglist>(int pos, int len, const char *after, int alen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int pos, int len, const QByteArray &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-13</anchor>
            <arglist>(char before, const char *after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-11</anchor>
            <arglist>(char before, const QByteArray &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-10</anchor>
            <arglist>(const char *before, const char *after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-6</anchor>
            <arglist>(const char *before, int bsize, const char *after, int asize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-4</anchor>
            <arglist>(const QByteArray &amp;before, const QByteArray &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-7</anchor>
            <arglist>(const QByteArray &amp;before, const char *after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-5</anchor>
            <arglist>(const char *before, const QByteArray &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-14</anchor>
            <arglist>(char before, char after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-eq-4</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-eq-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>split</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>split</anchor>
            <arglist>(char sep) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>repeated</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>repeated</anchor>
            <arglist>(int times) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(int i, const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-9</anchor>
            <arglist>(const QString &amp;before, const char *after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-12</anchor>
            <arglist>(char before, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-8</anchor>
            <arglist>(const QString &amp;before, const QByteArray &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>indexOf-2</anchor>
            <arglist>(const QString &amp;str, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(const QString &amp;str, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toBase64</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toBase64-2</anchor>
            <arglist>(Base64Options options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toBase64</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toBase64</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toHex</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toHex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toPercentEncoding</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toPercentEncoding</anchor>
            <arglist>(const QByteArray &amp;exclude, const QByteArray &amp;include, char percent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-3</anchor>
            <arglist>(short n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-4</anchor>
            <arglist>(ushort n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum</anchor>
            <arglist>(int n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-2</anchor>
            <arglist>(uint n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-5</anchor>
            <arglist>(qlonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-6</anchor>
            <arglist>(qulonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-8</anchor>
            <arglist>(float n, char f, int prec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-7</anchor>
            <arglist>(double n, char f, int prec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setRawData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setRawData</anchor>
            <arglist>(const char *data, uint size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number</anchor>
            <arglist>(int n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-2</anchor>
            <arglist>(uint n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-3</anchor>
            <arglist>(qlonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-4</anchor>
            <arglist>(qulonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-5</anchor>
            <arglist>(double n, char f, int prec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromRawData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromRawData</anchor>
            <arglist>(const char *data, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromBase64</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromBase64-2</anchor>
            <arglist>(const QByteArray &amp;base64, Base64Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromBase64</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromBase64</anchor>
            <arglist>(const QByteArray &amp;base64)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromHex</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromHex</anchor>
            <arglist>(const QByteArray &amp;hexEncoded)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromPercentEncoding</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromPercentEncoding</anchor>
            <arglist>(const QByteArray &amp;input, char percent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromCFData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromCFData</anchor>
            <arglist>(CFDataRef data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromRawCFData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromRawCFData</anchor>
            <arglist>(CFDataRef data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFDataRef</type>
            <name>toCFData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toCFData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFDataRef</type>
            <name>toRawCFData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toRawCFData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromNSData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromNSData</anchor>
            <arglist>(const NSData *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromRawNSData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromRawNSData</anchor>
            <arglist>(const NSData *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSData *</type>
            <name>toNSData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toNSData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSData *</type>
            <name>toRawNSData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toRawNSData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_back-3</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_back-2</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_front-3</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_front-2</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromStdString</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromStdString</anchor>
            <arglist>(const std::string &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::string</type>
            <name>toStdString</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toStdString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>count-4</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QByteArrayList</name>
        <filename>qbytearraylist.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>join</name>
            <anchorfile>qbytearraylist.html</anchorfile>
            <anchor>join</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>join</name>
            <anchorfile>qbytearraylist.html</anchorfile>
            <anchor>join-2</anchor>
            <arglist>(const QByteArray &amp;separator) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>join</name>
            <anchorfile>qbytearraylist.html</anchorfile>
            <anchor>join-3</anchor>
            <arglist>(char separator) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QByteArrayMatcher</name>
        <filename>qbytearraymatcher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher-2</anchor>
            <arglist>(const QByteArray &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher-3</anchor>
            <arglist>(const char *pattern, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher-4</anchor>
            <arglist>(const QByteArrayMatcher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>dtor.QByteArrayMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayMatcher &amp;</type>
            <name>operator=</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QByteArrayMatcher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPattern</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>setPattern</anchor>
            <arglist>(const QByteArray &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexIn</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>indexIn</anchor>
            <arglist>(const QByteArray &amp;ba, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexIn</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>indexIn-2</anchor>
            <arglist>(const char *str, int len, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>pattern</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCache</name>
        <filename>qcache.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCache</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>QCache</anchor>
            <arglist>(int maxCost)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCache</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>dtor.QCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxCost</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>maxCost</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxCost</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>setMaxCost</anchor>
            <arglist>(int cost)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>totalCost</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>totalCost</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insert</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const Key &amp;key, T *object, int cost)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>object</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>object</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator[]</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>take</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLatin1Char</name>
        <filename>qlatin1char.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1Char</name>
            <anchorfile>qlatin1char.html</anchorfile>
            <anchor>QLatin1Char</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>toLatin1</name>
            <anchorfile>qlatin1char.html</anchorfile>
            <anchor>toLatin1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>unicode</name>
            <anchorfile>qlatin1char.html</anchorfile>
            <anchor>unicode</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QChar</name>
        <filename>qchar.html</filename>
        <member kind="enum">
            <name>SpecialCharacter</name>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tabulation">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineFeed">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CarriageReturn">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Space">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nbsp">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SoftHyphen">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReplacementCharacter">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ObjectReplacementCharacter">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ByteOrderMark">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ByteOrderSwapped">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParagraphSeparator">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineSeparator">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastValidCodePoint">
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-2</anchor>
            <arglist>(ushort code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-3</anchor>
            <arglist>(uchar cell, uchar row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-4</anchor>
            <arglist>(short code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-5</anchor>
            <arglist>(uint code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-6</anchor>
            <arglist>(int code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-7</anchor>
            <arglist>(SpecialCharacter ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-8</anchor>
            <arglist>(QLatin1Char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-9</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-10</anchor>
            <arglist>(uchar ch)</arglist>
        </member>
        <member kind="enum">
            <name>Category</name>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mark_NonSpacing">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mark_SpacingCombining">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mark_Enclosing">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Number_DecimalDigit">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Number_Letter">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Number_Other">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Separator_Space">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Separator_Line">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Separator_Paragraph">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other_Control">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other_Format">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other_Surrogate">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other_PrivateUse">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other_NotAssigned">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Letter_Uppercase">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Letter_Lowercase">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Letter_Titlecase">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Letter_Modifier">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Letter_Other">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Punctuation_Connector">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Punctuation_Dash">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Punctuation_Open">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Punctuation_Close">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Punctuation_InitialQuote">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Punctuation_FinalQuote">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Punctuation_Other">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Symbol_Math">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Symbol_Currency">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Symbol_Modifier">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Symbol_Other">
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Script</name>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Unknown">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Inherited">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Common">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Latin">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Greek">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Cyrillic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Armenian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Hebrew">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Arabic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Syriac">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Thaana">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Devanagari">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Bengali">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Gurmukhi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Gujarati">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Oriya">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Tamil">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Telugu">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Kannada">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Malayalam">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Sinhala">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Thai">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Lao">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Tibetan">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Myanmar">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Georgian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Hangul">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Ethiopic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Cherokee">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_CanadianAboriginal">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Ogham">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Runic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Khmer">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Mongolian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Hiragana">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Katakana">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Bopomofo">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Han">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Yi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_OldItalic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Gothic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Deseret">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Tagalog">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Hanunoo">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Buhid">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Tagbanwa">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Coptic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Limbu">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_TaiLe">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_LinearB">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Ugaritic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Shavian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Osmanya">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Cypriot">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Braille">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Buginese">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_NewTaiLue">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Glagolitic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Tifinagh">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_SylotiNagri">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_OldPersian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Kharoshthi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Balinese">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Cuneiform">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Phoenician">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_PhagsPa">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Nko">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Sundanese">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Lepcha">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_OlChiki">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Vai">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Saurashtra">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_KayahLi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Rejang">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Lycian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Carian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Lydian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Cham">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_TaiTham">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_TaiViet">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Avestan">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_EgyptianHieroglyphs">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Samaritan">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Lisu">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Bamum">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Javanese">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_MeeteiMayek">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_ImperialAramaic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_OldSouthArabian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_InscriptionalParthian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_InscriptionalPahlavi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_OldTurkic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Kaithi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Batak">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Brahmi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Mandaic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Chakma">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_MeroiticCursive">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_MeroiticHieroglyphs">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Miao">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Sharada">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_SoraSompeng">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Takri">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_CaucasianAlbanian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_BassaVah">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Duployan">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Elbasan">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Grantha">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_PahawhHmong">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Khojki">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_LinearA">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Mahajani">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Manichaean">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_MendeKikakui">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Modi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Mro">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_OldNorthArabian">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Nabataean">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Palmyrene">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_PauCinHau">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_OldPermic">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_PsalterPahlavi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Siddham">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Khudawadi">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_Tirhuta">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Script_WarangCiti">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScriptCount">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Direction</name>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirL">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirR">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirEN">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirES">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirET">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirAN">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirCS">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirB">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirS">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirWS">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirON">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirLRE">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirLRO">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirAL">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirRLE">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirRLO">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirPDF">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirNSM">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirBN">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirLRI">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirRLI">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirFSI">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirPDI">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Decomposition</name>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDecomposition">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Canonical">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Font">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoBreak">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Initial">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Medial">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Final">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Isolated">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Circle">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Super">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sub">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vertical">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Wide">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Narrow">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Small">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Square">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Compat">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fraction">
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>JoiningType</name>
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Joining_None">
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Joining_Causing">
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Joining_Dual">
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Joining_Right">
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Joining_Left">
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Joining_Transparent">
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Joining</name>
            <anchor>Joining-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OtherJoining">
            <anchor>Joining-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dual">
            <anchor>Joining-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Right">
            <anchor>Joining-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Center">
            <anchor>Joining-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>UnicodeVersion</name>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_Unassigned">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_1_1">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_2_0">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_2_1_2">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_3_0">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_3_1">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_3_2">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_4_0">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_4_1">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_5_0">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_5_1">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_5_2">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_6_0">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_6_1">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_6_2">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_6_3">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unicode_7_0">
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Category</type>
            <name>category</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>category</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Direction</type>
            <name>direction</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>JoiningType</type>
            <name>joiningType</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>joiningType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Joining</type>
            <name>joining</name>
            <anchorfile>qchar-obsolete.html</anchorfile>
            <anchor>joining</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>unsigned char</type>
            <name>combiningClass</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>combiningClass</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>mirroredChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>mirroredChar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasMirrored</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>hasMirrored</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>decomposition</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>decomposition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Decomposition</type>
            <name>decompositionTag</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>decompositionTag</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>digitValue</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>digitValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toLower</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toLower</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toUpper</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toUpper</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toTitleCase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toTitleCase</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toCaseFolded</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toCaseFolded</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Script</type>
            <name>script</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>script</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>UnicodeVersion</type>
            <name>unicodeVersion</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>unicodeVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>toAscii</name>
            <anchorfile>qchar-obsolete.html</anchorfile>
            <anchor>toAscii</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>toLatin1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toLatin1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>unicode</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>unicode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort &amp;</type>
            <name>unicode</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>unicode-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>fromAscii</name>
            <anchorfile>qchar-obsolete.html</anchorfile>
            <anchor>fromAscii</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>fromLatin1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>fromLatin1</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPrint</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isPrint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSpace</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSpace</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMark</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isMark</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPunct</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isPunct</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSymbol</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSymbol</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLetter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLetter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNumber</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLetterOrNumber</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLetterOrNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDigit</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isDigit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLower</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLower</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUpper</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isUpper</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTitleCase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isTitleCase</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNonCharacter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNonCharacter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHighSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isHighSurrogate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLowSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLowSurrogate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSurrogate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>cell</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>cell</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>row</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isNonCharacter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNonCharacter-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isHighSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isHighSurrogate-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLowSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLowSurrogate-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSurrogate-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>requiresSurrogates</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>requiresSurrogates</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>uint</type>
            <name>surrogateToUcs4</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>surrogateToUcs4</anchor>
            <arglist>(ushort high, ushort low)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>uint</type>
            <name>surrogateToUcs4</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>surrogateToUcs4-2</anchor>
            <arglist>(QChar high, QChar low)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>ushort</type>
            <name>highSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>highSurrogate</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>ushort</type>
            <name>lowSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>lowSurrogate</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Category</type>
            <name>category</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>category-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Direction</type>
            <name>direction</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>direction-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>JoiningType</type>
            <name>joiningType</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>joiningType-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Joining</type>
            <name>joining</name>
            <anchorfile>qchar-obsolete.html</anchorfile>
            <anchor>joining-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>unsigned char</type>
            <name>combiningClass</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>combiningClass-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>uint</type>
            <name>mirroredChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>mirroredChar-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasMirrored</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>hasMirrored-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>decomposition</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>decomposition-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Decomposition</type>
            <name>decompositionTag</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>decompositionTag-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>digitValue</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>digitValue-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>uint</type>
            <name>toLower</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toLower-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>uint</type>
            <name>toUpper</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toUpper-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>uint</type>
            <name>toTitleCase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toTitleCase-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>uint</type>
            <name>toCaseFolded</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toCaseFolded-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Script</type>
            <name>script</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>script-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>UnicodeVersion</type>
            <name>unicodeVersion</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>unicodeVersion-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>UnicodeVersion</type>
            <name>currentUnicodeVersion</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>currentUnicodeVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isPrint</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isPrint-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSpace</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSpace-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isMark</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isMark-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isPunct</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isPunct-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSymbol</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSymbol-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLetter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLetter-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isNumber</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNumber-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLetterOrNumber</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLetterOrNumber-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isDigit</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isDigit-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLower</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLower-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isUpper</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isUpper-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTitleCase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isTitleCase-2</anchor>
            <arglist>(uint ucs4)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCollatorSortKey</name>
        <filename>qcollatorsortkey.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollatorSortKey</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>QCollatorSortKey</anchor>
            <arglist>(const QCollatorSortKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCollatorSortKey</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>dtor.QCollatorSortKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollatorSortKey &amp;</type>
            <name>operator=</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCollatorSortKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollatorSortKey &amp;</type>
            <name>operator=</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QCollatorSortKey &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCollatorSortKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QCollatorSortKey &amp;otherKey) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCollator</name>
        <filename>qcollator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>QCollator</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>QCollator-2</anchor>
            <arglist>(const QCollator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>dtor.QCollator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollator &amp;</type>
            <name>operator=</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCollator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>QCollator-3</anchor>
            <arglist>(QCollator &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollator &amp;</type>
            <name>operator=</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QCollator &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCollator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumericMode</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>setNumericMode</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>numericMode</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>numericMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIgnorePunctuation</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>setIgnorePunctuation</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ignorePunctuation</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>ignorePunctuation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QString &amp;s1, const QString &amp;s2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>compare-2</anchor>
            <arglist>(const QStringRef &amp;s1, const QStringRef &amp;s2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>compare-3</anchor>
            <arglist>(const QChar *s1, int len1, const QChar *s2, int len2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollatorSortKey</type>
            <name>sortKey</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>sortKey</anchor>
            <arglist>(const QString &amp;string) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCommandLineOption</name>
        <filename>qcommandlineoption.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption-2</anchor>
            <arglist>(const QStringList &amp;names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption-3</anchor>
            <arglist>(const QString &amp;name, const QString &amp;description, const QString &amp;valueName, const QString &amp;defaultValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption-4</anchor>
            <arglist>(const QStringList &amp;names, const QString &amp;description, const QString &amp;valueName, const QString &amp;defaultValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption-5</anchor>
            <arglist>(const QCommandLineOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>dtor.QCommandLineOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption &amp;</type>
            <name>operator=</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCommandLineOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption &amp;</type>
            <name>operator=</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QCommandLineOption &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCommandLineOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>names</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>names</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueName</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setValueName</anchor>
            <arglist>(const QString &amp;valueName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>valueName</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>valueName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultValue</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setDefaultValue</anchor>
            <arglist>(const QString &amp;defaultValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultValues</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setDefaultValues</anchor>
            <arglist>(const QStringList &amp;defaultValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>defaultValues</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>defaultValues</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCommandLineParser</name>
        <filename>qcommandlineparser.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineParser</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>QCommandLineParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCommandLineParser</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>dtor.QCommandLineParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>SingleDashWordOptionMode</name>
            <anchor>SingleDashWordOptionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseAsCompactedShortOptions">
            <anchor>SingleDashWordOptionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseAsLongOptions">
            <anchor>SingleDashWordOptionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSingleDashWordOptionMode</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>setSingleDashWordOptionMode</anchor>
            <arglist>(SingleDashWordOptionMode singleDashWordOptionMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addOption</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addOption</anchor>
            <arglist>(const QCommandLineOption &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addOptions</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addOptions</anchor>
            <arglist>(const QList&lt;QCommandLineOption&gt; &amp;options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption</type>
            <name>addVersionOption</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addVersionOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption</type>
            <name>addHelpOption</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addHelpOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setApplicationDescription</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>setApplicationDescription</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>applicationDescription</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>applicationDescription</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPositionalArgument</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addPositionalArgument</anchor>
            <arglist>(const QString &amp;name, const QString &amp;description, const QString &amp;syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPositionalArguments</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>clearPositionalArguments</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>process</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>process</anchor>
            <arglist>(const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>process</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>process-2</anchor>
            <arglist>(const QCoreApplication &amp;app)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>parse</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>parse</anchor>
            <arglist>(const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorText</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>errorText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSet</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>isSet</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;optionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>values</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>values</anchor>
            <arglist>(const QString &amp;optionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSet</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>isSet-2</anchor>
            <arglist>(const QCommandLineOption &amp;option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(const QCommandLineOption &amp;option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>values</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>values-2</anchor>
            <arglist>(const QCommandLineOption &amp;option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>positionalArguments</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>positionalArguments</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>optionNames</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>optionNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>unknownOptionNames</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>unknownOptionNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showVersion</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>showVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showHelp</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>showHelp</anchor>
            <arglist>(int exitCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>helpText</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>helpText</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContiguousCache</name>
        <filename>qcontiguouscache.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContiguousCache</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>QContiguousCache</anchor>
            <arglist>(int capacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContiguousCache</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>QContiguousCache-2</anchor>
            <arglist>(const QContiguousCache&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContiguousCache</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>dtor.QContiguousCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContiguousCache&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QContiguousCache&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContiguousCache&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QContiguousCache&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QContiguousCache&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QContiguousCache&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QContiguousCache&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFull</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>isFull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>available</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>available</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapacity</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>setCapacity</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>at</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsIndex</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>containsIndex</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstIndex</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>firstIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndex</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>lastIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>first-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>last-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeFirst</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>takeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeLast</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>takeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>areIndexesValid</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>areIndexesValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalizeIndexes</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>normalizeIndexes</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCryptographicHash</name>
        <filename>qcryptographichash.html</filename>
        <member kind="enum">
            <name>Algorithm</name>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Md4">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Md5">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha1">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha224">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha256">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha384">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha512">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha3_224">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha3_256">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha3_384">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sha3_512">
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCryptographicHash</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>QCryptographicHash</anchor>
            <arglist>(Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCryptographicHash</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>dtor.QCryptographicHash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>addData</anchor>
            <arglist>(const char *data, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>addData-3</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addData</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>addData-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>result</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>hash</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hash</anchor>
            <arglist>(const QByteArray &amp;data, Algorithm method)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDate</name>
        <filename>qdate.html</filename>
        <member kind="enum">
            <name>MonthNameType</name>
            <anchor>MonthNameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DateFormat">
            <anchor>MonthNameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandaloneFormat">
            <anchor>MonthNameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>QDate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>QDate-3</anchor>
            <arglist>(int y, int m, int d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>year</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>year</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>month</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>month</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>day</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>day</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dayOfWeek</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>dayOfWeek</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dayOfYear</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>dayOfYear</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daysInMonth</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>daysInMonth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daysInYear</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>daysInYear</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weekNumber</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>weekNumber</anchor>
            <arglist>(int *yearNumber) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>shortMonthName</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>shortMonthName</anchor>
            <arglist>(int month, MonthNameType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>shortDayName</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>shortDayName</anchor>
            <arglist>(int weekday, MonthNameType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>longMonthName</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>longMonthName</anchor>
            <arglist>(int month, MonthNameType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>longDayName</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>longDayName</anchor>
            <arglist>(int weekday, MonthNameType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toString-2</anchor>
            <arglist>(Qt::DateFormat format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setYMD</name>
            <anchorfile>qdate-obsolete.html</anchorfile>
            <anchor>setYMD</anchor>
            <arglist>(int y, int m, int d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>setDate</anchor>
            <arglist>(int year, int month, int day)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>getDate</anchor>
            <arglist>(int *year, int *month, int *day)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addDays</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addDays</anchor>
            <arglist>(qint64 ndays) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addMonths</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addMonths</anchor>
            <arglist>(int nmonths) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addYears</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addYears</anchor>
            <arglist>(int nyears) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>daysTo</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>daysTo</anchor>
            <arglist>(const QDate &amp;d) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QDate &amp;d) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QDate &amp;d) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QDate &amp;d) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QDate &amp;d) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QDate &amp;d) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QDate &amp;d) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>currentDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>currentDate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-2</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>isValid-2</anchor>
            <arglist>(int year, int month, int day)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLeapYear</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>isLeapYear</anchor>
            <arglist>(int year)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromJulianDay</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromJulianDay</anchor>
            <arglist>(qint64 jd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>toJulianDay</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toJulianDay</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTime</name>
        <filename>qtime.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTime</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>QTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTime</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>QTime-3</anchor>
            <arglist>(int h, int m, int s, int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hour</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>hour</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minute</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>minute</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>second</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>second</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>msec</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>msec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>toString-2</anchor>
            <arglist>(Qt::DateFormat format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setHMS</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>setHMS</anchor>
            <arglist>(int h, int m, int s, int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>addSecs</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>addSecs</anchor>
            <arglist>(int s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>secsTo</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>secsTo</anchor>
            <arglist>(const QTime &amp;t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>addMSecs</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>addMSecs</anchor>
            <arglist>(int ms) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>msecsTo</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>msecsTo</anchor>
            <arglist>(const QTime &amp;t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTime &amp;t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTime &amp;t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QTime &amp;t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QTime &amp;t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QTime &amp;t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QTime &amp;t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromMSecsSinceStartOfDay</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromMSecsSinceStartOfDay</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>msecsSinceStartOfDay</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>msecsSinceStartOfDay</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>currentTime</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>currentTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromString-2</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>isValid-2</anchor>
            <arglist>(int h, int m, int s, int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>restart</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>restart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>elapsed</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>elapsed</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDateTime</name>
        <filename>qdatetime.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-2</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-3</anchor>
            <arglist>(const QDate &amp;date, const QTime &amp;time, Qt::TimeSpec spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-4</anchor>
            <arglist>(const QDate &amp;date, const QTime &amp;time, Qt::TimeSpec spec, int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-5</anchor>
            <arglist>(const QDate &amp;date, const QTime &amp;time, const QTimeZone &amp;timeZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-6</anchor>
            <arglist>(const QDateTime &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>dtor.QDateTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime &amp;</type>
            <name>operator=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDateTime &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDateTime &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>date</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>date</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>time</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>time</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimeSpec</type>
            <name>timeSpec</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>timeSpec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>offsetFromUtc</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>offsetFromUtc</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone</type>
            <name>timeZone</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>timeZone</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>timeZoneAbbreviation</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>timeZoneAbbreviation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDaylightTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>isDaylightTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>toMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toMSecsSinceEpoch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toTime_t</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toTime_t</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setDate</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setTime</anchor>
            <arglist>(const QTime &amp;time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeSpec</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setTimeSpec</anchor>
            <arglist>(Qt::TimeSpec spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffsetFromUtc</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setOffsetFromUtc</anchor>
            <arglist>(int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeZone</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setTimeZone</anchor>
            <arglist>(const QTimeZone &amp;toZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setMSecsSinceEpoch</anchor>
            <arglist>(qint64 msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTime_t</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setTime_t</anchor>
            <arglist>(uint seconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toString-2</anchor>
            <arglist>(Qt::DateFormat format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addDays</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addDays</anchor>
            <arglist>(qint64 ndays) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addMonths</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addMonths</anchor>
            <arglist>(int nmonths) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addYears</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addYears</anchor>
            <arglist>(int nyears) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addSecs</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addSecs</anchor>
            <arglist>(qint64 s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addMSecs</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addMSecs</anchor>
            <arglist>(qint64 msecs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toTimeSpec</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toTimeSpec</anchor>
            <arglist>(Qt::TimeSpec spec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toLocalTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toLocalTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toUTC</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toUTC</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toOffsetFromUtc</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toOffsetFromUtc</anchor>
            <arglist>(int offsetSeconds) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toTimeZone</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toTimeZone</anchor>
            <arglist>(const QTimeZone &amp;timeZone) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>daysTo</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>daysTo</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>secsTo</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>secsTo</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>msecsTo</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>msecsTo</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QDateTime &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>currentDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>currentDateTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>currentDateTimeUtc</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>currentDateTimeUtc</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-2</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromTime_t</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromTime_t</anchor>
            <arglist>(uint seconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromTime_t</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromTime_t-2</anchor>
            <arglist>(uint seconds, Qt::TimeSpec spec, int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromTime_t</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromTime_t-3</anchor>
            <arglist>(uint seconds, const QTimeZone &amp;timeZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromMSecsSinceEpoch</anchor>
            <arglist>(qint64 msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromMSecsSinceEpoch-2</anchor>
            <arglist>(qint64 msecs, Qt::TimeSpec spec, int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromMSecsSinceEpoch-3</anchor>
            <arglist>(qint64 msecs, const QTimeZone &amp;timeZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qint64</type>
            <name>currentMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>currentMSecsSinceEpoch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromCFDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromCFDate</anchor>
            <arglist>(CFDateRef date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFDateRef</type>
            <name>toCFDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toCFDate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromNSDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromNSDate</anchor>
            <arglist>(const NSDate *date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSDate *</type>
            <name>toNSDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toNSDate</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEasingCurve</name>
        <filename>qeasingcurve.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Linear">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InQuad">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutQuad">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutQuad">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInQuad">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InCubic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutCubic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutCubic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInCubic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InQuart">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutQuart">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutQuart">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInQuart">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InQuint">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutQuint">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutQuint">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInQuint">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InSine">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutSine">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutSine">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInSine">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InExpo">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutExpo">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutExpo">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInExpo">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InCirc">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutCirc">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutCirc">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInCirc">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InElastic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutElastic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutElastic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInElastic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InBack">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutBack">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutBack">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInBack">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InBounce">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutBounce">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InOutBounce">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutInBounce">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InCurve">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutCurve">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SineCurve">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CosineCurve">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BezierSpline">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TCBSpline">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Custom">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NCurveTypes">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEasingCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>QEasingCurve</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEasingCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>QEasingCurve-2</anchor>
            <arglist>(const QEasingCurve &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEasingCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>dtor.QEasingCurve</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve &amp;</type>
            <name>operator=</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QEasingCurve &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEasingCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>QEasingCurve-3</anchor>
            <arglist>(QEasingCurve &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve &amp;</type>
            <name>operator=</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QEasingCurve &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QEasingCurve &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QEasingCurve &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QEasingCurve &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>amplitude</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>amplitude</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmplitude</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setAmplitude</anchor>
            <arglist>(qreal amplitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>period</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>period</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeriod</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setPeriod</anchor>
            <arglist>(qreal period)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>overshoot</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>overshoot</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOvershoot</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setOvershoot</anchor>
            <arglist>(qreal overshoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCubicBezierSegment</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>addCubicBezierSegment</anchor>
            <arglist>(const QPointF &amp;c1, const QPointF &amp;c2, const QPointF &amp;endPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTCBSegment</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>addTCBSegment</anchor>
            <arglist>(const QPointF &amp;nextPoint, qreal t, qreal c, qreal b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QPointF&gt;</type>
            <name>toCubicSpline</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>toCubicSpline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPointF&gt;</type>
            <name>cubicBezierSpline</name>
            <anchorfile>qeasingcurve-obsolete.html</anchorfile>
            <anchor>cubicBezierSpline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>EasingFunction</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>EasingFunction-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCustomType</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setCustomType</anchor>
            <arglist>(EasingFunction func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>EasingFunction</type>
            <name>customType</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>customType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>valueForProgress</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>valueForProgress</anchor>
            <arglist>(qreal progress) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QElapsedTimer</name>
        <filename>qelapsedtimer.html</filename>
        <member kind="enum">
            <name>ClockType</name>
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SystemTime">
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MonotonicClock">
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TickCounter">
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MachAbsoluteTime">
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PerformanceCounter">
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QElapsedTimer</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>QElapsedTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>ClockType</type>
            <name>clockType</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>clockType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isMonotonic</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>isMonotonic</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>restart</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>restart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>nsecsElapsed</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>nsecsElapsed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>elapsed</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>elapsed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasExpired</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>hasExpired</anchor>
            <arglist>(qint64 timeout) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>msecsSinceReference</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>msecsSinceReference</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>msecsTo</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>msecsTo</anchor>
            <arglist>(const QElapsedTimer &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>secsTo</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>secsTo</anchor>
            <arglist>(const QElapsedTimer &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QElapsedTimer &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QElapsedTimer &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHash</name>
        <filename>qhash.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash-2</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;Key, T&gt; &gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash-3</anchor>
            <arglist>(const QHash &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>dtor.QHash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash &amp;</type>
            <name>operator=</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHash &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash-4</anchor>
            <arglist>(QHash &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash &amp;</type>
            <name>operator=</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QHash &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QHash &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QHash &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QHash &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>remove</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>take</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key</type>
            <name>key</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>key</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key</type>
            <name>key</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>key-2</anchor>
            <arglist>(const T &amp;value, const Key &amp;defaultKey) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T</type>
            <name>value</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T</type>
            <name>value</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(const Key &amp;key, const T &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T</type>
            <name>operator[]</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>uniqueKeys</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>uniqueKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keys-2</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>values-2</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <class>QHash::iterator</class>
        <class>QHash::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>find</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>find</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constFind</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insertMulti</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insertMulti</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash &amp;</type>
            <name>unite</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QHash &amp;other)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>mapped_type</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>mapped_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHash::iterator</name>
        <filename>qhash-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator+</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator-</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHash::const_iterator</name>
        <filename>qhash-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiHash</name>
        <filename>qmultihash.html</filename>
        <base>QHash</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiHash</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>QMultiHash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiHash</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>QMultiHash-2</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;Key, T&gt; &gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiHash</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>QMultiHash-3</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMultiHash &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>replace</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMultiHash &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash</type>
            <name>operator+</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QMultiHash &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>remove</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>find</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>find</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLine</name>
        <filename>qline.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLine</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>QLine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLine</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>QLine-2</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLine</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>QLine-3</anchor>
            <arglist>(int x1, int y1, int x2, int y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>p1</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>p1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>p2</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>p2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x1</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>x1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y1</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>y1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x2</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>x2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y2</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>y2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dx</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>dx</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dy</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>dy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>translated</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(const QPoint &amp;offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>translated</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>translated-2</anchor>
            <arglist>(int dx, int dy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setP1</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>setP1</anchor>
            <arglist>(const QPoint &amp;p1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setP2</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>setP2</anchor>
            <arglist>(const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoints</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>setPoints</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLine</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>setLine</anchor>
            <arglist>(int x1, int y1, int x2, int y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QLine &amp;line) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QLine &amp;line) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLineF</name>
        <filename>qlinef.html</filename>
        <member kind="enum">
            <name>IntersectType</name>
            <anchor>IntersectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoIntersection">
            <anchor>IntersectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BoundedIntersection">
            <anchor>IntersectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnboundedIntersection">
            <anchor>IntersectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineF</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>QLineF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineF</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>QLineF-2</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineF</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>QLineF-3</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineF</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>QLineF-4</anchor>
            <arglist>(const QLine &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLineF</type>
            <name>fromPolar</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>fromPolar</anchor>
            <arglist>(qreal length, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>p1</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>p1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>p2</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>p2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x1</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>x1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y1</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>y1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x2</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>x2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y2</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>y2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dx</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>dx</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dy</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>dy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>length</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setLength</anchor>
            <arglist>(qreal length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angle</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>angle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAngle</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setAngle</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angleTo</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>angleTo</anchor>
            <arglist>(const QLineF &amp;line) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>unitVector</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>unitVector</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>normalVector</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>normalVector</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>IntersectType</type>
            <name>intersect</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>intersect</anchor>
            <arglist>(const QLineF &amp;line, QPointF *intersectionPoint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angle</name>
            <anchorfile>qlinef-obsolete.html</anchorfile>
            <anchor>angle-2</anchor>
            <arglist>(const QLineF &amp;line) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pointAt</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>pointAt</anchor>
            <arglist>(qreal t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>translated</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(const QPointF &amp;offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>translated</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>translated-2</anchor>
            <arglist>(qreal dx, qreal dy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setP1</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setP1</anchor>
            <arglist>(const QPointF &amp;p1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setP2</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setP2</anchor>
            <arglist>(const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoints</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setPoints</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLine</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setLine</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QLineF &amp;line) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QLineF &amp;line) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>toLine</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>toLine</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLinkedList</name>
        <filename>qlinkedlist.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinkedList</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>QLinkedList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinkedList</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>QLinkedList-2</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinkedList</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>QLinkedList-3</anchor>
            <arglist>(std::initializer_list&lt;T&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLinkedList</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>dtor.QLinkedList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLinkedList&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinkedList</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>QLinkedList-4</anchor>
            <arglist>(QLinkedList&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLinkedList&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QLinkedList&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QLinkedList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeFirst</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>takeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeLast</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>takeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>removeAll</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>removeAll</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeOne</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>removeOne</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <class>QLinkedList::iterator</class>
        <class>QLinkedList::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(iterator before, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>erase-2</anchor>
            <arglist>(iterator begin, iterator end)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>first-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>last-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>front</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>front</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>front-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>back</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>back</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>back-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_front</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLinkedList&lt;T&gt;</type>
            <name>fromStdList</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>fromStdList</anchor>
            <arglist>(const std::list&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::list&lt;T&gt;</type>
            <name>toStdList</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>toStdList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLinkedList&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLinkedList&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLinkedList&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLinkedList&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLinkedList&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlinkedlist.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLinkedList::iterator</name>
        <filename>qlinkedlist-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>iterator-3</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator+</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator-</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qlinkedlist-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLinkedList::const_iterator</name>
        <filename>qlinkedlist-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>const_iterator-4</anchor>
            <arglist>(iterator other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qlinkedlist-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QList</name>
        <filename>qlist.html</filename>
        <class>QList::MemoryLayout</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-2</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>dtor.QList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-3</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList &amp;</type>
            <name>operator=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-4</anchor>
            <arglist>(std::initializer_list&lt;T&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>at</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int alloc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(const QList&lt;T&gt; &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAt</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>removeAll</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeAll</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeOne</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeOne</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeAt</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeFirst</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>takeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeLast</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>takeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>move</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>move</anchor>
            <arglist>(int from, int to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>swap-2</anchor>
            <arglist>(int i, int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const T &amp;value, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const T &amp;value, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <class>QList::iterator</class>
        <class>QList::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(iterator before, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>erase-2</anchor>
            <arglist>(iterator begin, iterator end)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>first-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>last-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>mid</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(int pos, int length) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(int i, const T &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>front-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>back-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt;</type>
            <name>toVector</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>toVector</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>toSet</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>toSet</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;T&gt;</type>
            <name>fromVector</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>fromVector</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;T&gt;</type>
            <name>fromSet</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>fromSet</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;T&gt;</type>
            <name>fromStdList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>fromStdList</anchor>
            <arglist>(const std::list&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::list&lt;T&gt;</type>
            <name>toStdList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>toStdList</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QList::MemoryLayout</name>
        <filename>qlist-memorylayout.html</filename>
    </compound>
    <compound kind="class">
        <name>QList::iterator</name>
        <filename>qlist-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>iterator-3</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(difference_type j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-lt-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-lt-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-gt-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-gt-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator+</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(difference_type j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator-</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(difference_type j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator-</name>
            <anchorfile>qlist-iterator.html</anchorfile>
            <anchor>operator--2</anchor>
            <arglist>(iterator other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QList::const_iterator</name>
        <filename>qlist-const-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>const_iterator-4</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(difference_type j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(difference_type j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(difference_type j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator-</name>
            <anchorfile>qlist-const-iterator.html</anchorfile>
            <anchor>operator--2</anchor>
            <arglist>(const_iterator other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLocale</name>
        <filename>qlocale.html</filename>
        <member kind="enum">
            <name>Language</name>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyLanguage">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="C">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Abkhazian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Oromo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Afar">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Afrikaans">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Albanian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Amharic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Arabic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Armenian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Assamese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Aymara">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Azerbaijani">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bashkir">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Basque">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bengali">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dzongkha">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bihari">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bislama">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Breton">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bulgarian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Burmese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Belarusian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Khmer">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Catalan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chinese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Corsican">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Croatian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Czech">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Danish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dutch">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="English">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Esperanto">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Estonian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Faroese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fijian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Finnish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="French">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WesternFrisian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gaelic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Galician">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Georgian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="German">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greek">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greenlandic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Guarani">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gujarati">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hausa">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hebrew">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hindi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hungarian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Icelandic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Indonesian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Interlingua">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Interlingue">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Inuktitut">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Inupiak">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Irish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Italian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Japanese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Javanese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kannada">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kashmiri">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kazakh">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kinyarwanda">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kirghiz">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Korean">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kurdish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rundi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lao">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Latin">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Latvian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lingala">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lithuanian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Macedonian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Malagasy">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Malay">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Malayalam">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Maltese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Maori">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Marathi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Marshallese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mongolian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NauruLanguage">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nepali">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorwegianBokmal">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Occitan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Oriya">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pashto">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Persian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Polish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Portuguese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Punjabi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Quechua">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Romansh">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Romanian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Russian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Samoan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sango">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sanskrit">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Serbian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ossetic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SouthernSotho">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tswana">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Shona">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sindhi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sinhala">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Swati">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Slovak">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Slovenian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Somali">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Spanish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sundanese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Swahili">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Swedish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sardinian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tajik">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tamil">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tatar">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Telugu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Thai">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tibetan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tigrinya">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tongan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tsonga">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Turkish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Turkmen">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tahitian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uighur">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ukrainian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Urdu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uzbek">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vietnamese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Volapuk">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Welsh">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Wolof">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Xhosa">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Yiddish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Yoruba">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zhuang">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zulu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorwegianNynorsk">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bosnian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Divehi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Manx">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cornish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Akan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Konkani">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ga">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Igbo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kamba">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Syriac">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Blin">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Geez">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Koro">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sidamo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Atsam">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tigre">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Jju">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Friulian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Venda">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ewe">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Walamo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hawaiian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tyap">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nyanja">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Filipino">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SwissGerman">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SichuanYi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kpelle">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowGerman">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SouthNdebele">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorthernSotho">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorthernSami">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Taroko">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gusii">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Taita">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fulah">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kikuyu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Samburu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sena">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorthNdebele">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rombo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tachelhit">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kabyle">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nyankole">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bena">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vunjo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bambara">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Embu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cherokee">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Morisyen">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Makonde">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Langi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ganda">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bemba">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kabuverdianu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Meru">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kalenjin">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nama">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Machame">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Colognian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Masai">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Soga">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Luyia">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Asu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Teso">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Saho">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KoyraChiini">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rwa">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Luo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chiga">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CentralMoroccoTamazight">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KoyraboroSenni">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Shambala">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bodo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Avaric">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chamorro">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chechen">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Church">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chuvash">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cree">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Haitian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Herero">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HiriMotu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kanuri">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Komi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kongo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kwanyama">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Limburgish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LubaKatanga">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Luxembourgish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Navaho">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ndonga">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ojibwa">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pali">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Walloon">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Aghem">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Basaa">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zarma">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Duala">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="JolaFonyi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ewondo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bafia">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MakhuwaMeetto">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mundang">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kwasio">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nuer">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sakha">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sangu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CongoSwahili">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tasawaq">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vai">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Walser">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Yangben">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Avestan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Asturian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ngomba">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kako">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Meta">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ngiemboon">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Aragonese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Akkadian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AncientEgyptian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AncientGreek">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Aramaic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Balinese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bamun">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BatakToba">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Buginese">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Buhid">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Carian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chakma">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClassicalMandaic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Coptic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dogri">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EasternCham">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EasternKayah">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Etruscan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gothic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hanunoo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ingush">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LargeFloweryMiao">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lepcha">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Limbu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lisu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lu">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lycian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lydian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mandingo">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Manipuri">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Meroitic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorthernThai">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldIrish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldNorse">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldPersian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldTurkish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pahlavi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Parthian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Phoenician">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrakritLanguage">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rejang">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sabaean">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Samaritan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Santali">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Saurashtra">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sora">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sylheti">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tagbanwa">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TaiDam">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TaiNua">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ugaritic">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Akoose">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lakota">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandardMoroccanTamazight">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mapuche">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CentralKurdish">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowerSorbian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UpperSorbian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kenyang">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mohawk">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nko">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Prussian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kiche">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SouthernSami">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LuleSami">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InariSami">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SkoltSami">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Warlpiri">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ManichaeanMiddlePersian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mende">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AncientNorthArabian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearA">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HmongNjua">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ho">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lezghian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bassa">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mono">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TedimChin">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Maithili">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Norwegian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Moldavian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SerboCroatian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tagalog">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Twi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Afan">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Byelorussian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bhutani">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cambodian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kurundi">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RhaetoRomance">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chewa">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Frisian">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uigur">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastLanguage">
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Script</name>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ArabicScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CyrillicScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeseretScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GurmukhiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SimplifiedHanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TraditionalHanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LatinScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MongolianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TifinaghScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ArmenianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BengaliScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CherokeeScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DevanagariScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EthiopicScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GeorgianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreekScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GujaratiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HebrewScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="JapaneseScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KhmerScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KannadaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KoreanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LaoScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MalayalamScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MyanmarScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OriyaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TamilScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TeluguScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThaanaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThaiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TibetanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SinhalaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SyriacScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VaiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvestanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BalineseScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BamumScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BatakScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BopomofoScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BrahmiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BugineseScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BuhidScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanadianAboriginalScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CarianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChakmaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChamScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CopticScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CypriotScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EgyptianHieroglyphsScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FraserScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GlagoliticScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GothicScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HangulScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HanunooScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImperialAramaicScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InscriptionalPahlaviScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InscriptionalParthianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="JavaneseScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KaithiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KatakanaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KayahLiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KharoshthiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LannaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LepchaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LimbuScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearBScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LycianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LydianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MandaeanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MeiteiMayekScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MeroiticScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MeroiticCursiveScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NkoScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewTaiLueScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OghamScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OlChikiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldItalicScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldPersianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldSouthArabianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrkhonScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OsmanyaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PhagsPaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PhoenicianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PollardPhoneticScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RejangScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RunicScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SamaritanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaurashtraScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SharadaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShavianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SoraSompengScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CuneiformScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SundaneseScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SylotiNagriScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TagalogScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TagbanwaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TaiLeScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TaiVietScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TakriScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UgariticScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BrailleScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HiraganaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaucasianAlbanianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BassaVahScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DuployanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElbasanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GranthaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PahawhHmongScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KhojkiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearAScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MahajaniScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ManichaeanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MendeKikakuiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ModiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MroScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldNorthArabianScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NabataeanScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PalmyreneScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PauCinHauScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldPermicScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PsalterPahlaviScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SiddhamScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KhudawadiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TirhutaScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VarangKshitiScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SimplifiedChineseScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TraditionalChineseScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastScript">
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Country</name>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyCountry">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Afghanistan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Albania">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Algeria">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AmericanSamoa">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Andorra">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Angola">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Anguilla">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Antarctica">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AntiguaAndBarbuda">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Argentina">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Armenia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Aruba">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Australia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Austria">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Azerbaijan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bahamas">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bahrain">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bangladesh">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Barbados">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Belarus">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Belgium">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Belize">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Benin">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bermuda">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bhutan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bolivia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BosniaAndHerzegowina">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Botswana">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BouvetIsland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Brazil">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BritishIndianOceanTerritory">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Brunei">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bulgaria">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BurkinaFaso">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Burundi">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cambodia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cameroon">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Canada">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CapeVerde">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaymanIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CentralAfricanRepublic">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chad">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Chile">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="China">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChristmasIsland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CocosIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Colombia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Comoros">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CongoKinshasa">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CongoBrazzaville">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CookIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CostaRica">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IvoryCoast">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Croatia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cuba">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cyprus">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CzechRepublic">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Denmark">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Djibouti">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dominica">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DominicanRepublic">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EastTimor">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ecuador">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Egypt">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElSalvador">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EquatorialGuinea">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Eritrea">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Estonia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ethiopia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FalklandIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FaroeIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fiji">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Finland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="France">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Guernsey">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrenchGuiana">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrenchPolynesia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrenchSouthernTerritories">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gabon">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gambia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Georgia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Germany">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ghana">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gibraltar">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greece">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greenland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Grenada">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Guadeloupe">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Guam">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Guatemala">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Guinea">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GuineaBissau">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Guyana">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Haiti">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HeardAndMcDonaldIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Honduras">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HongKong">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hungary">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Iceland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="India">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Indonesia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Iran">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Iraq">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ireland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Israel">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Italy">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Jamaica">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Japan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Jordan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kazakhstan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kenya">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kiribati">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorthKorea">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SouthKorea">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kuwait">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kyrgyzstan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Laos">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Latvia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lebanon">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lesotho">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Liberia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Libya">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Liechtenstein">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lithuania">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Luxembourg">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Macau">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Macedonia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Madagascar">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Malawi">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Malaysia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Maldives">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mali">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Malta">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MarshallIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Martinique">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mauritania">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mauritius">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mayotte">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mexico">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Micronesia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Moldova">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Monaco">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mongolia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Montserrat">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Morocco">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mozambique">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Myanmar">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Namibia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NauruCountry">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nepal">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Netherlands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CuraSao">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewCaledonia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewZealand">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nicaragua">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Niger">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nigeria">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Niue">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorfolkIsland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NorthernMarianaIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Norway">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Oman">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pakistan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Palau">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PalestinianTerritories">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Panama">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PapuaNewGuinea">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Paraguay">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Peru">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Philippines">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pitcairn">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Poland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Portugal">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PuertoRico">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qatar">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reunion">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Romania">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Russia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rwanda">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaintKittsAndNevis">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaintLucia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaintVincentAndTheGrenadines">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Samoa">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SanMarino">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaoTomeAndPrincipe">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaudiArabia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Senegal">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Seychelles">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SierraLeone">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Singapore">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Slovakia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Slovenia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SolomonIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Somalia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SouthAfrica">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SouthGeorgiaAndTheSouthSandwichIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Spain">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SriLanka">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaintHelena">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaintPierreAndMiquelon">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sudan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Suriname">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SvalbardAndJanMayenIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Swaziland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sweden">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Switzerland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Syria">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Taiwan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tajikistan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tanzania">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Thailand">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Togo">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tokelau">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tonga">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrinidadAndTobago">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tunisia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Turkey">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Turkmenistan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TurksAndCaicosIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tuvalu">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uganda">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ukraine">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnitedArabEmirates">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnitedKingdom">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnitedStates">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnitedStatesMinorOutlyingIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uruguay">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uzbekistan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vanuatu">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VaticanCityState">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Venezuela">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vietnam">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BritishVirginIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnitedStatesVirginIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WallisAndFutunaIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WesternSahara">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Yemen">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanaryIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zambia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zimbabwe">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClippertonIsland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Montenegro">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Serbia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaintBarthelemy">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaintMartin">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LatinAmericaAndTheCaribbean">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AscensionIsland">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlandIslands">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DiegoGarcia">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CeutaAndMelilla">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IsleOfMan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Jersey">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TristanDaCunha">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SouthSudan">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bonaire">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SintMaarten">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kosovo">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DemocraticRepublicOfCongo">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PeoplesRepublicOfCongo">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DemocraticRepublicOfKorea">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RepublicOfKorea">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RussianFederation">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SyrianArabRepublic">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastCountry">
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MeasurementSystem</name>
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetricSystem">
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImperialUSSystem">
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImperialUKSystem">
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImperialSystem">
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FormatType</name>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LongFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShortFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NarrowFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>NumberOption</name>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OmitGroupSeparator">
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RejectGroupSeparator">
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QLocale::NumberOption">
            <name>NumberOptions</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CurrencySymbolFormat</name>
            <anchor>CurrencySymbolFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CurrencyIsoCode">
            <anchor>CurrencySymbolFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CurrencySymbol">
            <anchor>CurrencySymbolFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CurrencyDisplayName">
            <anchor>CurrencySymbolFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-2</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-3</anchor>
            <arglist>(Language language, Country country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-4</anchor>
            <arglist>(Language language, Script script, Country country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-5</anchor>
            <arglist>(const QLocale &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>dtor.QLocale</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale &amp;</type>
            <name>operator=</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QLocale &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Language</type>
            <name>language</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>language</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Script</type>
            <name>script</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>script</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Country</type>
            <name>country</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>country</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>bcp47Name</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>bcp47Name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeLanguageName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>nativeLanguageName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeCountryName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>nativeCountryName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(const QString &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(const QString &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(const QString &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(const QString &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(const QString &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(const QString &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(const QString &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(const QString &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toShort-2</anchor>
            <arglist>(const QStringRef &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUShort-2</anchor>
            <arglist>(const QStringRef &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toInt-2</anchor>
            <arglist>(const QStringRef &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUInt-2</anchor>
            <arglist>(const QStringRef &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toLongLong-2</anchor>
            <arglist>(const QStringRef &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toULongLong-2</anchor>
            <arglist>(const QStringRef &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toFloat-2</anchor>
            <arglist>(const QStringRef &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDouble-2</anchor>
            <arglist>(const QStringRef &amp;s, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(qlonglong i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-8</anchor>
            <arglist>(qulonglong i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-10</anchor>
            <arglist>(short i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-11</anchor>
            <arglist>(ushort i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-12</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-13</anchor>
            <arglist>(uint i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-9</anchor>
            <arglist>(double i, char f, int prec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-14</anchor>
            <arglist>(float i, char f, int prec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-2</anchor>
            <arglist>(const QDate &amp;date, const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-3</anchor>
            <arglist>(const QDate &amp;date, FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-4</anchor>
            <arglist>(const QTime &amp;time, const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-5</anchor>
            <arglist>(const QTime &amp;time, FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-6</anchor>
            <arglist>(const QDateTime &amp;dateTime, FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-7</anchor>
            <arglist>(const QDateTime &amp;dateTime, const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dateFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>dateFormat</anchor>
            <arglist>(FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>timeFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>timeFormat</anchor>
            <arglist>(FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dateTimeFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>dateTimeFormat</anchor>
            <arglist>(FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>toDate</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDate</anchor>
            <arglist>(const QString &amp;string, FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>toTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toTime</anchor>
            <arglist>(const QString &amp;string, FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDateTime</anchor>
            <arglist>(const QString &amp;string, FormatType format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>toDate</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDate-2</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>toTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toTime-2</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDateTime-2</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>decimalPoint</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>decimalPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>groupSeparator</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>groupSeparator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>percent</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>percent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>zeroDigit</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>zeroDigit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>negativeSign</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>negativeSign</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>positiveSign</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>positiveSign</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>exponential</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>exponential</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>monthName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>monthName</anchor>
            <arglist>(int month, FormatType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>standaloneMonthName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>standaloneMonthName</anchor>
            <arglist>(int month, FormatType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dayName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>dayName</anchor>
            <arglist>(int day, FormatType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>standaloneDayName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>standaloneDayName</anchor>
            <arglist>(int day, FormatType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DayOfWeek</type>
            <name>firstDayOfWeek</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>firstDayOfWeek</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Qt::DayOfWeek&gt;</type>
            <name>weekdays</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>weekdays</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>amText</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>amText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>pmText</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>pmText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MeasurementSystem</type>
            <name>measurementSystem</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>measurementSystem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>textDirection</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>textDirection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUpper</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUpper</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toLower</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toLower</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currencySymbol</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>currencySymbol</anchor>
            <arglist>(CurrencySymbolFormat format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString</anchor>
            <arglist>(qlonglong value, const QString &amp;symbol) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-2</anchor>
            <arglist>(qulonglong value, const QString &amp;symbol) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-4</anchor>
            <arglist>(short value, const QString &amp;symbol) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-5</anchor>
            <arglist>(ushort value, const QString &amp;symbol) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-6</anchor>
            <arglist>(int value, const QString &amp;symbol) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-7</anchor>
            <arglist>(uint value, const QString &amp;symbol) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-3</anchor>
            <arglist>(double value, const QString &amp;symbol) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-8</anchor>
            <arglist>(float value, const QString &amp;symbol) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>uiLanguages</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>uiLanguages</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QLocale &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QLocale &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>languageToString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>languageToString</anchor>
            <arglist>(Language language)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>countryToString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>countryToString</anchor>
            <arglist>(Country country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>scriptToString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>scriptToString</anchor>
            <arglist>(Script script)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefault</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>setDefault</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale</type>
            <name>c</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>c</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale</type>
            <name>system</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>system</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QLocale&gt;</type>
            <name>matchingLocales</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>matchingLocales</anchor>
            <arglist>(QLocale::Language language, QLocale::Script script, QLocale::Country country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;Country&gt;</type>
            <name>countriesForLanguage</name>
            <anchorfile>qlocale-obsolete.html</anchorfile>
            <anchor>countriesForLanguage</anchor>
            <arglist>(Language language)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberOptions</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>setNumberOptions</anchor>
            <arglist>(NumberOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NumberOptions</type>
            <name>numberOptions</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>numberOptions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>QuotationStyle</name>
            <anchor>QuotationStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandardQuotation">
            <anchor>QuotationStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlternateQuotation">
            <anchor>QuotationStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>quoteString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>quoteString</anchor>
            <arglist>(const QString &amp;str, QuotationStyle style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>quoteString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>quoteString-2</anchor>
            <arglist>(const QStringRef &amp;str, QuotationStyle style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>createSeparatedList</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>createSeparatedList</anchor>
            <arglist>(const QStringList &amp;list) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMap</name>
        <filename>qmap.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-2</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;Key, T&gt; &gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-3</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>dtor.QMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-4</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-5</anchor>
            <arglist>(const std::map&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::map&lt;Key, T&gt;</type>
            <name>toStdMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>toStdMap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>remove</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>take</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key</type>
            <name>key</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>key</anchor>
            <arglist>(const T &amp;value, const Key &amp;defaultKey) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T</type>
            <name>value</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const Key &amp;key, const T &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T</type>
            <name>operator[]</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>uniqueKeys</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>uniqueKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keys-2</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>values-2</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>firstKey</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>firstKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>lastKey</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>lastKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>first-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>last-2</anchor>
            <arglist>() const</arglist>
        </member>
        <class>QMap::iterator</class>
        <class>QMap::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>find</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>find</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constFind</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>lowerBound</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>lowerBound</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>lowerBound</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>lowerBound-2</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>upperBound</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>upperBound</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>upperBound</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>upperBound-2</anchor>
            <arglist>(const Key &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(const_iterator pos, const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insertMulti</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>insertMulti</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insertMulti</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>insertMulti-2</anchor>
            <arglist>(const_iterator pos, const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt; &amp;</type>
            <name>unite</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>mapped_type</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>mapped_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;iterator, iterator&gt;</type>
            <name>equal_range</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>equal_range</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMap::iterator</name>
        <filename>qmap-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator+</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator-</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMap::const_iterator</name>
        <filename>qmap-const-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiMap</name>
        <filename>qmultimap.html</filename>
        <base>QMap</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-2</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;Key, T&gt; &gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-3</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>replace</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator pos, const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMultiMap &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap</type>
            <name>operator+</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QMultiMap &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>remove</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>find</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>find</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMargins</name>
        <filename>qmargins.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMargins</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>QMargins</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMargins</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>QMargins-2</anchor>
            <arglist>(int left, int top, int right, int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>top</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>right</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(int left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(int Top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(int right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(int addend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator--eq-2</anchor>
            <arglist>(int subtrahend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator/=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(int divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2a-eq-2</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator/=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2f-eq-2</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMarginsF</name>
        <filename>qmarginsf.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMarginsF</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>QMarginsF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMarginsF</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>QMarginsF-2</anchor>
            <arglist>(qreal left, qreal top, qreal right, qreal bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMarginsF</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>QMarginsF-3</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>left</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>top</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>right</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottom</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(qreal left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(qreal Top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(qreal right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(qreal bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(qreal addend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator--eq-2</anchor>
            <arglist>(qreal subtrahend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator/=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>toMargins</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>toMargins</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageAuthenticationCode</name>
        <filename>qmessageauthenticationcode.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAuthenticationCode</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>QMessageAuthenticationCode</anchor>
            <arglist>(QCryptographicHash::Algorithm method, const QByteArray &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageAuthenticationCode</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>dtor.QMessageAuthenticationCode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKey</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>setKey</anchor>
            <arglist>(const QByteArray &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>addData</anchor>
            <arglist>(const char *data, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>addData-3</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addData</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>addData-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>result</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>hash</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>hash</anchor>
            <arglist>(const QByteArray &amp;message, const QByteArray &amp;key, QCryptographicHash::Algorithm method)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPair</name>
        <filename>qpair.html</filename>
        <member kind="typedef" type="">
            <name>first_type</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>first_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>second_type</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>second_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPair</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>QPair</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPair</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>QPair-2</anchor>
            <arglist>(const T1 &amp;value1, const T2 &amp;value2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPair</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>QPair-3</anchor>
            <arglist>(const QPair&lt;TT1, TT2&gt; &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair &amp;</type>
            <name>operator=</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPair&lt;TT1, TT2&gt; &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPair</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>QPair-4</anchor>
            <arglist>(QPair&lt;TT1, TT2&gt; &amp;&amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair &amp;</type>
            <name>operator=</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QPair&lt;TT1, TT2&gt; &amp;&amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpair.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPair &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPoint</name>
        <filename>qpoint.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPoint</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>QPoint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPoint</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>QPoint-2</anchor>
            <arglist>(int xpos, int ypos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>manhattanLength</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>manhattanLength</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>rx</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>rx</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>ry</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>ry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator+=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator-=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator*=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator*=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-eq-2</anchor>
            <arglist>(double factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator*=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-eq-3</anchor>
            <arglist>(int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator/=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>dotProduct</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPointF</name>
        <filename>qpointf.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointF</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>QPointF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointF</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>QPointF-2</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointF</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>QPointF-3</anchor>
            <arglist>(qreal xpos, qreal ypos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>manhattanLength</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>manhattanLength</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal &amp;</type>
            <name>rx</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>rx</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal &amp;</type>
            <name>ry</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>ry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF &amp;</type>
            <name>operator*=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF &amp;</type>
            <name>operator/=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qreal</type>
            <name>dotProduct</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQueue</name>
        <filename>qqueue.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQueue</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>QQueue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QQueue</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>dtor.QQueue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QQueue&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enqueue</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>enqueue</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>dequeue</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>dequeue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>head</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>head</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>head</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>head-2</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRect</name>
        <filename>qrect.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>QRect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>QRect-2</anchor>
            <arglist>(const QPoint &amp;topLeft, const QPoint &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>QRect-3</anchor>
            <arglist>(const QPoint &amp;topLeft, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>QRect-4</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>top</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>right</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>normalized</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setTopLeft</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setBottomRight</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setTopRight</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setBottomLeft</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>topLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>topLeft</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>bottomRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>bottomRight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>topRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>topRight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>bottomLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>bottomLeft</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>center</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveLeft</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTop</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTop</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveRight</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottom</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveBottom</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTopLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTopLeft</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottomRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveBottomRight</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTopRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTopRight</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottomLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveBottomLeft</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveCenter</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveCenter</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>translated</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(int dx, int dy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>translated</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>translated-2</anchor>
            <arglist>(const QPoint &amp;offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTo</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTo-2</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>getRect</anchor>
            <arglist>(int *x, int *y, int *width, int *height) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoords</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setCoords</anchor>
            <arglist>(int x1, int y1, int x2, int y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCoords</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>getCoords</anchor>
            <arglist>(int *x1, int *y1, int *x2, int *y2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjust</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>adjust</anchor>
            <arglist>(int dx1, int dy1, int dx2, int dy2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>adjusted</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>adjusted</anchor>
            <arglist>(int dx1, int dy1, int dx2, int dy2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>operator|</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QRect &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>operator&amp;</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(const QRect &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect &amp;</type>
            <name>operator|=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>contains-4</anchor>
            <arglist>(const QRect &amp;rectangle, bool proper) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPoint &amp;point, bool proper) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(int x, int y, bool proper) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>united</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QRect &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>intersected</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QRect &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRect &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>marginsAdded</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>marginsAdded</anchor>
            <arglist>(const QMargins &amp;margins) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>marginsRemoved</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>marginsRemoved</anchor>
            <arglist>(const QMargins &amp;margins) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect &amp;</type>
            <name>operator+=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect &amp;</type>
            <name>operator-=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>unite</name>
            <anchorfile>qrect-obsolete.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QRect &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>intersect</name>
            <anchorfile>qrect-obsolete.html</anchorfile>
            <anchor>intersect</anchor>
            <arglist>(const QRect &amp;rectangle) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRectF</name>
        <filename>qrectf.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF-2</anchor>
            <arglist>(const QPointF &amp;topLeft, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF-3</anchor>
            <arglist>(const QPointF &amp;topLeft, const QPointF &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF-4</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF-5</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>normalized</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>left</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>top</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>right</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottom</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>topLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>topLeft</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>bottomRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>bottomRight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>topRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>topRight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>bottomLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>bottomLeft</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>center</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setTopLeft</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setBottomRight</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setTopRight</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setBottomLeft</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveLeft</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTop</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTop</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveRight</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottom</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveBottom</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTopLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTopLeft</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottomRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveBottomRight</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTopRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTopRight</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottomLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveBottomLeft</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveCenter</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveCenter</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>translated</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(qreal dx, qreal dy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>translated</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>translated-2</anchor>
            <arglist>(const QPointF &amp;offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTo</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTo-2</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>getRect</anchor>
            <arglist>(qreal *x, qreal *y, qreal *width, qreal *height) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoords</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setCoords</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCoords</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>getCoords</anchor>
            <arglist>(qreal *x1, qreal *y1, qreal *x2, qreal *y2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjust</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>adjust</anchor>
            <arglist>(qreal dx1, qreal dy1, qreal dx2, qreal dy2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>adjusted</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>adjusted</anchor>
            <arglist>(qreal dx1, qreal dy1, qreal dx2, qreal dy2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>operator|</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QRectF &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>operator&amp;</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(const QRectF &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF &amp;</type>
            <name>operator|=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(const QRectF &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>united</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QRectF &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>intersected</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QRectF &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRectF &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>marginsAdded</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>marginsAdded</anchor>
            <arglist>(const QMarginsF &amp;margins) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>marginsRemoved</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>marginsRemoved</anchor>
            <arglist>(const QMarginsF &amp;margins) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>unite</name>
            <anchorfile>qrectf-obsolete.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QRectF &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>intersect</name>
            <anchorfile>qrectf-obsolete.html</anchorfile>
            <anchor>intersect</anchor>
            <arglist>(const QRectF &amp;rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>toRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>toRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>toAlignedRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>toAlignedRect</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegExp</name>
        <filename>qregexp.html</filename>
        <member kind="enum">
            <name>PatternSyntax</name>
            <anchor>PatternSyntax-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RegExp">
            <anchor>PatternSyntax-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Wildcard">
            <anchor>PatternSyntax-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FixedString">
            <anchor>PatternSyntax-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RegExp2">
            <anchor>PatternSyntax-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WildcardUnix">
            <anchor>PatternSyntax-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="W3CXmlSchema11">
            <anchor>PatternSyntax-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CaretMode</name>
            <anchor>CaretMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaretAtZero">
            <anchor>CaretMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaretAtOffset">
            <anchor>CaretMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaretWontMatch">
            <anchor>CaretMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegExp</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>QRegExp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegExp</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>QRegExp-2</anchor>
            <arglist>(const QString &amp;pattern, Qt::CaseSensitivity cs, PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegExp</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>QRegExp-3</anchor>
            <arglist>(const QRegExp &amp;rx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRegExp</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>dtor.QRegExp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegExp &amp;</type>
            <name>operator=</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QRegExp &amp;rx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegExp &amp;</type>
            <name>operator=</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QRegExp &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegExp &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRegExp &amp;rx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRegExp &amp;rx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>pattern</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPattern</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>setPattern</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PatternSyntax</type>
            <name>patternSyntax</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>patternSyntax</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPatternSyntax</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>setPatternSyntax</anchor>
            <arglist>(PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMinimal</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>isMinimal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimal</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>setMinimal</anchor>
            <arglist>(bool minimal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exactMatch</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>exactMatch</anchor>
            <arglist>(const QString &amp;str) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexIn</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>indexIn</anchor>
            <arglist>(const QString &amp;str, int offset, CaretMode caretMode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexIn</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>lastIndexIn</anchor>
            <arglist>(const QString &amp;str, int offset, CaretMode caretMode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>matchedLength</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>matchedLength</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>captureCount</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>captureCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>capturedTexts</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>capturedTexts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>cap</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>cap</anchor>
            <arglist>(int nth) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pos</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>(int nth) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>escape</name>
            <anchorfile>qregexp.html</anchorfile>
            <anchor>escape</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegularExpression</name>
        <filename>qregularexpression.html</filename>
        <member kind="enum">
            <name>PatternOption</name>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoPatternOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaseInsensitiveOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DotMatchesEverythingOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MultilineOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtendedPatternSyntaxOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvertedGreedinessOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontCaptureOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UseUnicodePropertiesOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OptimizeOnFirstUsageOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontAutomaticallyOptimizeOption">
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRegularExpression::PatternOption">
            <name>PatternOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PatternOptions</type>
            <name>patternOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>patternOptions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPatternOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>setPatternOptions</anchor>
            <arglist>(PatternOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>QRegularExpression</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>QRegularExpression-2</anchor>
            <arglist>(const QString &amp;pattern, PatternOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>QRegularExpression-3</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>dtor.QRegularExpression</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QRegularExpression &amp;&amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegularExpression &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>pattern</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPattern</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>setPattern</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>patternErrorOffset</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>patternErrorOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>captureCount</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>captureCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>namedCaptureGroups</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>namedCaptureGroups</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>MatchType</name>
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalMatch">
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PartialPreferCompleteMatch">
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PartialPreferFirstMatch">
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoMatch">
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MatchOption</name>
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoMatchOption">
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchoredMatchOption">
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontCheckSubjectStringMatchOption">
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRegularExpression::MatchOption">
            <name>MatchOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>match</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QString &amp;subject, int offset, MatchType matchType, MatchOptions matchOptions) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>match</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>match-2</anchor>
            <arglist>(const QStringRef &amp;subjectRef, int offset, MatchType matchType, MatchOptions matchOptions) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator</type>
            <name>globalMatch</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>globalMatch</anchor>
            <arglist>(const QString &amp;subject, int offset, MatchType matchType, MatchOptions matchOptions) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator</type>
            <name>globalMatch</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>globalMatch-2</anchor>
            <arglist>(const QStringRef &amp;subjectRef, int offset, MatchType matchType, MatchOptions matchOptions) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>optimize</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>optimize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>escape</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>escape</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRegularExpression &amp;re) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRegularExpression &amp;re) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegularExpressionMatch</name>
        <filename>qregularexpressionmatch.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>QRegularExpressionMatch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRegularExpressionMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>dtor.QRegularExpressionMatch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>QRegularExpressionMatch-2</anchor>
            <arglist>(const QRegularExpressionMatch &amp;match)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QRegularExpressionMatch &amp;match)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QRegularExpressionMatch &amp;&amp;match)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegularExpressionMatch &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>regularExpression</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>regularExpression</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::MatchType</type>
            <name>matchType</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>matchType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::MatchOptions</type>
            <name>matchOptions</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>matchOptions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>hasMatch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPartialMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>hasPartialMatch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastCapturedIndex</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>lastCapturedIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>captured</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>captured</anchor>
            <arglist>(int nth) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>capturedRef</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedRef</anchor>
            <arglist>(int nth) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>captured</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>captured-2</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>capturedRef</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedRef-2</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>capturedTexts</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedTexts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capturedStart</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedStart</anchor>
            <arglist>(int nth) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capturedLength</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedLength</anchor>
            <arglist>(int nth) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capturedEnd</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedEnd</anchor>
            <arglist>(int nth) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capturedStart</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedStart-2</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capturedLength</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedLength-2</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capturedEnd</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedEnd-2</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegularExpressionMatchIterator</name>
        <filename>qregularexpressionmatchiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatchIterator</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>QRegularExpressionMatchIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRegularExpressionMatchIterator</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>dtor.QRegularExpressionMatchIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatchIterator</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>QRegularExpressionMatchIterator-2</anchor>
            <arglist>(const QRegularExpressionMatchIterator &amp;iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QRegularExpressionMatchIterator &amp;iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QRegularExpressionMatchIterator &amp;&amp;iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegularExpressionMatchIterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>next</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>peekNext</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>regularExpression</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>regularExpression</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::MatchType</type>
            <name>matchType</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>matchType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::MatchOptions</type>
            <name>matchOptions</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>matchOptions</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScopedPointer</name>
        <filename>qscopedpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedPointer</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>QScopedPointer</anchor>
            <arglist>(T *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScopedPointer</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>dtor.QScopedPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator bool</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>(T *other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>take</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>take</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QScopedPointer&lt;T, Cleanup&gt; &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScopedArrayPointer</name>
        <filename>qscopedarraypointer.html</filename>
        <base>QScopedPointer</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedArrayPointer</name>
            <anchorfile>qscopedarraypointer.html</anchorfile>
            <anchor>QScopedArrayPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qscopedarraypointer.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qscopedarraypointer.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScopedValueRollback</name>
        <filename>qscopedvaluerollback.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedValueRollback</name>
            <anchorfile>qscopedvaluerollback.html</anchorfile>
            <anchor>QScopedValueRollback</anchor>
            <arglist>(T &amp;var)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedValueRollback</name>
            <anchorfile>qscopedvaluerollback.html</anchorfile>
            <anchor>QScopedValueRollback-2</anchor>
            <arglist>(T &amp;var, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScopedValueRollback</name>
            <anchorfile>qscopedvaluerollback.html</anchorfile>
            <anchor>dtor.QScopedValueRollback</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commit</name>
            <anchorfile>qscopedvaluerollback.html</anchorfile>
            <anchor>commit</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSet</name>
        <filename>qset.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSet</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>QSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSet</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>QSet-2</anchor>
            <arglist>(std::initializer_list&lt;T&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSet</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>QSet-3</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSet</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>QSet-4</anchor>
            <arglist>(QSet &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QSet&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const</arglist>
        </member>
        <class>QSet::iterator</class>
        <class>QSet::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>find</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>find</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constFind</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>unite</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>intersect</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>intersect</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>subtract</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>subtract</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator|=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator|=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-7c-eq-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-and-eq-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator--eq-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator|</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator&amp;</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator-</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>toList</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>toList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSet&lt;T&gt;</type>
            <name>fromList</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>fromList</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSet::iterator</name>
        <filename>qset-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>iterator-3</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator+</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator-</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSet::const_iterator</name>
        <filename>qset-const-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>const_iterator-4</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableSetIterator</name>
        <filename>qmutablesetiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableSetIterator</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>QMutableSetIterator</anchor>
            <arglist>(QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableSetIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>previous</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSharedData</name>
        <filename>qshareddata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedData</name>
            <anchorfile>qshareddata.html</anchorfile>
            <anchor>QSharedData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedData</name>
            <anchorfile>qshareddata.html</anchorfile>
            <anchor>QSharedData-2</anchor>
            <arglist>(const QSharedData &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSharedDataPointer</name>
        <filename>qshareddatapointer.html</filename>
        <member kind="typedef" type="">
            <name>Type</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>Type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>detach</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>detach</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-2a-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator--gt-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator T *</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-T--2a</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator const T *</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-const-T--2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>data</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSharedDataPointer&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSharedDataPointer&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>dtor.QSharedDataPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer-2</anchor>
            <arglist>(T *sharedData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer-3</anchor>
            <arglist>(const QSharedDataPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSharedDataPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedDataPointer &amp;</type>
            <name>operator=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(T *sharedData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer-4</anchor>
            <arglist>(QSharedDataPointer &amp;&amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(QSharedDataPointer&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSharedDataPointer &amp;other)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>T *</type>
            <name>clone</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QExplicitlySharedDataPointer</name>
        <filename>qexplicitlyshareddatapointer.html</filename>
        <member kind="typedef" type="">
            <name>Type</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>Type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator--gt-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>detach</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>detach</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator bool</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const T *ptr) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const T *ptr) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>dtor.QExplicitlySharedDataPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer-2</anchor>
            <arglist>(T *sharedData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer-3</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer-4</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;X&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QExplicitlySharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QExplicitlySharedDataPointer &amp;</type>
            <name>operator=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(T *sharedData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer-5</anchor>
            <arglist>(QExplicitlySharedDataPointer &amp;&amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QExplicitlySharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QExplicitlySharedDataPointer &amp;other)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>T *</type>
            <name>clone</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSharedPointer</name>
        <filename>qsharedpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator bool</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-2</anchor>
            <arglist>(T *ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-3</anchor>
            <arglist>(T *ptr, Deleter deleter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-4</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-5</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>dtor.QSharedPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;T&gt;</type>
            <name>toWeakRef</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>toWeakRef</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>reset-2</anchor>
            <arglist>(T *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>reset-3</anchor>
            <arglist>(T *t, Deleter deleter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>staticCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>staticCast</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>dynamicCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>dynamicCast</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>constCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>constCast</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>objectCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>objectCast</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>create</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>create</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>create-2</anchor>
            <arglist>(... )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWeakPointer</name>
        <filename>qweakpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator bool</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWeakPointer</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>QWeakPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWeakPointer</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>QWeakPointer-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWeakPointer</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>QWeakPointer-3</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWeakPointer</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>dtor.QWeakPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;T&gt;</type>
            <name>operator=</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;T&gt;</type>
            <name>operator=</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWeakPointer</name>
            <anchorfile>qweakpointer-obsolete.html</anchorfile>
            <anchor>QWeakPointer-4</anchor>
            <arglist>(const QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;T&gt;</type>
            <name>operator=</name>
            <anchorfile>qweakpointer-obsolete.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(const QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>toStrongRef</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>toStrongRef</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>lock</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEnableSharedFromThis</name>
        <filename>qenablesharedfromthis.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>sharedFromThis</name>
            <anchorfile>qenablesharedfromthis.html</anchorfile>
            <anchor>sharedFromThis</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;const T&gt;</type>
            <name>sharedFromThis</name>
            <anchorfile>qenablesharedfromthis.html</anchorfile>
            <anchor>sharedFromThis-2</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSize</name>
        <filename>qsize.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSize</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>QSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSize</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>QSize-2</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>transpose</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>transpose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>transposed</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(int width, int height, Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>scale-2</anchor>
            <arglist>(const QSize &amp;size, Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>scaled</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>scaled</anchor>
            <arglist>(int width, int height, Qt::AspectRatioMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>scaled</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>scaled-2</anchor>
            <arglist>(const QSize &amp;s, Qt::AspectRatioMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>expandedTo</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>expandedTo</anchor>
            <arglist>(const QSize &amp;otherSize) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>boundedTo</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>boundedTo</anchor>
            <arglist>(const QSize &amp;otherSize) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>rwidth</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>rwidth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>rheight</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>rheight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize &amp;</type>
            <name>operator+=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize &amp;</type>
            <name>operator-=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize &amp;</type>
            <name>operator*=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize &amp;</type>
            <name>operator/=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSizeF</name>
        <filename>qsizef.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizeF</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>QSizeF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizeF</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>QSizeF-2</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizeF</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>QSizeF-3</anchor>
            <arglist>(qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>transpose</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>transpose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>transposed</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal width, qreal height, Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>scale-2</anchor>
            <arglist>(const QSizeF &amp;size, Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>scaled</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>scaled</anchor>
            <arglist>(qreal width, qreal height, Qt::AspectRatioMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>scaled</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>scaled-2</anchor>
            <arglist>(const QSizeF &amp;s, Qt::AspectRatioMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>expandedTo</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>expandedTo</anchor>
            <arglist>(const QSizeF &amp;otherSize) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>boundedTo</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>boundedTo</anchor>
            <arglist>(const QSizeF &amp;otherSize) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal &amp;</type>
            <name>rwidth</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>rwidth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal &amp;</type>
            <name>rheight</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>rheight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF &amp;</type>
            <name>operator*=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF &amp;</type>
            <name>operator/=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>toSize</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>toSize</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStack</name>
        <filename>qstack.html</filename>
        <base>QVector</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStack</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>QStack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStack</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>dtor.QStack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QStack&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>push</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>pop</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>pop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>top</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>top</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>top</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>top-2</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLatin1String</name>
        <filename>qlatin1string.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1String</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>QLatin1String</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1String</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>QLatin1String-2</anchor>
            <arglist>(const char *str, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1String</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>QLatin1String-3</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>latin1</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>latin1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>data</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-lt-2</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-gt-2</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-lt-eq-2</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-gt-eq-2</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-eq-eq-3</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-not-eq-3</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-lt-3</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-gt-3</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-lt-eq-3</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1string.html</anchorfile>
            <anchor>operator-gt-eq-3</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QString</name>
        <filename>qstring.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-2</anchor>
            <arglist>(const QChar *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-3</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-4</anchor>
            <arglist>(int size, QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-5</anchor>
            <arglist>(QLatin1String str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-6</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>dtor.QString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-8</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-4</anchor>
            <arglist>(QLatin1String str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-7</anchor>
            <arglist>(QString &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QString &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count-6</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>fill</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(QChar ch, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>unicode</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>unicode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar *</type>
            <name>data</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>data</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>constData</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar</type>
            <name>at</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar</type>
            <name>operator[]</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCharRef</type>
            <name>operator[]</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar</type>
            <name>operator[]</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-5b-5d-4</anchor>
            <arglist>(uint position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCharRef</type>
            <name>operator[]</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-5b-5d-3</anchor>
            <arglist>(uint position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-14</anchor>
            <arglist>(qlonglong a, int fieldWidth, int base, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-15</anchor>
            <arglist>(qulonglong a, int fieldWidth, int base, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-12</anchor>
            <arglist>(long a, int fieldWidth, int base, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-13</anchor>
            <arglist>(ulong a, int fieldWidth, int base, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-10</anchor>
            <arglist>(int a, int fieldWidth, int base, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-11</anchor>
            <arglist>(uint a, int fieldWidth, int base, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-16</anchor>
            <arglist>(short a, int fieldWidth, int base, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-17</anchor>
            <arglist>(ushort a, int fieldWidth, int base, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-20</anchor>
            <arglist>(double a, int fieldWidth, char format, int precision, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-19</anchor>
            <arglist>(char a, int fieldWidth, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-18</anchor>
            <arglist>(QChar a, int fieldWidth, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg</anchor>
            <arglist>(const QString &amp;a, int fieldWidth, QChar fillChar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-2</anchor>
            <arglist>(const QString &amp;a1, const QString &amp;a2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-3</anchor>
            <arglist>(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-4</anchor>
            <arglist>(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3, const QString &amp;a4) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-5</anchor>
            <arglist>(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3, const QString &amp;a4, const QString &amp;a5) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-6</anchor>
            <arglist>(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3, const QString &amp;a4, const QString &amp;a5, const QString &amp;a6) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-7</anchor>
            <arglist>(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3, const QString &amp;a4, const QString &amp;a5, const QString &amp;a6, const QString &amp;a7) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-8</anchor>
            <arglist>(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3, const QString &amp;a4, const QString &amp;a5, const QString &amp;a6, const QString &amp;a7, const QString &amp;a8) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-9</anchor>
            <arglist>(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3, const QString &amp;a4, const QString &amp;a5, const QString &amp;a6, const QString &amp;a7, const QString &amp;a8, const QString &amp;a9) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>vsprintf</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>vsprintf</anchor>
            <arglist>(const char *cformat, va_list ap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>sprintf</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>sprintf</anchor>
            <arglist>(const char *cformat, ... )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>vasprintf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>vasprintf</anchor>
            <arglist>(const char *cformat, va_list ap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>asprintf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>asprintf</anchor>
            <arglist>(const char *cformat, ... )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-3</anchor>
            <arglist>(QChar ch, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const QString &amp;str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-2</anchor>
            <arglist>(QLatin1String str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-4</anchor>
            <arglist>(const QStringRef &amp;str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-3</anchor>
            <arglist>(QChar ch, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const QString &amp;str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(QLatin1String str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-4</anchor>
            <arglist>(const QStringRef &amp;str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-4</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(QLatin1String str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(const QStringRef &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count-3</anchor>
            <arglist>(const QStringRef &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-5</anchor>
            <arglist>(const QRegExp &amp;rx, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-5</anchor>
            <arglist>(const QRegExp &amp;rx, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-5</anchor>
            <arglist>(const QRegExp &amp;rx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count-4</anchor>
            <arglist>(const QRegExp &amp;rx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-6</anchor>
            <arglist>(QRegExp &amp;rx, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-6</anchor>
            <arglist>(QRegExp &amp;rx, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-6</anchor>
            <arglist>(QRegExp &amp;rx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-7</anchor>
            <arglist>(const QRegularExpression &amp;re, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-8</anchor>
            <arglist>(const QRegularExpression &amp;re, int from, QRegularExpressionMatch *rmatch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-7</anchor>
            <arglist>(const QRegularExpression &amp;re, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-8</anchor>
            <arglist>(const QRegularExpression &amp;re, int from, QRegularExpressionMatch *rmatch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-7</anchor>
            <arglist>(const QRegularExpression &amp;re) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-8</anchor>
            <arglist>(const QRegularExpression &amp;re, QRegularExpressionMatch *match) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count-5</anchor>
            <arglist>(const QRegularExpression &amp;re) const</arglist>
        </member>
        <member kind="enum">
            <name>SectionFlag</name>
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SectionDefault">
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SectionSkipEmpty">
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SectionIncludeLeadingSep">
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SectionIncludeTrailingSep">
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SectionCaseInsensitiveSeps">
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QString::SectionFlag">
            <name>SectionFlags</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>section</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>section</anchor>
            <arglist>(QChar sep, int start, int end, SectionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>section</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>section-2</anchor>
            <arglist>(const QString &amp;sep, int start, int end, SectionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>section</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>section-3</anchor>
            <arglist>(const QRegExp &amp;reg, int start, int end, SectionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>section</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>section-4</anchor>
            <arglist>(const QRegularExpression &amp;re, int start, int end, SectionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>left</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>right</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>mid</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(int position, int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>leftRef</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>leftRef</anchor>
            <arglist>(int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>rightRef</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>rightRef</anchor>
            <arglist>(int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>midRef</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>midRef</anchor>
            <arglist>(int position, int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(const QString &amp;s, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>startsWith-4</anchor>
            <arglist>(const QStringRef &amp;s, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>startsWith-2</anchor>
            <arglist>(QLatin1String s, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>startsWith-3</anchor>
            <arglist>(QChar c, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(const QString &amp;s, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>endsWith-2</anchor>
            <arglist>(const QStringRef &amp;s, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>endsWith-3</anchor>
            <arglist>(QLatin1String s, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>endsWith-4</anchor>
            <arglist>(QChar c, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>leftJustified</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>leftJustified</anchor>
            <arglist>(int width, QChar fill, bool truncate) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>rightJustified</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>rightJustified</anchor>
            <arglist>(int width, QChar fill, bool truncate) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toLower</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLower</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUpper</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUpper</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCaseFolded</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toCaseFolded</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>trimmed</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>trimmed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>simplified</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>simplified</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toHtmlEscaped</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toHtmlEscaped</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(int position, QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(int position, const QChar *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int position, const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(int position, QLatin1String str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-7</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-3</anchor>
            <arglist>(const QChar *str, int len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(const QStringRef &amp;reference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-4</anchor>
            <arglist>(QLatin1String str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-5</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-2</anchor>
            <arglist>(QLatin1String str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-7</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-5</anchor>
            <arglist>(const QStringRef &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(QLatin1String str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(int position, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove-3</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-3</anchor>
            <arglist>(int position, int n, QChar after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-2</anchor>
            <arglist>(int position, int n, const QChar *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int position, int n, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-7</anchor>
            <arglist>(QChar before, QChar after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-5</anchor>
            <arglist>(const QChar *before, int blen, const QChar *after, int alen, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-8</anchor>
            <arglist>(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-9</anchor>
            <arglist>(QLatin1String before, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-10</anchor>
            <arglist>(const QString &amp;before, QLatin1String after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-4</anchor>
            <arglist>(const QString &amp;before, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-6</anchor>
            <arglist>(QChar ch, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-11</anchor>
            <arglist>(QChar c, QLatin1String after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-12</anchor>
            <arglist>(const QRegExp &amp;rx, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove-4</anchor>
            <arglist>(const QRegExp &amp;rx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-13</anchor>
            <arglist>(const QRegularExpression &amp;re, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove-5</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="enum">
            <name>SplitBehavior</name>
            <anchor>SplitBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeepEmptyParts">
            <anchor>SplitBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SkipEmptyParts">
            <anchor>SplitBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>split</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>split</anchor>
            <arglist>(const QString &amp;sep, SplitBehavior behavior, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QStringRef&gt;</type>
            <name>splitRef</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>splitRef</anchor>
            <arglist>(const QString &amp;sep, SplitBehavior behavior, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>split</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>split-2</anchor>
            <arglist>(QChar sep, SplitBehavior behavior, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QStringRef&gt;</type>
            <name>splitRef</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>splitRef-2</anchor>
            <arglist>(QChar sep, SplitBehavior behavior, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>split</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>split-3</anchor>
            <arglist>(const QRegExp &amp;rx, SplitBehavior behavior) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QStringRef&gt;</type>
            <name>splitRef</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>splitRef-3</anchor>
            <arglist>(const QRegExp &amp;rx, SplitBehavior behavior) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>split</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>split-4</anchor>
            <arglist>(const QRegularExpression &amp;re, SplitBehavior behavior) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QStringRef&gt;</type>
            <name>splitRef</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>splitRef-4</anchor>
            <arglist>(const QRegularExpression &amp;re, SplitBehavior behavior) const</arglist>
        </member>
        <member kind="enum">
            <name>NormalizationForm</name>
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalizationForm_D">
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalizationForm_C">
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalizationForm_KD">
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalizationForm_KC">
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>normalized</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>(NormalizationForm mode, QChar::UnicodeVersion version) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>repeated</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>repeated</anchor>
            <arglist>(int times) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const ushort *</type>
            <name>utf16</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>utf16</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLatin1</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLatin1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUtf8</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLocal8Bit</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLocal8Bit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;uint&gt;</type>
            <name>toUcs4</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUcs4</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLatin1</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLatin1</anchor>
            <arglist>(const char *str, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf8</anchor>
            <arglist>(const char *str, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLocal8Bit</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLocal8Bit</anchor>
            <arglist>(const char *str, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLatin1</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLatin1-2</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf8-2</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLocal8Bit</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLocal8Bit-2</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf16</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf16</anchor>
            <arglist>(const ushort *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUcs4</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUcs4</anchor>
            <arglist>(const uint *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromRawData</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromRawData</anchor>
            <arglist>(const QChar *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromAscii</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>fromAscii</anchor>
            <arglist>(const char *str, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromAscii</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>fromAscii-2</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toAscii</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>toAscii</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toWCharArray</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toWCharArray</anchor>
            <arglist>(wchar_t *array) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromWCharArray</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromWCharArray</anchor>
            <arglist>(const wchar_t *string, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setRawData</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setRawData</anchor>
            <arglist>(const QChar *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setUnicode</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setUnicode</anchor>
            <arglist>(const QChar *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setUtf16</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setUtf16</anchor>
            <arglist>(const ushort *unicode, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-4</anchor>
            <arglist>(const QString &amp;other, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-5</anchor>
            <arglist>(QLatin1String other, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QString &amp;s1, const QString &amp;s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-2</anchor>
            <arglist>(const QString &amp;s1, QLatin1String s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-3</anchor>
            <arglist>(QLatin1String s1, const QString &amp;s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-6</anchor>
            <arglist>(const QStringRef &amp;ref, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-7</anchor>
            <arglist>(const QString &amp;s1, const QStringRef &amp;s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>localeAwareCompare-4</anchor>
            <arglist>(const QString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>localeAwareCompare</anchor>
            <arglist>(const QString &amp;s1, const QString &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>localeAwareCompare-2</anchor>
            <arglist>(const QStringRef &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>localeAwareCompare-3</anchor>
            <arglist>(const QString &amp;s1, const QStringRef &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-7</anchor>
            <arglist>(short n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-8</anchor>
            <arglist>(ushort n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum</anchor>
            <arglist>(int n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-2</anchor>
            <arglist>(uint n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-3</anchor>
            <arglist>(long n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-4</anchor>
            <arglist>(ulong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-5</anchor>
            <arglist>(qlonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-6</anchor>
            <arglist>(qulonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-10</anchor>
            <arglist>(float n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-9</anchor>
            <arglist>(double n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-4</anchor>
            <arglist>(int n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-5</anchor>
            <arglist>(uint n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number</anchor>
            <arglist>(long n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-3</anchor>
            <arglist>(ulong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-6</anchor>
            <arglist>(qlonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-7</anchor>
            <arglist>(qulonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-2</anchor>
            <arglist>(double n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(QLatin1String other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(QLatin1String other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QLatin1String other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(QLatin1String other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(QLatin1String other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-8</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-9</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-6</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-5</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-7</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-4</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-3</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-6</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-5</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-4</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-3</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-6</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq-3</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-3</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq-3</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-3</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq-3</anchor>
            <arglist>(const char *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-2</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-2</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq-2</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq-2</anchor>
            <arglist>(const QByteArray &amp;other) const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>push_back-2</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>push_front-2</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromStdString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromStdString</anchor>
            <arglist>(const std::string &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::string</type>
            <name>toStdString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toStdString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromStdWString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromStdWString</anchor>
            <arglist>(const std::wstring &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::wstring</type>
            <name>toStdWString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toStdWString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromStdU16String</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromStdU16String</anchor>
            <arglist>(const std::u16string &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::u16string</type>
            <name>toStdU16String</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toStdU16String</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromStdU32String</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromStdU32String</anchor>
            <arglist>(const std::u32string &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::u32string</type>
            <name>toStdU32String</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toStdU32String</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromCFString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromCFString</anchor>
            <arglist>(CFStringRef string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFStringRef</type>
            <name>toCFString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toCFString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromNSString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromNSString</anchor>
            <arglist>(const NSString *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSString *</type>
            <name>toNSString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toNSString</anchor>
            <arglist>() const</arglist>
        </member>
        <class>QString::Null</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRightToLeft</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isRightToLeft</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QString::Null</name>
        <filename>qstring-null.html</filename>
    </compound>
    <compound kind="class">
        <name>QStringRef</name>
        <filename>qstringref.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringRef</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>QStringRef</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringRef</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>QStringRef-2</anchor>
            <arglist>(const QString *string, int position, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringRef</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>QStringRef-3</anchor>
            <arglist>(const QString *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringRef</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>QStringRef-4</anchor>
            <arglist>(const QStringRef &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStringRef</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>dtor.QStringRef</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QString *</type>
            <name>string</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>string</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>position</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef &amp;</type>
            <name>operator=</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QStringRef &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const QString &amp;str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>indexOf-3</anchor>
            <arglist>(QChar ch, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>indexOf-2</anchor>
            <arglist>(QLatin1String str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>indexOf-4</anchor>
            <arglist>(const QStringRef &amp;str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const QString &amp;str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(QChar ch, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>lastIndexOf-3</anchor>
            <arglist>(QLatin1String str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>lastIndexOf-4</anchor>
            <arglist>(const QStringRef &amp;str, int from, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>contains-4</anchor>
            <arglist>(QLatin1String str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(const QStringRef &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>count-3</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>count-4</anchor>
            <arglist>(const QStringRef &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QStringRef&gt;</type>
            <name>split</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>split</anchor>
            <arglist>(const QString &amp;sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QStringRef&gt;</type>
            <name>split</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>split-2</anchor>
            <arglist>(QChar sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>left</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>right</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>mid</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(int position, int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>startsWith-2</anchor>
            <arglist>(QLatin1String str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>startsWith-4</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>startsWith-3</anchor>
            <arglist>(const QStringRef &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>endsWith-3</anchor>
            <arglist>(QLatin1String str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>endsWith-2</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>endsWith-4</anchor>
            <arglist>(const QStringRef &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef &amp;</type>
            <name>operator=</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QString *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>unicode</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>unicode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>data</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>constData</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>begin</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>cbegin</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>end</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>cend</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toAscii</name>
            <anchorfile>qstringref-obsolete.html</anchorfile>
            <anchor>toAscii</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLatin1</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toLatin1</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toUtf8</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toUtf8</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLocal8Bit</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toLocal8Bit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;uint&gt;</type>
            <name>toUcs4</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toUcs4</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>appendTo</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>appendTo</anchor>
            <arglist>(QString *string) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar</type>
            <name>at</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const char *s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const char *s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const char *s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const char *s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const char *s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const char *s) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>compare-4</anchor>
            <arglist>(const QString &amp;other, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>compare-5</anchor>
            <arglist>(const QStringRef &amp;other, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>compare-6</anchor>
            <arglist>(QLatin1String other, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QStringRef &amp;s1, const QString &amp;s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>compare-2</anchor>
            <arglist>(const QStringRef &amp;s1, const QStringRef &amp;s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>compare-3</anchor>
            <arglist>(const QStringRef &amp;s1, QLatin1String s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>localeAwareCompare-3</anchor>
            <arglist>(const QString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>localeAwareCompare-4</anchor>
            <arglist>(const QStringRef &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>localeAwareCompare</anchor>
            <arglist>(const QStringRef &amp;s1, const QString &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>localeAwareCompare-2</anchor>
            <arglist>(const QStringRef &amp;s1, const QStringRef &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>trimmed</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>trimmed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok, int base) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qstringref.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringList</name>
        <filename>qstringlist.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sort</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>removeDuplicates</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>removeDuplicates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>join</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>join</anchor>
            <arglist>(const QString &amp;separator) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>join</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>join-2</anchor>
            <arglist>(QChar separator) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>replaceInStrings</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>replaceInStrings</anchor>
            <arglist>(const QString &amp;before, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter-2</anchor>
            <arglist>(const QRegExp &amp;rx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>replaceInStrings</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>replaceInStrings-2</anchor>
            <arglist>(const QRegExp &amp;rx, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter-3</anchor>
            <arglist>(const QRegularExpression &amp;re) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>replaceInStrings</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>replaceInStrings-3</anchor>
            <arglist>(const QRegularExpression &amp;re, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringList</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringList</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringList-2</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringList</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringList-3</anchor>
            <arglist>(const QList&lt;QString&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringList</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringList-5</anchor>
            <arglist>(QList&lt;QString&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringList</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringList-4</anchor>
            <arglist>(std::initializer_list&lt;QString&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator=</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QList&lt;QString&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator=</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QList&lt;QString&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>operator+</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QStringList &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(const QStringList &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(const QList&lt;QString&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const QRegExp &amp;rx, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const QRegExp &amp;rx, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>indexOf-2</anchor>
            <arglist>(QRegExp &amp;rx, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(QRegExp &amp;rx, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>indexOf-3</anchor>
            <arglist>(const QRegularExpression &amp;re, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>lastIndexOf-3</anchor>
            <arglist>(const QRegularExpression &amp;re, int from) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringMatcher</name>
        <filename>qstringmatcher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher-2</anchor>
            <arglist>(const QString &amp;pattern, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher-3</anchor>
            <arglist>(const QChar *uc, int length, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher-4</anchor>
            <arglist>(const QStringMatcher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>dtor.QStringMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringMatcher &amp;</type>
            <name>operator=</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QStringMatcher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPattern</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>setPattern</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexIn</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>indexIn</anchor>
            <arglist>(const QString &amp;str, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexIn</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>indexIn-2</anchor>
            <arglist>(const QChar *str, int length, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>pattern</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBoundaryFinder</name>
        <filename>qtextboundaryfinder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder-2</anchor>
            <arglist>(const QTextBoundaryFinder &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBoundaryFinder &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextBoundaryFinder &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>dtor.QTextBoundaryFinder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>BoundaryType</name>
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Grapheme">
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Word">
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sentence">
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Line">
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BoundaryReason</name>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotAtBoundary">
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BreakOpportunity">
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StartOfItem">
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndOfItem">
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MandatoryBreak">
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SoftHyphen">
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextBoundaryFinder::BoundaryReason">
            <name>BoundaryReasons</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder-3</anchor>
            <arglist>(BoundaryType type, const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder-4</anchor>
            <arglist>(BoundaryType type, const QChar *chars, int length, unsigned char *buffer, int bufferSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BoundaryType</type>
            <name>type</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>string</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>string</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toStart</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>toStart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toEnd</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>toEnd</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>position</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toNextBoundary</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>toNextBoundary</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toPreviousBoundary</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>toPreviousBoundary</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAtBoundary</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>isAtBoundary</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BoundaryReasons</type>
            <name>boundaryReasons</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>boundaryReasons</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimeLine</name>
        <filename>qtimeline.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>updateInterval</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Direction">
            <name>direction</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>loopCount</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="CurveShape">
            <name>curveShape</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>curveShape-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEasingCurve">
            <name>easingCurve</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotRunning">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Paused">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Running">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Direction</name>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Forward">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Backward">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CurveShape</name>
            <anchor>CurveShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EaseInCurve">
            <anchor>CurveShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EaseOutCurve">
            <anchor>CurveShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EaseInOutCurve">
            <anchor>CurveShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearCurve">
            <anchor>CurveShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SineCurve">
            <anchor>CurveShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CosineCurve">
            <anchor>CurveShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeLine</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>QTimeLine</anchor>
            <arglist>(int duration, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTimeLine</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>dtor.QTimeLine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoopCount</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Direction</type>
            <name>direction</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(Direction direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>duration</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(int duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>startFrame</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>setStartFrame</anchor>
            <arglist>(int frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>endFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>endFrame</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>setEndFrame</anchor>
            <arglist>(int frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameRange</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>setFrameRange</anchor>
            <arglist>(int startFrame, int endFrame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>updateInterval</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpdateInterval</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>(int interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CurveShape</type>
            <name>curveShape</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>curveShape-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurveShape</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>curveShape-prop</anchor>
            <arglist>(CurveShape shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>easingCurve</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEasingCurve</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>(const QEasingCurve &amp;curve)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentFrame</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>currentValue</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameForTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>frameForTime</anchor>
            <arglist>(int msec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qreal</type>
            <name>valueForTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>valueForTime</anchor>
            <arglist>(int msec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggleDirection</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>toggleDirection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>valueChanged</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameChanged</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>frameChanged</anchor>
            <arglist>(int frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QTimeLine::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimeZone</name>
        <filename>qtimezone.html</filename>
        <member kind="enum">
            <name>TimeType</name>
            <anchor>TimeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandardTime">
            <anchor>TimeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DaylightTime">
            <anchor>TimeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GenericTime">
            <anchor>TimeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>NameType</name>
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultName">
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LongName">
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShortName">
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OffsetName">
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QTimeZone::OffsetData</class>
        <member kind="typedef" type="">
            <name>OffsetDataList</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>OffsetDataList-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-2</anchor>
            <arglist>(const QByteArray &amp;ianaId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-3</anchor>
            <arglist>(int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-4</anchor>
            <arglist>(const QByteArray &amp;ianaId, int offsetSeconds, const QString &amp;name, const QString &amp;abbreviation, QLocale::Country country, const QString &amp;comment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-5</anchor>
            <arglist>(const QTimeZone &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>dtor.QTimeZone</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone &amp;</type>
            <name>operator=</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTimeZone &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone &amp;</type>
            <name>operator=</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QTimeZone &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QTimeZone &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTimeZone &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTimeZone &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>id</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::Country</type>
            <name>country</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>country</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>comment</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>comment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>displayName</anchor>
            <arglist>(const QDateTime &amp;atDateTime, QTimeZone::NameType nameType, const QLocale &amp;locale) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>displayName-2</anchor>
            <arglist>(QTimeZone::TimeType timeType, QTimeZone::NameType nameType, const QLocale &amp;locale) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>abbreviation</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>abbreviation</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>offsetFromUtc</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>offsetFromUtc</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>standardTimeOffset</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>standardTimeOffset</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daylightTimeOffset</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>daylightTimeOffset</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasDaylightTime</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>hasDaylightTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDaylightTime</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>isDaylightTime</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OffsetData</type>
            <name>offsetData</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>offsetData</anchor>
            <arglist>(const QDateTime &amp;forDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasTransitions</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>hasTransitions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OffsetData</type>
            <name>nextTransition</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>nextTransition</anchor>
            <arglist>(const QDateTime &amp;afterDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OffsetData</type>
            <name>previousTransition</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>previousTransition</anchor>
            <arglist>(const QDateTime &amp;beforeDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OffsetDataList</type>
            <name>transitions</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>transitions</anchor>
            <arglist>(const QDateTime &amp;fromDateTime, const QDateTime &amp;toDateTime) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>systemTimeZoneId</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>systemTimeZoneId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>systemTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>systemTimeZone</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>utc</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>utc</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTimeZoneIdAvailable</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>isTimeZoneIdAvailable</anchor>
            <arglist>(const QByteArray &amp;ianaId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>availableTimeZoneIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>availableTimeZoneIds</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>availableTimeZoneIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>availableTimeZoneIds-2</anchor>
            <arglist>(QLocale::Country country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>availableTimeZoneIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>availableTimeZoneIds-3</anchor>
            <arglist>(int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>ianaIdToWindowsId</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>ianaIdToWindowsId</anchor>
            <arglist>(const QByteArray &amp;ianaId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>windowsIdToDefaultIanaId</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>windowsIdToDefaultIanaId</anchor>
            <arglist>(const QByteArray &amp;windowsId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>windowsIdToDefaultIanaId</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>windowsIdToDefaultIanaId-2</anchor>
            <arglist>(const QByteArray &amp;windowsId, QLocale::Country country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>windowsIdToIanaIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>windowsIdToIanaIds</anchor>
            <arglist>(const QByteArray &amp;windowsId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>windowsIdToIanaIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>windowsIdToIanaIds-2</anchor>
            <arglist>(const QByteArray &amp;windowsId, QLocale::Country country)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimeZone::OffsetData</name>
        <filename>qtimezone-offsetdata.html</filename>
    </compound>
    <compound kind="class">
        <name>QVarLengthArray</name>
        <filename>qvarlengtharray.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray-2</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray-3</anchor>
            <arglist>(std::initializer_list&lt;T&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>dtor.QVarLengthArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(std::initializer_list&lt;T&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>first-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>last-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const T &amp;value, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const T &amp;value, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>at</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(int i, const T &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(const T *buf, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(int i, int count, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(int i, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>data</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(const_iterator before, int count, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(const_iterator before, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>erase-2</anchor>
            <arglist>(const_iterator begin, const_iterator end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(const_iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>front</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>front</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>front-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>back-2</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVector</name>
        <filename>qvector.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>QVector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>QVector-2</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>QVector-3</anchor>
            <arglist>(int size, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>QVector-4</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>dtor.QVector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>QVector-5</anchor>
            <arglist>(QVector&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt;</type>
            <name>operator=</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QVector&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QVector&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>QVector-6</anchor>
            <arglist>(std::initializer_list&lt;T&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>data</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>at</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(int i, int count, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(int i, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeFirst</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>takeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeLast</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>takeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt; &amp;</type>
            <name>fill</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(const T &amp;value, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const T &amp;value, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const T &amp;value, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAt</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>removeAll</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>removeAll</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeOne</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>removeOne</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeAt</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(iterator before, int count, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(iterator before, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>erase-2</anchor>
            <arglist>(iterator begin, iterator end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>first-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>last-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt;</type>
            <name>mid</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(int pos, int length) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(int i, const T &amp;defaultValue) const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_front</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>front</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reference</type>
            <name>front</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>front-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>reference</type>
            <name>back</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reference</type>
            <name>back</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>back-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>toList</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>toList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector&lt;T&gt;</type>
            <name>fromList</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>fromList</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector&lt;T&gt;</type>
            <name>fromStdVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>fromStdVector</anchor>
            <arglist>(const std::vector&lt;T&gt; &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::vector&lt;T&gt;</type>
            <name>toStdVector</name>
            <anchorfile>qvector.html</anchorfile>
            <anchor>toStdVector</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamAttribute</name>
        <filename>qxmlstreamattribute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttribute</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>QXmlStreamAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttribute</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>QXmlStreamAttribute-2</anchor>
            <arglist>(const QString &amp;qualifiedName, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttribute</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>QXmlStreamAttribute-3</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttribute</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>QXmlStreamAttribute-4</anchor>
            <arglist>(const QXmlStreamAttribute &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamAttribute &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlStreamAttribute &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlStreamAttribute</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>dtor.QXmlStreamAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>namespaceUri</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>namespaceUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>name</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>qualifiedName</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>qualifiedName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>prefix</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>prefix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>value</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDefault</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>isDefault</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlStreamAttribute &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlStreamAttribute &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamAttributes</name>
        <filename>qxmlstreamattributes.html</filename>
        <base>QVector</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttributes</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>QXmlStreamAttributes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>value</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>value</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(const QString &amp;namespaceUri, QLatin1String name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>value</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>value-3</anchor>
            <arglist>(QLatin1String namespaceUri, QLatin1String name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>value</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>value-4</anchor>
            <arglist>(const QString &amp;qualifiedName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>value</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>value-5</anchor>
            <arglist>(QLatin1String qualifiedName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(const QString &amp;qualifiedName, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>hasAttribute</anchor>
            <arglist>(const QString &amp;qualifiedName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>hasAttribute-2</anchor>
            <arglist>(QLatin1String qualifiedName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>hasAttribute-3</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamNamespaceDeclaration</name>
        <filename>qxmlstreamnamespacedeclaration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamNamespaceDeclaration</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>QXmlStreamNamespaceDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamNamespaceDeclaration</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>QXmlStreamNamespaceDeclaration-2</anchor>
            <arglist>(const QXmlStreamNamespaceDeclaration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamNamespaceDeclaration</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>QXmlStreamNamespaceDeclaration-3</anchor>
            <arglist>(const QString &amp;prefix, const QString &amp;namespaceUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlStreamNamespaceDeclaration</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>dtor.QXmlStreamNamespaceDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamNamespaceDeclaration &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlStreamNamespaceDeclaration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>prefix</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>prefix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>namespaceUri</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>namespaceUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlStreamNamespaceDeclaration &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlStreamNamespaceDeclaration &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamNotationDeclaration</name>
        <filename>qxmlstreamnotationdeclaration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamNotationDeclaration</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>QXmlStreamNotationDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlStreamNotationDeclaration</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>dtor.QXmlStreamNotationDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamNotationDeclaration</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>QXmlStreamNotationDeclaration-2</anchor>
            <arglist>(const QXmlStreamNotationDeclaration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamNotationDeclaration &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlStreamNotationDeclaration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>name</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>systemId</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>systemId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>publicId</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>publicId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlStreamNotationDeclaration &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlStreamNotationDeclaration &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamEntityDeclaration</name>
        <filename>qxmlstreamentitydeclaration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamEntityDeclaration</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>QXmlStreamEntityDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlStreamEntityDeclaration</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>dtor.QXmlStreamEntityDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamEntityDeclaration</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>QXmlStreamEntityDeclaration-2</anchor>
            <arglist>(const QXmlStreamEntityDeclaration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamEntityDeclaration &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlStreamEntityDeclaration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>name</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>notationName</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>notationName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>systemId</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>systemId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>publicId</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>publicId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>value</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlStreamEntityDeclaration &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlStreamEntityDeclaration &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamEntityResolver</name>
        <filename>qxmlstreamentityresolver.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QXmlStreamEntityResolver</name>
            <anchorfile>qxmlstreamentityresolver.html</anchorfile>
            <anchor>dtor.QXmlStreamEntityResolver</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>resolveUndeclaredEntity</name>
            <anchorfile>qxmlstreamentityresolver.html</anchorfile>
            <anchor>resolveUndeclaredEntity</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamReader</name>
        <filename>qxmlstreamreader.html</filename>
        <member kind="property" type="bool">
            <name>namespaceProcessing</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceProcessing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TokenType</name>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoToken">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StartDocument">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndDocument">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StartElement">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndElement">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Characters">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Comment">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DTD">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EntityReference">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProcessingInstruction">
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader-3</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader-4</anchor>
            <arglist>(const QString &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader-5</anchor>
            <arglist>(const char *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>dtor.QXmlStreamReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addData</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addData-2</anchor>
            <arglist>(const QString &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addData-3</anchor>
            <arglist>(const char *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TokenType</type>
            <name>readNext</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>readNext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>readNextStartElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>readNextStartElement</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>skipCurrentElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>skipCurrentElement</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TokenType</type>
            <name>tokenType</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>tokenType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tokenString</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>tokenString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNamespaceProcessing</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceProcessing-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>namespaceProcessing</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceProcessing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStartDocument</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isStartDocument</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEndDocument</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isEndDocument</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStartElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isStartElement</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEndElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isEndElement</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCharacters</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isCharacters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWhitespace</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isWhitespace</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCDATA</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isCDATA</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isComment</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isComment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDTD</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isDTD</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEntityReference</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isEntityReference</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isProcessingInstruction</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isProcessingInstruction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStandaloneDocument</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isStandaloneDocument</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>documentVersion</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>documentVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>documentEncoding</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>documentEncoding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>lineNumber</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>lineNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>columnNumber</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>columnNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>characterOffset</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>characterOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamAttributes</type>
            <name>attributes</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>ReadElementTextBehaviour</name>
            <anchor>ReadElementTextBehaviour-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ErrorOnUnexpectedElement">
            <anchor>ReadElementTextBehaviour-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncludeChildElements">
            <anchor>ReadElementTextBehaviour-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SkipChildElements">
            <anchor>ReadElementTextBehaviour-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readElementText</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>readElementText</anchor>
            <arglist>(ReadElementTextBehaviour behaviour)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>name</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>namespaceUri</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>qualifiedName</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>qualifiedName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>prefix</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>prefix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>processingInstructionTarget</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>processingInstructionTarget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>processingInstructionData</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>processingInstructionData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>text</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamNamespaceDeclarations</type>
            <name>namespaceDeclarations</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceDeclarations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addExtraNamespaceDeclaration</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addExtraNamespaceDeclaration</anchor>
            <arglist>(const QXmlStreamNamespaceDeclaration &amp;extraNamespaceDeclaration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addExtraNamespaceDeclarations</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addExtraNamespaceDeclarations</anchor>
            <arglist>(const QXmlStreamNamespaceDeclarations &amp;extraNamespaceDeclarations)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamNotationDeclarations</type>
            <name>notationDeclarations</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>notationDeclarations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamEntityDeclarations</type>
            <name>entityDeclarations</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>entityDeclarations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>dtdName</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>dtdName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>dtdPublicId</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>dtdPublicId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringRef</type>
            <name>dtdSystemId</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>dtdSystemId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnexpectedElementError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotWellFormedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrematureEndOfDocumentError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>raiseError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>raiseError</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>hasError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntityResolver</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>setEntityResolver</anchor>
            <arglist>(QXmlStreamEntityResolver *resolver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamEntityResolver *</type>
            <name>entityResolver</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>entityResolver</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamWriter</name>
        <filename>qxmlstreamwriter.html</filename>
        <member kind="property" type="bool">
            <name>autoFormatting</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormatting-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>autoFormattingIndent</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormattingIndent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>QXmlStreamWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>QXmlStreamWriter-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>QXmlStreamWriter-3</anchor>
            <arglist>(QByteArray *array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>QXmlStreamWriter-4</anchor>
            <arglist>(QString *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>dtor.QXmlStreamWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(QTextCodec *codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>setCodec-2</anchor>
            <arglist>(const char *codecName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCodec *</type>
            <name>codec</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoFormatting</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormatting-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoFormatting</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormatting-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoFormattingIndent</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormattingIndent-prop</anchor>
            <arglist>(int spacesOrTabs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>autoFormattingIndent</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormattingIndent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeAttribute</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeAttribute-2</anchor>
            <arglist>(const QString &amp;qualifiedName, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeAttribute</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeAttribute</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeAttribute</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeAttribute-3</anchor>
            <arglist>(const QXmlStreamAttribute &amp;attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeAttributes</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeAttributes</anchor>
            <arglist>(const QXmlStreamAttributes &amp;attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeCDATA</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeCDATA</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeCharacters</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeCharacters</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeComment</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeComment</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeDTD</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeDTD</anchor>
            <arglist>(const QString &amp;dtd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEmptyElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEmptyElement-2</anchor>
            <arglist>(const QString &amp;qualifiedName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEmptyElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEmptyElement</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeTextElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeTextElement-2</anchor>
            <arglist>(const QString &amp;qualifiedName, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeTextElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeTextElement</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEndDocument</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEndDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEndElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEndElement</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEntityReference</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEntityReference</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeNamespace</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeNamespace</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeDefaultNamespace</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeDefaultNamespace</anchor>
            <arglist>(const QString &amp;namespaceUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeProcessingInstruction</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeProcessingInstruction</anchor>
            <arglist>(const QString &amp;target, const QString &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartDocument</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartDocument-3</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartDocument</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartDocument</anchor>
            <arglist>(const QString &amp;version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartDocument</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartDocument-2</anchor>
            <arglist>(const QString &amp;version, bool standalone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartElement-2</anchor>
            <arglist>(const QString &amp;qualifiedName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartElement</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeCurrentToken</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeCurrentToken</anchor>
            <arglist>(const QXmlStreamReader &amp;reader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasError</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>hasError</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFutureIterator</name>
        <filename>qfutureiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFutureIterator</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>QFutureIterator</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFutureIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>previous</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLinkedListIterator</name>
        <filename>qlinkedlistiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinkedListIterator</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>QLinkedListIterator</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLinkedListIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QLinkedList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>previous</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qlinkedlistiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QListIterator</name>
        <filename>qlistiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QListIterator</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>QListIterator</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>previous</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSetIterator</name>
        <filename>qsetiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSetIterator</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>QSetIterator</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSetIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>previous</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVectorIterator</name>
        <filename>qvectoriterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVectorIterator</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>QVectorIterator</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVectorIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>previous</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qvectoriterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableLinkedListIterator</name>
        <filename>qmutablelinkedlistiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableLinkedListIterator</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>QMutableLinkedListIterator</anchor>
            <arglist>(QLinkedList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableLinkedListIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QLinkedList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>next</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>previous</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablelinkedlistiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableListIterator</name>
        <filename>qmutablelistiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableListIterator</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>QMutableListIterator</anchor>
            <arglist>(QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableListIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>next</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>previous</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableVectorIterator</name>
        <filename>qmutablevectoriterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableVectorIterator</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>QMutableVectorIterator</anchor>
            <arglist>(QVector&lt;T&gt; &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableVectorIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QVector&lt;T&gt; &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>next</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>previous</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablevectoriterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHashIterator</name>
        <filename>qhashiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHashIterator</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>QHashIterator</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHashIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>next</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>peekNext</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>previous</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>peekPrevious</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMapIterator</name>
        <filename>qmapiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMapIterator</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>QMapIterator</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMapIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>next</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>peekNext</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>previous</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>peekPrevious</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableHashIterator</name>
        <filename>qmutablehashiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableHashIterator</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>QMutableHashIterator</anchor>
            <arglist>(QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableHashIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>next</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>peekNext</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>previous</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableMapIterator</name>
        <filename>qmutablemapiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableMapIterator</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>QMutableMapIterator</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMapIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>next</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>peekNext</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>previous</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
    </compound>
</tagfile>
