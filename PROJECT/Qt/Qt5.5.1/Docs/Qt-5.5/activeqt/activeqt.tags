<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAxBase</name>
        <filename>qaxbase.html</filename>
        <member kind="property" type="QString">
            <name>control</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>control-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>PropertyBag</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>PropertyBag-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxBase</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>QAxBase</anchor>
            <arglist>(IUnknown *iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAxBase</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>dtor.QAxBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>control</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>control-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>queryInterface</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>queryInterface</anchor>
            <arglist>(const QUuid &amp;uuid, void **iface) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>dynamicCall</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>dynamicCall</anchor>
            <arglist>(const char *function, const QVariant &amp;var1, const QVariant &amp;var2, const QVariant &amp;var3, const QVariant &amp;var4, const QVariant &amp;var5, const QVariant &amp;var6, const QVariant &amp;var7, const QVariant &amp;var8)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>dynamicCall</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>dynamicCall-3</anchor>
            <arglist>(const char *function, QList&lt;QVariant&gt; &amp;vars)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAxObject *</type>
            <name>querySubObject</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>querySubObject</anchor>
            <arglist>(const char *name, const QVariant &amp;var1, const QVariant &amp;var2, const QVariant &amp;var3, const QVariant &amp;var4, const QVariant &amp;var5, const QVariant &amp;var6, const QVariant &amp;var7, const QVariant &amp;var8)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAxObject *</type>
            <name>querySubObject</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>querySubObject-2</anchor>
            <arglist>(const char *name, QList&lt;QVariant&gt; &amp;vars)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PropertyBag</type>
            <name>propertyBag</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>propertyBag</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyBag</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>setPropertyBag</anchor>
            <arglist>(const PropertyBag &amp;bag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>generateDocumentation</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>generateDocumentation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>propertyWritable</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>propertyWritable</anchor>
            <arglist>(const char *prop) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPropertyWritable</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>setPropertyWritable</anchor>
            <arglist>(const char *prop, bool ok)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>verbs</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>verbs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>asVariant</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>asVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>signal</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>signal</anchor>
            <arglist>(const QString &amp;name, int argc, void *argv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>propertyChanged</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>propertyChanged</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exception</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>exception</anchor>
            <arglist>(int code, const QString &amp;source, const QString &amp;desc, const QString &amp;help)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setControl</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>control-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableMetaObject</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>disableMetaObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableClassInfo</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>disableClassInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableEventSink</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>disableEventSink</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>initialize</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(IUnknown **ptr)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>initializeRemote</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>initializeRemote</anchor>
            <arglist>(IUnknown **ptr)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>initializeLicensed</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>initializeLicensed</anchor>
            <arglist>(IUnknown **ptr)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>initializeActive</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>initializeActive</anchor>
            <arglist>(IUnknown **ptr)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>initializeFromFile</name>
            <anchorfile>qaxbase.html</anchorfile>
            <anchor>initializeFromFile</anchor>
            <arglist>(IUnknown **ptr)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxObject</name>
        <filename>qaxobject.html</filename>
        <base>QObject</base>
        <base>QAxBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxObject</name>
            <anchorfile>qaxobject.html</anchorfile>
            <anchor>QAxObject</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxObject</name>
            <anchorfile>qaxobject.html</anchorfile>
            <anchor>QAxObject-2</anchor>
            <arglist>(const QString &amp;c, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxObject</name>
            <anchorfile>qaxobject.html</anchorfile>
            <anchor>QAxObject-3</anchor>
            <arglist>(IUnknown *iface, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxObject</name>
            <anchorfile>qaxobject.html</anchorfile>
            <anchor>dtor.QAxObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>doVerb</name>
            <anchorfile>qaxobject.html</anchorfile>
            <anchor>doVerb</anchor>
            <arglist>(const QString &amp;verb)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectNotify</name>
            <anchorfile>qaxobject.html</anchorfile>
            <anchor>connectNotify</anchor>
            <arglist>(const QMetaMethod &amp;signal)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxScriptEngine</name>
        <filename>qaxscriptengine.html</filename>
        <base>QAxObject</base>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uninitialized">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Initialized">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Started">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Connected">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Disconnected">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Closed">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxScriptEngine</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>QAxScriptEngine</anchor>
            <arglist>(const QString &amp;language, QAxScript *script)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxScriptEngine</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>dtor.QAxScriptEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasIntrospection</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>hasIntrospection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scriptLanguage</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>scriptLanguage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(State st)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>queryInterface</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>queryInterface</anchor>
            <arglist>(const QUuid &amp;uuid, void **iface) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>initialize</name>
            <anchorfile>qaxscriptengine.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(IUnknown **ptr)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxScript</name>
        <filename>qaxscript.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>FunctionFlags</name>
            <anchor>FunctionFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FunctionNames">
            <anchor>FunctionFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FunctionSignatures">
            <anchor>FunctionFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxScript</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>QAxScript</anchor>
            <arglist>(const QString &amp;name, QAxScriptManager *manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxScript</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>dtor.QAxScript</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;code, const QString &amp;language)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>functions</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>functions</anchor>
            <arglist>(FunctionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scriptCode</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>scriptCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scriptName</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>scriptName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAxScriptEngine *</type>
            <name>scriptEngine</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>scriptEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>call</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>call</anchor>
            <arglist>(const QString &amp;function, const QVariant &amp;var1, const QVariant &amp;var2, const QVariant &amp;var3, const QVariant &amp;var4, const QVariant &amp;var5, const QVariant &amp;var6, const QVariant &amp;var7, const QVariant &amp;var8)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>call</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>call-2</anchor>
            <arglist>(const QString &amp;function, QList&lt;QVariant&gt; &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>finished-2</anchor>
            <arglist>(const QVariant &amp;result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>finished-3</anchor>
            <arglist>(int code, const QString &amp;source, const QString &amp;description, const QString &amp;help)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(int state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qaxscript.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(int code, const QString &amp;description, int sourcePosition, const QString &amp;sourceText)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxScriptManager</name>
        <filename>qaxscriptmanager.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxScriptManager</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>QAxScriptManager</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxScriptManager</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>dtor.QAxScriptManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addObject</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>addObject</anchor>
            <arglist>(QAxBase *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addObject</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>addObject-2</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>functions</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>functions</anchor>
            <arglist>(QAxScript::FunctionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>scriptNames</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>scriptNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAxScript *</type>
            <name>script</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>script</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAxScript *</type>
            <name>load</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;code, const QString &amp;name, const QString &amp;language)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAxScript *</type>
            <name>load</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(const QString &amp;file, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>call</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>call</anchor>
            <arglist>(const QString &amp;function, const QVariant &amp;var1, const QVariant &amp;var2, const QVariant &amp;var3, const QVariant &amp;var4, const QVariant &amp;var5, const QVariant &amp;var6, const QVariant &amp;var7, const QVariant &amp;var8)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>call</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>call-2</anchor>
            <arglist>(const QString &amp;function, QList&lt;QVariant&gt; &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerEngine</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>registerEngine</anchor>
            <arglist>(const QString &amp;name, const QString &amp;extension, const QString &amp;code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>scriptFileFilter</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>scriptFileFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qaxscriptmanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QAxScript *script, int code, const QString &amp;description, int sourcePosition, const QString &amp;sourceText)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxSelect</name>
        <filename>qaxselect.html</filename>
        <base>QDialog</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxSelect</name>
            <anchorfile>qaxselect.html</anchorfile>
            <anchor>QAxSelect</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxSelect</name>
            <anchorfile>qaxselect.html</anchorfile>
            <anchor>dtor.QAxSelect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>clsid</name>
            <anchorfile>qaxselect.html</anchorfile>
            <anchor>clsid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxWidget</name>
        <filename>qaxwidget.html</filename>
        <base>QWidget</base>
        <base>QAxBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxWidget</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>QAxWidget</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxWidget</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>QAxWidget-2</anchor>
            <arglist>(const QString &amp;c, QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxWidget</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>QAxWidget-3</anchor>
            <arglist>(IUnknown *iface, QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAxWidget</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>dtor.QAxWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>doVerb</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>doVerb</anchor>
            <arglist>(const QString &amp;verb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAxAggregated *</type>
            <name>createAggregate</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>createAggregate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>initialize</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(IUnknown **ptr)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>createHostWindow</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>createHostWindow</anchor>
            <arglist>(bool initialized)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>createHostWindow</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>createHostWindow-2</anchor>
            <arglist>(bool initialized, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>translateKeyEvent</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>translateKeyEvent</anchor>
            <arglist>(int message, int keycode) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectNotify</name>
            <anchorfile>qaxwidget.html</anchorfile>
            <anchor>connectNotify</anchor>
            <arglist>(const QMetaMethod &amp;signal)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxAggregated</name>
        <filename>qaxaggregated.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual long</type>
            <name>queryInterface</name>
            <anchorfile>qaxaggregated.html</anchorfile>
            <anchor>queryInterface</anchor>
            <arglist>(const QUuid &amp;iid, void **iface) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAxAggregated</name>
            <anchorfile>qaxaggregated.html</anchorfile>
            <anchor>dtor.QAxAggregated</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>IUnknown *</type>
            <name>controllingUnknown</name>
            <anchorfile>qaxaggregated.html</anchorfile>
            <anchor>controllingUnknown</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qaxaggregated.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QObject *</type>
            <name>object</name>
            <anchorfile>qaxaggregated.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxBindable</name>
        <filename>qaxbindable.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxBindable</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>QAxBindable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAxBindable</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>dtor.QAxBindable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAxAggregated *</type>
            <name>createAggregate</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>createAggregate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reportError</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>reportError</anchor>
            <arglist>(int code, const QString &amp;src, const QString &amp;desc, const QString &amp;context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>readData</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(QIODevice *source, const QString &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>writeData</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(QIODevice *sink)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>requestPropertyChange</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>requestPropertyChange</anchor>
            <arglist>(const char *property)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>propertyChanged</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>propertyChanged</anchor>
            <arglist>(const char *property)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>IUnknown *</type>
            <name>clientSite</name>
            <anchorfile>qaxbindable.html</anchorfile>
            <anchor>clientSite</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAxFactory</name>
        <filename>qaxfactory.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxFactory</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>QAxFactory</anchor>
            <arglist>(const QUuid &amp;libid, const QUuid &amp;appid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAxFactory</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>dtor.QAxFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>featureList</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>featureList</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QObject *</type>
            <name>createObject</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>createObject</anchor>
            <arglist>(const QString &amp;key) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>(const QString &amp;key) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>createObjectWrapper</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>createObjectWrapper</anchor>
            <arglist>(QObject *object, IDispatch **wrapper)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QUuid</type>
            <name>classID</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>classID</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QUuid</type>
            <name>interfaceID</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>interfaceID</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QUuid</type>
            <name>eventsID</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>eventsID</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QUuid</type>
            <name>typeLibID</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>typeLibID</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QUuid</type>
            <name>appID</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>appID</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>registerClass</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>registerClass</anchor>
            <arglist>(const QString &amp;key, QSettings *settings) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>unregisterClass</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>unregisterClass</anchor>
            <arglist>(const QString &amp;key, QSettings *settings) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validateLicenseKey</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>validateLicenseKey</anchor>
            <arglist>(const QString &amp;key, const QString &amp;licenseKey) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>exposeToSuperClass</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>exposeToSuperClass</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>stayTopLevel</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>stayTopLevel</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasStockEvents</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>hasStockEvents</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isService</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>isService</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>ServerType</name>
            <anchor>ServerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleInstance">
            <anchor>ServerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MultipleInstances">
            <anchor>ServerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isServer</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>isServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>serverDirPath</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>serverDirPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>serverFilePath</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>serverFilePath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>startServer</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>startServer</anchor>
            <arglist>(ServerType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>stopServer</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>stopServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerActiveObject</name>
            <anchorfile>qaxfactory.html</anchorfile>
            <anchor>registerActiveObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
    </compound>
</tagfile>
