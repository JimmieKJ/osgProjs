<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="namespace">
        <name>QTest</name>
        <filename>qtest.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBenchmarkResult</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>setBenchmarkResult</anchor>
            <arglist>(qreal result, QBenchmarkMetric metric)</arglist>
        </member>
        <member kind="enum">
            <name>QBenchmarkMetric</name>
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FramesPerSecond">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BitsPerSecond">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BytesPerSecond">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WalltimeMilliseconds">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CPUTicks">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InstructionReads">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Events">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WalltimeNanoseconds">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BytesAllocated">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CPUMigrations">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CPUCycles">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BusCycles">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StalledCycles">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Instructions">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BranchInstructions">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BranchMisses">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheReferences">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheReads">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheWrites">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CachePrefetches">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheMisses">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheReadMisses">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheWriteMisses">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CachePrefetchMisses">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContextSwitches">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PageFaults">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinorPageFaults">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MajorPageFaults">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignmentFaults">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmulationFaults">
            <anchor>QBenchmarkMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>benchmarkMetricName</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>benchmarkMetricName</anchor>
            <arglist>(QBenchmarkMetric metric)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>benchmarkMetricUnit</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>benchmarkMetricUnit</anchor>
            <arglist>(QBenchmarkMetric metric)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-5</anchor>
            <arglist>(const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-4</anchor>
            <arglist>(const QLatin1String &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-6</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-7</anchor>
            <arglist>(const QTime &amp;time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-8</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-9</anchor>
            <arglist>(const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-10</anchor>
            <arglist>(const QChar &amp;character)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-11</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-12</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-13</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-15</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-16</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-17</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-14</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-18</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="enum">
            <name>TestFailMode</name>
            <anchor>TestFailMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Abort">
            <anchor>TestFailMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Continue">
            <anchor>TestFailMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-21</anchor>
            <arglist>(QSizePolicy::Policy p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-20</anchor>
            <arglist>(QSizePolicy::ControlTypes cts)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-19</anchor>
            <arglist>(QSizePolicy::ControlType ct)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString-22</anchor>
            <arglist>(QSizePolicy sp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toString</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>toHexRepresentation</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>toHexRepresentation</anchor>
            <arglist>(const char *ba, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qExec</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qExec</anchor>
            <arglist>(QObject *testObject, int argc, char **argv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qExec</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qExec-2</anchor>
            <arglist>(QObject *testObject, const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreMessage</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>ignoreMessage</anchor>
            <arglist>(QtMsgType type, const char *message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreMessage</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>ignoreMessage-2</anchor>
            <arglist>(QtMsgType type, const QRegularExpression &amp;messagePattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;QTemporaryDir&gt;</type>
            <name>qExtractTestData</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qExtractTestData</anchor>
            <arglist>(const QString &amp;dirName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>currentAppName</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>currentAppName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>currentTestFunction</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>currentTestFunction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>currentDataTag</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>currentDataTag</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>currentTestFailed</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>currentTestFailed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qSleep</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qSleep</anchor>
            <arglist>(int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addColumn</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>addColumn</anchor>
            <arglist>(const char *name, T *dummy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTestData &amp;</type>
            <name>newRow</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>newRow</anchor>
            <arglist>(const char *dataTag)</arglist>
        </member>
        <member kind="enum">
            <name>AttributeIndex</name>
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Undefined">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Name">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Result">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Tests">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Failures">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Errors">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Type">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Description">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_PropertyValue">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_QTestVersion">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_QtVersion">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_File">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Line">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Metric">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Tag">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Value">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AI_Iterations">
            <anchor>AttributeIndex-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LogElementType</name>
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_Undefined">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_Property">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_Properties">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_Failure">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_Error">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_TestCase">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_TestSuite">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_Benchmark">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LET_SystemError">
            <anchor>LogElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>KeyAction</name>
            <anchor>KeyAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Press">
            <anchor>KeyAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Release">
            <anchor>KeyAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Click">
            <anchor>KeyAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyEvent</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyEvent-4</anchor>
            <arglist>(KeyAction action, QWindow *window, char ascii, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyEvent</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyEvent-3</anchor>
            <arglist>(KeyAction action, QWindow *window, Qt::Key key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyClick</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyClick-3</anchor>
            <arglist>(QWindow *window, Qt::Key key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyClick</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyClick-4</anchor>
            <arglist>(QWindow *window, char key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyRelease</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyRelease-4</anchor>
            <arglist>(QWindow *window, char key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyRelease</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyRelease-3</anchor>
            <arglist>(QWindow *window, Qt::Key key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyPress</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyPress-4</anchor>
            <arglist>(QWindow *window, char key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyPress</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyPress-3</anchor>
            <arglist>(QWindow *window, Qt::Key key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyEvent</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyEvent-2</anchor>
            <arglist>(KeyAction action, QWidget *widget, char ascii, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyEvent</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyEvent</anchor>
            <arglist>(KeyAction action, QWidget *widget, Qt::Key key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyClicks</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyClicks</anchor>
            <arglist>(QWidget *widget, const QString &amp;sequence, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyPress</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyPress-2</anchor>
            <arglist>(QWidget *widget, char key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyRelease</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyRelease-2</anchor>
            <arglist>(QWidget *widget, char key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyClick</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyClick-2</anchor>
            <arglist>(QWidget *widget, char key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyPress</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyPress</anchor>
            <arglist>(QWidget *widget, Qt::Key key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyRelease</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyRelease</anchor>
            <arglist>(QWidget *widget, Qt::Key key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>keyClick</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>keyClick</anchor>
            <arglist>(QWidget *widget, Qt::Key key, Qt::KeyboardModifiers modifier, int delay)</arglist>
        </member>
        <member kind="enum">
            <name>MouseAction</name>
            <anchor>MouseAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MousePress">
            <anchor>MouseAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseRelease">
            <anchor>MouseAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseClick">
            <anchor>MouseAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseDClick">
            <anchor>MouseAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MouseMove">
            <anchor>MouseAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mousePress</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mousePress-2</anchor>
            <arglist>(QWindow *window, Qt::MouseButton button, Qt::KeyboardModifiers stateKey, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseRelease</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mouseRelease-2</anchor>
            <arglist>(QWindow *window, Qt::MouseButton button, Qt::KeyboardModifiers stateKey, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseClick</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mouseClick-2</anchor>
            <arglist>(QWindow *window, Qt::MouseButton button, Qt::KeyboardModifiers stateKey, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseDClick</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mouseDClick-2</anchor>
            <arglist>(QWindow *window, Qt::MouseButton button, Qt::KeyboardModifiers stateKey, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseMove</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mouseMove-2</anchor>
            <arglist>(QWindow *window, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mousePress</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mousePress</anchor>
            <arglist>(QWidget *widget, Qt::MouseButton button, Qt::KeyboardModifiers modifier, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseRelease</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mouseRelease</anchor>
            <arglist>(QWidget *widget, Qt::MouseButton button, Qt::KeyboardModifiers modifier, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseClick</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mouseClick</anchor>
            <arglist>(QWidget *widget, Qt::MouseButton button, Qt::KeyboardModifiers modifier, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseDClick</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mouseDClick</anchor>
            <arglist>(QWidget *widget, Qt::MouseButton button, Qt::KeyboardModifiers modifier, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseMove</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>mouseMove</anchor>
            <arglist>(QWidget *widget, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>qWait</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qWait</anchor>
            <arglist>(int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>qWaitForWindowActive</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qWaitForWindowActive</anchor>
            <arglist>(QWindow *window, int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>qWaitForWindowExposed</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qWaitForWindowExposed</anchor>
            <arglist>(QWindow *window, int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>qWaitForWindowActive</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qWaitForWindowActive-2</anchor>
            <arglist>(QWidget *widget, int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>qWaitForWindowExposed</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>qWaitForWindowExposed-2</anchor>
            <arglist>(QWidget *widget, int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>qWaitForWindowShown</name>
            <anchorfile>qtest-obsolete.html</anchorfile>
            <anchor>qWaitForWindowShown</anchor>
            <arglist>(QWidget *widget, int timeout)</arglist>
        </member>
        <class>QTest::QTouchEventSequence</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence</type>
            <name>touchEvent</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>touchEvent</anchor>
            <arglist>(QWidget *widget, QTouchDevice *device, bool autoCommit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence</type>
            <name>touchEvent</name>
            <anchorfile>qtest.html</anchorfile>
            <anchor>touchEvent-2</anchor>
            <arglist>(QWindow *window, QTouchDevice *device, bool autoCommit)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTest::QTouchEventSequence</name>
        <filename>qtest-qtoucheventsequence.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTouchEventSequence</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>dtor.QTouchEventSequence</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence &amp;</type>
            <name>press</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>press</anchor>
            <arglist>(int touchId, const QPoint &amp;pt, QWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence &amp;</type>
            <name>move</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>move</anchor>
            <arglist>(int touchId, const QPoint &amp;pt, QWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence &amp;</type>
            <name>release</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(int touchId, const QPoint &amp;pt, QWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence &amp;</type>
            <name>stationary</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>stationary</anchor>
            <arglist>(int touchId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence &amp;</type>
            <name>press</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>press-2</anchor>
            <arglist>(int touchId, const QPoint &amp;pt, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence &amp;</type>
            <name>move</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>move-2</anchor>
            <arglist>(int touchId, const QPoint &amp;pt, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEventSequence &amp;</type>
            <name>release</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>release-2</anchor>
            <arglist>(int touchId, const QPoint &amp;pt, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commit</name>
            <anchorfile>qtest-qtoucheventsequence.html</anchorfile>
            <anchor>commit</anchor>
            <arglist>(bool processEvents)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSignalSpy</name>
        <filename>qsignalspy.html</filename>
        <base>QObject</base>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalSpy</name>
            <anchorfile>qsignalspy.html</anchorfile>
            <anchor>QSignalSpy</anchor>
            <arglist>(const QObject *object, const char *signal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalSpy</name>
            <anchorfile>qsignalspy.html</anchorfile>
            <anchor>QSignalSpy-2</anchor>
            <arglist>(const QObject *object, PointerToMemberFunction signal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsignalspy.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>signal</name>
            <anchorfile>qsignalspy.html</anchorfile>
            <anchor>signal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qsignalspy.html</anchorfile>
            <anchor>wait</anchor>
            <arglist>(int timeout)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTestEventList</name>
        <filename>qtesteventlist.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTestEventList</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>QTestEventList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTestEventList</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>QTestEventList-2</anchor>
            <arglist>(const QTestEventList &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTestEventList</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>dtor.QTestEventList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyClick</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addKeyClick</anchor>
            <arglist>(Qt::Key qtKey, Qt::KeyboardModifiers modifiers, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyPress</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addKeyPress</anchor>
            <arglist>(Qt::Key qtKey, Qt::KeyboardModifiers modifiers, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyRelease</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addKeyRelease</anchor>
            <arglist>(Qt::Key qtKey, Qt::KeyboardModifiers modifiers, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyClick</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addKeyClick-2</anchor>
            <arglist>(char ascii, Qt::KeyboardModifiers modifiers, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyPress</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addKeyPress-2</anchor>
            <arglist>(char ascii, Qt::KeyboardModifiers modifiers, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyRelease</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addKeyRelease-2</anchor>
            <arglist>(char ascii, Qt::KeyboardModifiers modifiers, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyClicks</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addKeyClicks</anchor>
            <arglist>(const QString &amp;keys, Qt::KeyboardModifiers modifiers, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMousePress</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addMousePress</anchor>
            <arglist>(Qt::MouseButton button, Qt::KeyboardModifiers modifiers, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMouseRelease</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addMouseRelease</anchor>
            <arglist>(Qt::MouseButton button, Qt::KeyboardModifiers modifiers, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMouseClick</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addMouseClick</anchor>
            <arglist>(Qt::MouseButton button, Qt::KeyboardModifiers modifiers, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMouseDClick</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addMouseDClick</anchor>
            <arglist>(Qt::MouseButton button, Qt::KeyboardModifiers modifiers, QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMouseMove</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addMouseMove</anchor>
            <arglist>(QPoint pos, int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDelay</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>addDelay</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>simulate</name>
            <anchorfile>qtesteventlist.html</anchorfile>
            <anchor>simulate</anchor>
            <arglist>(QWidget *w)</arglist>
        </member>
    </compound>
</tagfile>
