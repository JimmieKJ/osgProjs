<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QJSEngine</name>
        <filename>qjsengine.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSEngine</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>QJSEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSEngine</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>QJSEngine-2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QJSEngine</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>dtor.QJSEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>globalObject</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>globalObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>evaluate</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>evaluate</anchor>
            <arglist>(const QString &amp;program, const QString &amp;fileName, int lineNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>newObject</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>newObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>newArray</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>newArray</anchor>
            <arglist>(uint length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>newQObject</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>newQObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>toScriptValue</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>toScriptValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fromScriptValue</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>fromScriptValue</anchor>
            <arglist>(const QJSValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>collectGarbage</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>collectGarbage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installTranslatorFunctions</name>
            <anchorfile>qjsengine.html</anchorfile>
            <anchor>installTranslatorFunctions</anchor>
            <arglist>(const QJSValue &amp;object)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJSValue</name>
        <filename>qjsvalue.html</filename>
        <member kind="enum">
            <name>SpecialValue</name>
            <anchor>SpecialValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NullValue">
            <anchor>SpecialValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UndefinedValue">
            <anchor>SpecialValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue</anchor>
            <arglist>(SpecialValue value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>dtor.QJSValue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-2</anchor>
            <arglist>(const QJSValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-3</anchor>
            <arglist>(QJSValue &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QJSValue &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-4</anchor>
            <arglist>(bool value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-5</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-6</anchor>
            <arglist>(uint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-7</anchor>
            <arglist>(double value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-8</anchor>
            <arglist>(const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-9</anchor>
            <arglist>(const QLatin1String &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-10</anchor>
            <arglist>(const char *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QJSValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBool</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isBool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNumber</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isString</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndefined</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isUndefined</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVariant</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isQObject</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isQObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isObject</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDate</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isDate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRegExp</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isRegExp</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isArray</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isArray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isError</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toNumber</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>toNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint32</type>
            <name>toInt</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>toUInt</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toBool</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>toBool</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>toVariant</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>toVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>toQObject</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>toQObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>toDateTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>equals</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>equals</anchor>
            <arglist>(const QJSValue &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>strictlyEquals</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>strictlyEquals</anchor>
            <arglist>(const QJSValue &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>prototype</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>prototype</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrototype</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>setPrototype</anchor>
            <arglist>(const QJSValue &amp;prototype)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>property</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>property</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>setProperty</anchor>
            <arglist>(const QString &amp;name, const QJSValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasProperty</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>hasProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasOwnProperty</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>hasOwnProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>property</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>property-2</anchor>
            <arglist>(quint32 arrayIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>setProperty-2</anchor>
            <arglist>(quint32 arrayIndex, const QJSValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>deleteProperty</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>deleteProperty</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCallable</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>isCallable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>call</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>call</anchor>
            <arglist>(const QJSValueList &amp;args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>callWithInstance</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>callWithInstance</anchor>
            <arglist>(const QJSValue &amp;instance, const QJSValueList &amp;args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>callAsConstructor</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>callAsConstructor</anchor>
            <arglist>(const QJSValueList &amp;args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSEngine *</type>
            <name>engine</name>
            <anchorfile>qjsvalue-obsolete.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValue</name>
            <anchorfile>qjsvalue.html</anchorfile>
            <anchor>QJSValue-11</anchor>
            <arglist>(QV4::ExecutionEngine *e, quint64 val)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJSValueIterator</name>
        <filename>qjsvalueiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJSValueIterator</name>
            <anchorfile>qjsvalueiterator.html</anchorfile>
            <anchor>QJSValueIterator</anchor>
            <arglist>(const QJSValue &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJSValueIterator</name>
            <anchorfile>qjsvalueiterator.html</anchorfile>
            <anchor>dtor.QJSValueIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qjsvalueiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>next</name>
            <anchorfile>qjsvalueiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qjsvalueiterator.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValue</type>
            <name>value</name>
            <anchorfile>qjsvalueiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSValueIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsvalueiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QJSValue &amp;object)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlAbstractUrlInterceptor</name>
        <filename>qqmlabstracturlinterceptor.html</filename>
        <member kind="enum">
            <name>DataType</name>
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QmlFile">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="JavaScriptFile">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QmldirFile">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UrlString">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlAbstractUrlInterceptor</name>
            <anchorfile>qqmlabstracturlinterceptor.html</anchorfile>
            <anchor>QQmlAbstractUrlInterceptor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQmlAbstractUrlInterceptor</name>
            <anchorfile>qqmlabstracturlinterceptor.html</anchorfile>
            <anchor>dtor.QQmlAbstractUrlInterceptor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QUrl</type>
            <name>intercept</name>
            <anchorfile>qqmlabstracturlinterceptor.html</anchorfile>
            <anchor>intercept</anchor>
            <arglist>(const QUrl &amp;url, DataType type) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlApplicationEngine</name>
        <filename>qqmlapplicationengine.html</filename>
        <base>QQmlEngine</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlApplicationEngine</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>QQmlApplicationEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlApplicationEngine</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>QQmlApplicationEngine-2</anchor>
            <arglist>(const QUrl &amp;url, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlApplicationEngine</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>QQmlApplicationEngine-3</anchor>
            <arglist>(const QString &amp;filePath, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QQmlApplicationEngine</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>dtor.QQmlApplicationEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QObject *&gt;</type>
            <name>rootObjects</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>rootObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>load</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>load</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(const QString &amp;filePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadData</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>loadData</anchor>
            <arglist>(const QByteArray &amp;data, const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>objectCreated</name>
            <anchorfile>qqmlapplicationengine.html</anchorfile>
            <anchor>objectCreated</anchor>
            <arglist>(QObject *object, const QUrl &amp;url)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlComponent</name>
        <filename>qqmlcomponent.html</filename>
        <base>QObject</base>
        <member kind="property" type="qreal">
            <name>progress</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>progress-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>url</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>url-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CompilationMode</name>
            <anchor>CompilationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferSynchronous">
            <anchor>CompilationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Asynchronous">
            <anchor>CompilationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlComponent</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>QQmlComponent</anchor>
            <arglist>(QQmlEngine *engine, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlComponent</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>QQmlComponent-3</anchor>
            <arglist>(QQmlEngine *engine, const QString &amp;fileName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlComponent</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>QQmlComponent-4</anchor>
            <arglist>(QQmlEngine *engine, const QString &amp;fileName, CompilationMode mode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlComponent</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>QQmlComponent-5</anchor>
            <arglist>(QQmlEngine *engine, const QUrl &amp;url, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlComponent</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>QQmlComponent-6</anchor>
            <arglist>(QQmlEngine *engine, const QUrl &amp;url, CompilationMode mode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQmlComponent</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>dtor.QQmlComponent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReady</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>isReady</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isError</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>isError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoading</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>isLoading</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QQmlError&gt;</type>
            <name>errors</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>progress</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>progress-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>url-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QObject *</type>
            <name>create</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QQmlContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QObject *</type>
            <name>beginCreate</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>beginCreate</anchor>
            <arglist>(QQmlContext *publicContext)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>completeCreate</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>completeCreate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>create</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>create-2</anchor>
            <arglist>(QQmlIncubator &amp;incubator, QQmlContext *context, QQmlContext *forContext)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlContext *</type>
            <name>creationContext</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>creationContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadUrl</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>loadUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadUrl</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>loadUrl-2</anchor>
            <arglist>(const QUrl &amp;url, CompilationMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data, const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(QQmlComponent::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressChanged</name>
            <anchorfile>qqmlcomponent.html</anchorfile>
            <anchor>progress-prop</anchor>
            <arglist>(qreal progress)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlContext</name>
        <filename>qqmlcontext.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlContext</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>QQmlContext</anchor>
            <arglist>(QQmlEngine *engine, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlContext</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>QQmlContext-2</anchor>
            <arglist>(QQmlContext *parentContext, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQmlContext</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>dtor.QQmlContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>engine</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlContext *</type>
            <name>parentContext</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>parentContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>contextObject</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>contextObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContextObject</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>setContextObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>contextProperty</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>contextProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContextProperty</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>setContextProperty</anchor>
            <arglist>(const QString &amp;name, QObject *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContextProperty</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>setContextProperty-2</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nameForObject</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>nameForObject</anchor>
            <arglist>(QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>resolvedUrl</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>resolvedUrl</anchor>
            <arglist>(const QUrl &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseUrl</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>setBaseUrl</anchor>
            <arglist>(const QUrl &amp;baseUrl)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>baseUrl</name>
            <anchorfile>qqmlcontext.html</anchorfile>
            <anchor>baseUrl</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlImageProviderBase</name>
        <filename>qqmlimageproviderbase.html</filename>
        <member kind="enum">
            <name>ImageType</name>
            <anchor>ImageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image">
            <anchor>ImageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pixmap">
            <anchor>ImageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Texture">
            <anchor>ImageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>ImageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForceAsynchronousImageLoading">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QQmlImageProviderBase::Flag">
            <name>Flags</name>
            <anchorfile>qqmlimageproviderbase.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual ImageType</type>
            <name>imageType</name>
            <anchorfile>qqmlimageproviderbase.html</anchorfile>
            <anchor>imageType</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Flags</type>
            <name>flags</name>
            <anchorfile>qqmlimageproviderbase.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlEngine</name>
        <filename>qqmlengine.html</filename>
        <base>QJSEngine</base>
        <member kind="property" type="QString">
            <name>offlineStoragePath</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>offlineStoragePath-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlEngine</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>QQmlEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQmlEngine</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>dtor.QQmlEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlContext *</type>
            <name>rootContext</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>rootContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearComponentCache</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>clearComponentCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trimComponentCache</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>trimComponentCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>importPathList</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>importPathList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImportPathList</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>setImportPathList</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addImportPath</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>addImportPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>pluginPathList</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>pluginPathList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPluginPathList</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>setPluginPathList</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPluginPath</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>addPluginPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>importPlugin</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>importPlugin</anchor>
            <arglist>(const QString &amp;filePath, const QString &amp;uri, QList&lt;QQmlError&gt; *errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkAccessManagerFactory</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>setNetworkAccessManagerFactory</anchor>
            <arglist>(QQmlNetworkAccessManagerFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlNetworkAccessManagerFactory *</type>
            <name>networkAccessManagerFactory</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>networkAccessManagerFactory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager *</type>
            <name>networkAccessManager</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>networkAccessManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addImageProvider</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>addImageProvider</anchor>
            <arglist>(const QString &amp;providerId, QQmlImageProviderBase *provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlImageProviderBase *</type>
            <name>imageProvider</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>imageProvider</anchor>
            <arglist>(const QString &amp;providerId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeImageProvider</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>removeImageProvider</anchor>
            <arglist>(const QString &amp;providerId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIncubationController</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>setIncubationController</anchor>
            <arglist>(QQmlIncubationController *controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlIncubationController *</type>
            <name>incubationController</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>incubationController</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOfflineStoragePath</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>offlineStoragePath-prop</anchor>
            <arglist>(const QString &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>offlineStoragePath</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>offlineStoragePath-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>baseUrl</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>baseUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseUrl</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>setBaseUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>outputWarningsToStandardError</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>outputWarningsToStandardError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOutputWarningsToStandardError</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>setOutputWarningsToStandardError</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQmlContext *</type>
            <name>contextForObject</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>contextForObject</anchor>
            <arglist>(const QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setContextForObject</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>setContextForObject</anchor>
            <arglist>(QObject *object, QQmlContext *context)</arglist>
        </member>
        <member kind="enum">
            <name>ObjectOwnership</name>
            <anchor>ObjectOwnership-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CppOwnership">
            <anchor>ObjectOwnership-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="JavaScriptOwnership">
            <anchor>ObjectOwnership-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setObjectOwnership</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>setObjectOwnership</anchor>
            <arglist>(QObject *object, ObjectOwnership ownership)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>ObjectOwnership</type>
            <name>objectOwnership</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>objectOwnership</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quit</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>quit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warnings</name>
            <anchorfile>qqmlengine.html</anchorfile>
            <anchor>warnings</anchor>
            <arglist>(const QList&lt;QQmlError&gt; &amp;warnings)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlError</name>
        <filename>qqmlerror.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlError</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>QQmlError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlError</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>QQmlError-2</anchor>
            <arglist>(const QQmlError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlError &amp;</type>
            <name>operator=</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QQmlError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>line</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>line</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLine</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>setLine</anchor>
            <arglist>(int line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumn</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>setColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>object</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObject</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>setObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qqmlerror.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlExpression</name>
        <filename>qqmlexpression.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlExpression</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>QQmlExpression</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlExpression</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>QQmlExpression-2</anchor>
            <arglist>(QQmlContext *ctxt, QObject *scope, const QString &amp;expression, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlExpression</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>QQmlExpression-3</anchor>
            <arglist>(const QQmlScriptString &amp;script, QQmlContext *ctxt, QObject *scope, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQmlExpression</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>dtor.QQmlExpression</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>engine</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlContext *</type>
            <name>context</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>expression</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>expression</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpression</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>setExpression</anchor>
            <arglist>(const QString &amp;expression)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>notifyOnValueChanged</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>notifyOnValueChanged</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotifyOnValueChanged</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>setNotifyOnValueChanged</anchor>
            <arglist>(bool notifyOnChange)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sourceFile</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>sourceFile</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineNumber</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>lineNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnNumber</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>columnNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceLocation</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>setSourceLocation</anchor>
            <arglist>(const QString &amp;url, int line, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>scopeObject</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>scopeObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasError</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>hasError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearError</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>clearError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlError</type>
            <name>error</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>evaluate</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>evaluate</anchor>
            <arglist>(bool *valueIsUndefined)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qqmlexpression.html</anchorfile>
            <anchor>valueChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlExtensionPlugin</name>
        <filename>qqmlextensionplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlExtensionPlugin</name>
            <anchorfile>qqmlextensionplugin.html</anchorfile>
            <anchor>QQmlExtensionPlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>baseUrl</name>
            <anchorfile>qqmlextensionplugin.html</anchorfile>
            <anchor>baseUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>registerTypes</name>
            <anchorfile>qqmlextensionplugin.html</anchorfile>
            <anchor>registerTypes</anchor>
            <arglist>(const char *uri) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializeEngine</name>
            <anchorfile>qqmlextensionplugin.html</anchorfile>
            <anchor>initializeEngine</anchor>
            <arglist>(QQmlEngine *engine, const char *uri)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlFileSelector</name>
        <filename>qqmlfileselector.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlFileSelector</name>
            <anchorfile>qqmlfileselector.html</anchorfile>
            <anchor>QQmlFileSelector</anchor>
            <arglist>(QQmlEngine *engine, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QQmlFileSelector</name>
            <anchorfile>qqmlfileselector.html</anchorfile>
            <anchor>dtor.QQmlFileSelector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelector</name>
            <anchorfile>qqmlfileselector.html</anchorfile>
            <anchor>setSelector</anchor>
            <arglist>(QFileSelector *selector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtraSelectors</name>
            <anchorfile>qqmlfileselector.html</anchorfile>
            <anchor>setExtraSelectors</anchor>
            <arglist>(QStringList &amp;strings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtraSelectors</name>
            <anchorfile>qqmlfileselector.html</anchorfile>
            <anchor>setExtraSelectors-2</anchor>
            <arglist>(const QStringList &amp;strings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQmlFileSelector *</type>
            <name>get</name>
            <anchorfile>qqmlfileselector.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(QQmlEngine *engine)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlIncubator</name>
        <filename>qqmlincubator.html</filename>
        <member kind="enum">
            <name>IncubationMode</name>
            <anchor>IncubationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Asynchronous">
            <anchor>IncubationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AsynchronousIfNested">
            <anchor>IncubationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Synchronous">
            <anchor>IncubationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlIncubator</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>QQmlIncubator</anchor>
            <arglist>(IncubationMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>forceCompletion</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>forceCompletion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReady</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>isReady</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isError</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>isError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoading</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>isLoading</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QQmlError&gt;</type>
            <name>errors</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>IncubationMode</type>
            <name>incubationMode</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>incubationMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>object</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>statusChanged</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>statusChanged</anchor>
            <arglist>(Status status)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setInitialState</name>
            <anchorfile>qqmlincubator.html</anchorfile>
            <anchor>setInitialState</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlIncubationController</name>
        <filename>qqmlincubationcontroller.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlIncubationController</name>
            <anchorfile>qqmlincubationcontroller.html</anchorfile>
            <anchor>QQmlIncubationController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>engine</name>
            <anchorfile>qqmlincubationcontroller.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>incubatingObjectCount</name>
            <anchorfile>qqmlincubationcontroller.html</anchorfile>
            <anchor>incubatingObjectCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>incubateFor</name>
            <anchorfile>qqmlincubationcontroller.html</anchorfile>
            <anchor>incubateFor</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>incubateWhile</name>
            <anchorfile>qqmlincubationcontroller.html</anchorfile>
            <anchor>incubateWhile</anchor>
            <arglist>(volatile bool *flag, int msecs)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>incubatingObjectCountChanged</name>
            <anchorfile>qqmlincubationcontroller.html</anchorfile>
            <anchor>incubatingObjectCountChanged</anchor>
            <arglist>(int incubatingObjectCount)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlListProperty</name>
        <filename>qqmllistproperty.html</filename>
        <member kind="typedef" type="">
            <name>AppendFunction</name>
            <anchorfile>qqmllistproperty.html</anchorfile>
            <anchor>AppendFunction-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>CountFunction</name>
            <anchorfile>qqmllistproperty.html</anchorfile>
            <anchor>CountFunction-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>AtFunction</name>
            <anchorfile>qqmllistproperty.html</anchorfile>
            <anchor>AtFunction-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ClearFunction</name>
            <anchorfile>qqmllistproperty.html</anchorfile>
            <anchor>ClearFunction-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlListProperty</name>
            <anchorfile>qqmllistproperty.html</anchorfile>
            <anchor>QQmlListProperty</anchor>
            <arglist>(QObject *object, QList&lt;T *&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlListProperty</name>
            <anchorfile>qqmllistproperty.html</anchorfile>
            <anchor>QQmlListProperty-3</anchor>
            <arglist>(QObject *object, void *data, AppendFunction append, CountFunction count, AtFunction at, ClearFunction clear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlListProperty</name>
            <anchorfile>qqmllistproperty.html</anchorfile>
            <anchor>QQmlListProperty-4</anchor>
            <arglist>(QObject *object, void *data, CountFunction count, AtFunction at)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qqmllistproperty.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QQmlListProperty &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlListReference</name>
        <filename>qqmllistreference.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlListReference</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>QQmlListReference</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlListReference</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>QQmlListReference-2</anchor>
            <arglist>(QObject *object, const char *property, QQmlEngine *engine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>object</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>listElementType</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>listElementType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canAppend</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>canAppend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canAt</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>canAt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canClear</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>canClear</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canCount</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>canCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isManipulable</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>isManipulable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>append</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(QObject *object) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>at</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>clear</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qqmllistreference.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlNetworkAccessManagerFactory</name>
        <filename>qqmlnetworkaccessmanagerfactory.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQmlNetworkAccessManagerFactory</name>
            <anchorfile>qqmlnetworkaccessmanagerfactory.html</anchorfile>
            <anchor>dtor.QQmlNetworkAccessManagerFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QNetworkAccessManager *</type>
            <name>create</name>
            <anchorfile>qqmlnetworkaccessmanagerfactory.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QObject *parent) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlParserStatus</name>
        <filename>qqmlparserstatus.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>classBegin</name>
            <anchorfile>qqmlparserstatus.html</anchorfile>
            <anchor>classBegin</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>componentComplete</name>
            <anchorfile>qqmlparserstatus.html</anchorfile>
            <anchor>componentComplete</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlProperty</name>
        <filename>qqmlproperty.html</filename>
        <member kind="enum">
            <name>PropertyTypeCategory</name>
            <anchor>PropertyTypeCategory-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidCategory">
            <anchor>PropertyTypeCategory-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="List">
            <anchor>PropertyTypeCategory-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Object">
            <anchor>PropertyTypeCategory-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Normal">
            <anchor>PropertyTypeCategory-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Property">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SignalProperty">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>QQmlProperty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>QQmlProperty-2</anchor>
            <arglist>(QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>QQmlProperty-3</anchor>
            <arglist>(QObject *obj, QQmlContext *ctxt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>QQmlProperty-4</anchor>
            <arglist>(QObject *obj, QQmlEngine *engine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>QQmlProperty-5</anchor>
            <arglist>(QObject *obj, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>QQmlProperty-6</anchor>
            <arglist>(QObject *obj, const QString &amp;name, QQmlContext *ctxt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>QQmlProperty-7</anchor>
            <arglist>(QObject *obj, const QString &amp;name, QQmlEngine *engine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>QQmlProperty-8</anchor>
            <arglist>(const QQmlProperty &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlProperty &amp;</type>
            <name>operator=</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QQmlProperty &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QQmlProperty &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>isProperty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSignalProperty</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>isSignalProperty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyType</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>propertyType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PropertyTypeCategory</type>
            <name>propertyTypeCategory</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>propertyTypeCategory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyTypeName</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>propertyTypeName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>read</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>read</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>read</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>read-2</anchor>
            <arglist>(const QObject *object, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>read</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>read-3</anchor>
            <arglist>(const QObject *object, const QString &amp;name, QQmlContext *ctxt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>read</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>read-4</anchor>
            <arglist>(const QObject *object, const QString &amp;name, QQmlEngine *engine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const QVariant &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>write-2</anchor>
            <arglist>(QObject *object, const QString &amp;name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>write-3</anchor>
            <arglist>(QObject *object, const QString &amp;name, const QVariant &amp;value, QQmlContext *ctxt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>write-4</anchor>
            <arglist>(QObject *object, const QString &amp;name, const QVariant &amp;value, QQmlEngine *engine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>reset</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNotifySignal</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>hasNotifySignal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>needsNotifySignal</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>needsNotifySignal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connectNotifySignal</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>connectNotifySignal</anchor>
            <arglist>(QObject *dest, const char *slot) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connectNotifySignal</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>connectNotifySignal-2</anchor>
            <arglist>(QObject *dest, int method) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDesignable</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>isDesignable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResettable</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>isResettable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>object</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>index</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>index</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaProperty</type>
            <name>property</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>property</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod</type>
            <name>method</name>
            <anchorfile>qqmlproperty.html</anchorfile>
            <anchor>method</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlPropertyValueSource</name>
        <filename>qqmlpropertyvaluesource.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlPropertyValueSource</name>
            <anchorfile>qqmlpropertyvaluesource.html</anchorfile>
            <anchor>QQmlPropertyValueSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQmlPropertyValueSource</name>
            <anchorfile>qqmlpropertyvaluesource.html</anchorfile>
            <anchor>dtor.QQmlPropertyValueSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setTarget</name>
            <anchorfile>qqmlpropertyvaluesource.html</anchorfile>
            <anchor>setTarget</anchor>
            <arglist>(const QQmlProperty &amp;property) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlScriptString</name>
        <filename>qqmlscriptstring.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlScriptString</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>QQmlScriptString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlScriptString</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>QQmlScriptString-2</anchor>
            <arglist>(const QQmlScriptString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlScriptString &amp;</type>
            <name>operator=</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QQmlScriptString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QQmlScriptString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QQmlScriptString &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndefinedLiteral</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>isUndefinedLiteral</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNullLiteral</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>isNullLiteral</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>stringLiteral</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>stringLiteral</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>numberLiteral</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>numberLiteral</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>booleanLiteral</name>
            <anchorfile>qqmlscriptstring.html</anchorfile>
            <anchor>booleanLiteral</anchor>
            <arglist>(bool *ok) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQmlPropertyMap</name>
        <filename>qqmlpropertymap.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlPropertyMap</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>QQmlPropertyMap</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQmlPropertyMap</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>dtor.QQmlPropertyMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>keys</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant &amp;</type>
            <name>operator[]</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator[]</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(const QString &amp;key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>valueChanged</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>updateValue</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>updateValue</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;input)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QQmlPropertyMap</name>
            <anchorfile>qqmlpropertymap.html</anchorfile>
            <anchor>QQmlPropertyMap-2</anchor>
            <arglist>(DerivedType *derived, QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.FinalState</name>
        <filename>qml-qtqml-statemachine-finalstate.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.QAbstractTransition</name>
        <filename>qml-qtqml-statemachine-qabstracttransition.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.QSignalTransition</name>
        <filename>qml-qtqml-statemachine-qsignaltransition.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.SignalTransition</name>
        <filename>qml-qtqml-statemachine-signaltransition.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.QAbstractState</name>
        <filename>qml-qtqml-statemachine-qabstractstate.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.State</name>
        <filename>qml-qtqml-statemachine-state.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.HistoryState</name>
        <filename>qml-qtqml-statemachine-historystate.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.StateMachine</name>
        <filename>qml-qtqml-statemachine-statemachine.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.StateMachine.TimeoutTransition</name>
        <filename>qml-qtqml-statemachine-timeouttransition.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Date</name>
        <filename>qml-qtqml-date.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Number</name>
        <filename>qml-qtqml-number.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.String</name>
        <filename>qml-qtqml-string.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Component</name>
        <filename>qml-qtqml-component.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.QtObject</name>
        <filename>qml-qtqml-qtobject.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Qt</name>
        <filename>qml-qtqml-qt.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Locale</name>
        <filename>qml-qtqml-locale.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Binding</name>
        <filename>qml-qtqml-binding.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Connections</name>
        <filename>qml-qtqml-connections.html</filename>
    </compound>
    <compound kind="class">
        <name>VisualDataModel</name>
        <filename>qml-visualdatamodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Models.DelegateModel</name>
        <filename>qml-qtqml-models-delegatemodel.html</filename>
    </compound>
    <compound kind="class">
        <name>VisualDataGroup</name>
        <filename>qml-visualdatagroup.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Models.DelegateModelGroup</name>
        <filename>qml-qtqml-models-delegatemodelgroup.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Instantiator</name>
        <filename>qml-qtqml-instantiator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Models.ItemSelectionModel</name>
        <filename>qml-qtqml-models-itemselectionmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Models.ListModel</name>
        <filename>qml-qtqml-models-listmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Models.ListElement</name>
        <filename>qml-qtqml-models-listelement.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Models.ObjectModel</name>
        <filename>qml-qtqml-models-objectmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>VisualItemModel</name>
        <filename>qml-visualitemmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQml.Timer</name>
        <filename>qml-qtqml-timer.html</filename>
    </compound>
    <compound kind="class">
        <name>Package</name>
        <filename>qml-package.html</filename>
    </compound>
    <compound kind="class">
        <name>WorkerScript</name>
        <filename>qml-workerscript.html</filename>
    </compound>
</tagfile>
