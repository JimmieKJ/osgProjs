<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAccessibleWidget</name>
        <filename>qaccessiblewidget.html</filename>
        <base>QAccessibleObject</base>
        <base>QAccessibleActionInterface</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleWidget</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>QAccessibleWidget</anchor>
            <arglist>(QWidget *w, QAccessible::Role role, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isValid</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWindow *</type>
            <name>window</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>childCount</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>childCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>indexOfChild</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>indexOfChild</anchor>
            <arglist>(const QAccessibleInterface *child) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QPair&lt;QAccessibleInterface *, QAccessible::Relation&gt; &gt;</type>
            <name>relations</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>relations</anchor>
            <arglist>(QAccessible::Relation match) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>focusChild</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>focusChild</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>rect</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>parent</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>child</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>child</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>text</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(QAccessible::Text t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessible::Role</type>
            <name>role</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>role</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessible::State</type>
            <name>state</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QColor</type>
            <name>foregroundColor</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>foregroundColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void *</type>
            <name>interface_cast</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>interface_cast</anchor>
            <arglist>(QAccessible::InterfaceType t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>actionNames</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>actionNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>doAction</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>doAction</anchor>
            <arglist>(const QString &amp;actionName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>keyBindingsForAction</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>keyBindingsForAction</anchor>
            <arglist>(const QString &amp;actionName) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>~QAccessibleWidget</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>dtor.QAccessibleWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QObject *</type>
            <name>parentObject</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>parentObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addControllingSignal</name>
            <anchorfile>qaccessiblewidget.html</anchorfile>
            <anchor>addControllingSignal</anchor>
            <arglist>(const QString &amp;signal)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QColorDialog</name>
        <filename>qcolordialog.html</filename>
        <base>QDialog</base>
        <member kind="property" type="QColor">
            <name>currentColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>currentColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ColorDialogOptions">
            <name>options</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ColorDialogOption</name>
            <anchor>ColorDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShowAlphaChannel">
            <anchor>ColorDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButtons">
            <anchor>ColorDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontUseNativeDialog">
            <anchor>ColorDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QColorDialog::ColorDialogOption">
            <name>ColorDialogOptions</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>ColorDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorDialog</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>QColorDialog</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorDialog</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>QColorDialog-2</anchor>
            <arglist>(const QColor &amp;initial, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QColorDialog</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>dtor.QColorDialog</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>currentColor-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>currentColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>currentColor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>selectedColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>selectedColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(ColorDialogOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(ColorDialogOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptions</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>(ColorDialogOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ColorDialogOptions</type>
            <name>options</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>getColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>getColor</anchor>
            <arglist>(const QColor &amp;initial, QWidget *parent, const QString &amp;title, ColorDialogOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRgb</type>
            <name>getRgba</name>
            <anchorfile>qcolordialog-obsolete.html</anchorfile>
            <anchor>getRgba</anchor>
            <arglist>(QRgb initial, bool *ok, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>customCount</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>customCount</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>customColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>customColor</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setCustomColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>setCustomColor</anchor>
            <arglist>(int index, QColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>standardColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>standardColor</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStandardColor</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>setStandardColor</anchor>
            <arglist>(int index, QColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentColorChanged</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>currentColor-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorSelected</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>colorSelected</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>done</name>
            <anchorfile>qcolordialog.html</anchorfile>
            <anchor>done</anchor>
            <arglist>(int result)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDialog</name>
        <filename>qdialog.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>sizeGripEnabled</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>sizeGripEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>modal</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>modal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDialog</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>QDialog</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDialog</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>dtor.QDialog</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>DialogCode</name>
            <anchor>DialogCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rejected">
            <anchor>DialogCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Accepted">
            <anchor>DialogCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>result</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qdialog-obsolete.html</anchorfile>
            <anchor>setOrientation</anchor>
            <arglist>(Qt::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qdialog-obsolete.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtension</name>
            <anchorfile>qdialog-obsolete.html</anchorfile>
            <anchor>setExtension</anchor>
            <arglist>(QWidget *extension)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>extension</name>
            <anchorfile>qdialog-obsolete.html</anchorfile>
            <anchor>extension</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeGripEnabled</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>sizeGripEnabled-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSizeGripEnabled</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>sizeGripEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModal</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>modal-prop</anchor>
            <arglist>(bool modal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResult</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>setResult</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(int result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accepted</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>accepted</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rejected</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>rejected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>open</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>open</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>exec</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>done</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>done</anchor>
            <arglist>(int r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>accept</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>reject</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>reject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showExtension</name>
            <anchorfile>qdialog-obsolete.html</anchorfile>
            <anchor>showExtension</anchor>
            <arglist>(bool showIt)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEvent</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>closeEvent</anchor>
            <arglist>(QCloseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qdialog.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *o, QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QErrorMessage</name>
        <filename>qerrormessage.html</filename>
        <base>QDialog</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QErrorMessage</name>
            <anchorfile>qerrormessage.html</anchorfile>
            <anchor>QErrorMessage</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QErrorMessage</name>
            <anchorfile>qerrormessage.html</anchorfile>
            <anchor>dtor.QErrorMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QErrorMessage *</type>
            <name>qtHandler</name>
            <anchorfile>qerrormessage.html</anchorfile>
            <anchor>qtHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMessage</name>
            <anchorfile>qerrormessage.html</anchorfile>
            <anchor>showMessage</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMessage</name>
            <anchorfile>qerrormessage.html</anchorfile>
            <anchor>showMessage-2</anchor>
            <arglist>(const QString &amp;message, const QString &amp;type)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>done</name>
            <anchorfile>qerrormessage.html</anchorfile>
            <anchor>done</anchor>
            <arglist>(int a)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qerrormessage.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileDialog</name>
        <filename>qfiledialog.html</filename>
        <base>QDialog</base>
        <member kind="property" type="ViewMode">
            <name>viewMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="FileMode">
            <name>fileMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>fileMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="AcceptMode">
            <name>acceptMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>acceptMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>readOnly</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>resolveSymlinks</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>confirmOverwrite</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>confirmOverwrite-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>defaultSuffix</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>defaultSuffix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>nameFilterDetailsVisible</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>nameFilterDetailsVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Options">
            <name>options</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ViewMode</name>
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Detail">
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="List">
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FileMode</name>
            <anchor>FileMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyFile">
            <anchor>FileMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExistingFile">
            <anchor>FileMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Directory">
            <anchor>FileMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExistingFiles">
            <anchor>FileMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectoryOnly">
            <anchor>FileMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AcceptMode</name>
            <anchor>AcceptMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AcceptOpen">
            <anchor>AcceptMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AcceptSave">
            <anchor>AcceptMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DialogLabel</name>
            <anchor>DialogLabel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LookIn">
            <anchor>DialogLabel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FileName">
            <anchor>DialogLabel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FileType">
            <anchor>DialogLabel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Accept">
            <anchor>DialogLabel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reject">
            <anchor>DialogLabel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Option</name>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShowDirsOnly">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontResolveSymlinks">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontConfirmOverwrite">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontUseSheet">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontUseNativeDialog">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HideNameFilterDetails">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontUseCustomDirectoryIcons">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QFileDialog::Option">
            <name>Options</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileDialog</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>QFileDialog</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileDialog</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>QFileDialog-2</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QString &amp;directory, const QString &amp;filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFileDialog</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>dtor.QFileDialog</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirectory</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setDirectory</anchor>
            <arglist>(const QString &amp;directory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirectory</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setDirectory-2</anchor>
            <arglist>(const QDir &amp;directory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir</type>
            <name>directory</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>directory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirectoryUrl</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setDirectoryUrl</anchor>
            <arglist>(const QUrl &amp;directory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>directoryUrl</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>directoryUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectFile</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>selectFile</anchor>
            <arglist>(const QString &amp;filename)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>selectedFiles</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>selectedFiles</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectUrl</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>selectUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QUrl&gt;</type>
            <name>selectedUrls</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>selectedUrls</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameFilterDetailsVisible</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>nameFilterDetailsVisible-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNameFilterDetailsVisible</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>nameFilterDetailsVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameFilter</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setNameFilter</anchor>
            <arglist>(const QString &amp;filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameFilters</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setNameFilters</anchor>
            <arglist>(const QStringList &amp;filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>nameFilters</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>nameFilters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectNameFilter</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>selectNameFilter</anchor>
            <arglist>(const QString &amp;filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>selectedNameFilter</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>selectedNameFilter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMimeTypeFilters</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setMimeTypeFilters</anchor>
            <arglist>(const QStringList &amp;filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>mimeTypeFilters</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>mimeTypeFilters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectMimeTypeFilter</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>selectMimeTypeFilter</anchor>
            <arglist>(const QString &amp;filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir::Filters</type>
            <name>filter</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(QDir::Filters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist>(ViewMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ViewMode</type>
            <name>viewMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>fileMode-prop</anchor>
            <arglist>(FileMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FileMode</type>
            <name>fileMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>fileMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>acceptMode-prop</anchor>
            <arglist>(AcceptMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AcceptMode</type>
            <name>acceptMode</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>acceptMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadOnly</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolveSymlinks</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>resolveSymlinks</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSidebarUrls</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setSidebarUrls</anchor>
            <arglist>(const QList&lt;QUrl&gt; &amp;urls)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QUrl&gt;</type>
            <name>sidebarUrls</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>sidebarUrls</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>saveState</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>saveState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>restoreState</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>restoreState</anchor>
            <arglist>(const QByteArray &amp;state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConfirmOverwrite</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>confirmOverwrite-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>confirmOverwrite</name>
            <anchorfile>qfiledialog-obsolete.html</anchorfile>
            <anchor>confirmOverwrite-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultSuffix</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>defaultSuffix-prop</anchor>
            <arglist>(const QString &amp;suffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>defaultSuffix</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>defaultSuffix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHistory</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setHistory</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>history</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>history</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemDelegate</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setItemDelegate</anchor>
            <arglist>(QAbstractItemDelegate *delegate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemDelegate *</type>
            <name>itemDelegate</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>itemDelegate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconProvider</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setIconProvider</anchor>
            <arglist>(QFileIconProvider *provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileIconProvider *</type>
            <name>iconProvider</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>iconProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLabelText</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setLabelText</anchor>
            <arglist>(DialogLabel label, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>labelText</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>labelText</anchor>
            <arglist>(DialogLabel label) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxyModel</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setProxyModel</anchor>
            <arglist>(QAbstractProxyModel *proxyModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractProxyModel *</type>
            <name>proxyModel</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>proxyModel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(Option option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(Option option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptions</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>(Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Options</type>
            <name>options</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fileSelected</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>fileSelected</anchor>
            <arglist>(const QString &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>filesSelected</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>filesSelected</anchor>
            <arglist>(const QStringList &amp;selected)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentChanged</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directoryEntered</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>directoryEntered</anchor>
            <arglist>(const QString &amp;directory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>urlSelected</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>urlSelected</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>urlsSelected</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>urlsSelected</anchor>
            <arglist>(const QList&lt;QUrl&gt; &amp;urls)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentUrlChanged</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>currentUrlChanged</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directoryUrlEntered</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>directoryUrlEntered</anchor>
            <arglist>(const QUrl &amp;directory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>filterSelected</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>filterSelected</anchor>
            <arglist>(const QString &amp;filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>getOpenFileName</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>getOpenFileName</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QString &amp;dir, const QString &amp;filter, QString *selectedFilter, Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>getOpenFileUrl</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>getOpenFileUrl</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QUrl &amp;dir, const QString &amp;filter, QString *selectedFilter, Options options, const QStringList &amp;supportedSchemes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>getSaveFileName</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>getSaveFileName</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QString &amp;dir, const QString &amp;filter, QString *selectedFilter, Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>getSaveFileUrl</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>getSaveFileUrl</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QUrl &amp;dir, const QString &amp;filter, QString *selectedFilter, Options options, const QStringList &amp;supportedSchemes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>getExistingDirectory</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>getExistingDirectory</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QString &amp;dir, Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>getExistingDirectoryUrl</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>getExistingDirectoryUrl</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QUrl &amp;dir, Options options, const QStringList &amp;supportedSchemes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>getOpenFileNames</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>getOpenFileNames</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QString &amp;dir, const QString &amp;filter, QString *selectedFilter, Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QUrl&gt;</type>
            <name>getOpenFileUrls</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>getOpenFileUrls</anchor>
            <arglist>(QWidget *parent, const QString &amp;caption, const QUrl &amp;dir, const QString &amp;filter, QString *selectedFilter, Options options, const QStringList &amp;supportedSchemes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>done</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>done</anchor>
            <arglist>(int result)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>accept</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qfiledialog.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileSystemModel</name>
        <filename>qfilesystemmodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="property" type="bool">
            <name>resolveSymlinks</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>readOnly</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>nameFilterDisables</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>nameFilterDisables-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rootPathChanged</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>rootPathChanged</anchor>
            <arglist>(const QString &amp;newPath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fileRenamed</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>fileRenamed</anchor>
            <arglist>(const QString &amp;path, const QString &amp;oldName, const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directoryLoaded</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>directoryLoaded</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="enum">
            <name>Roles</name>
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FileIconRole">
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FilePathRole">
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FileNameRole">
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FilePermissions">
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileSystemModel</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>QFileSystemModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFileSystemModel</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>dtor.QFileSystemModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>index</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>index-2</anchor>
            <arglist>(const QString &amp;path, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canFetchMore</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>canFetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fetchMore</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>fetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>myComputer</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>myComputer</anchor>
            <arglist>(int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;idx, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>setRootPath</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>setRootPath</anchor>
            <arglist>(const QString &amp;newPath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>rootPath</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>rootPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir</type>
            <name>rootDirectory</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>rootDirectory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconProvider</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>setIconProvider</anchor>
            <arglist>(QFileIconProvider *provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileIconProvider *</type>
            <name>iconProvider</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>iconProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(QDir::Filters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir::Filters</type>
            <name>filter</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolveSymlinks</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>resolveSymlinks</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadOnly</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameFilterDisables</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>nameFilterDisables-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>nameFilterDisables</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>nameFilterDisables-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameFilters</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>setNameFilters</anchor>
            <arglist>(const QStringList &amp;filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>nameFilters</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>nameFilters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDir</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>isDir</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>size</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>size</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>type</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>type</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastModified</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>lastModified</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>mkdir</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>mkdir</anchor>
            <arglist>(const QModelIndex &amp;parent, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rmdir</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>rmdir</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>fileIcon</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>fileIcon</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFile::Permissions</type>
            <name>permissions</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>permissions</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo</type>
            <name>fileInfo</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>fileInfo</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qfilesystemmodel.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontDialog</name>
        <filename>qfontdialog.html</filename>
        <base>QDialog</base>
        <member kind="property" type="QFont">
            <name>currentFont</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>currentFont-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="FontDialogOptions">
            <name>options</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FontDialogOption</name>
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButtons">
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontUseNativeDialog">
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScalableFonts">
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonScalableFonts">
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MonospacedFonts">
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProportionalFonts">
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QFontDialog::FontDialogOption">
            <name>FontDialogOptions</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontDialog</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>QFontDialog</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontDialog</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>QFontDialog-2</anchor>
            <arglist>(const QFont &amp;initial, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentFont</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>currentFont-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>currentFont</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>currentFont-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>selectedFont</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>selectedFont</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(FontDialogOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(FontDialogOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptions</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>(FontDialogOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FontDialogOptions</type>
            <name>options</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>getFont</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>getFont-2</anchor>
            <arglist>(bool *ok, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>getFont</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>getFont</anchor>
            <arglist>(bool *ok, const QFont &amp;initial, QWidget *parent, const QString &amp;title, FontDialogOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentFontChanged</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>currentFont-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontSelected</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>fontSelected</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>done</name>
            <anchorfile>qfontdialog.html</anchorfile>
            <anchor>done</anchor>
            <arglist>(int result)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputDialog</name>
        <filename>qinputdialog.html</filename>
        <base>QDialog</base>
        <member kind="property" type="InputMode">
            <name>inputMode</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>inputMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>labelText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>labelText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="InputDialogOptions">
            <name>options</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>textValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>textValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>intValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>doubleValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QLineEdit::EchoMode">
            <name>textEchoMode</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>textEchoMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>comboBoxEditable</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>comboBoxEditable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>comboBoxItems</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>comboBoxItems-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>intMinimum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intMinimum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>intMaximum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intMaximum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>intStep</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intStep-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>doubleMinimum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleMinimum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>doubleMaximum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleMaximum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>doubleDecimals</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleDecimals-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>okButtonText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>okButtonText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>cancelButtonText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>cancelButtonText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>InputDialogOption</name>
            <anchor>InputDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButtons">
            <anchor>InputDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UseListViewForComboBoxItems">
            <anchor>InputDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsePlainTextEditForTextInput">
            <anchor>InputDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QInputDialog::InputDialogOption">
            <name>InputDialogOptions</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>InputDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>InputMode</name>
            <anchor>InputMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextInput">
            <anchor>InputMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IntInput">
            <anchor>InputMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoubleInput">
            <anchor>InputMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputDialog</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>QInputDialog</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QInputDialog</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>dtor.QInputDialog</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputMode</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>inputMode-prop</anchor>
            <arglist>(InputMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InputMode</type>
            <name>inputMode</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>inputMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLabelText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>labelText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>labelText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>labelText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(InputDialogOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(InputDialogOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptions</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>(InputDialogOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InputDialogOptions</type>
            <name>options</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>textValue-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>textValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>textValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextEchoMode</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>textEchoMode-prop</anchor>
            <arglist>(QLineEdit::EchoMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineEdit::EchoMode</type>
            <name>textEchoMode</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>textEchoMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComboBoxEditable</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>comboBoxEditable-prop</anchor>
            <arglist>(bool editable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isComboBoxEditable</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>comboBoxEditable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComboBoxItems</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>comboBoxItems-prop</anchor>
            <arglist>(const QStringList &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>comboBoxItems</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>comboBoxItems-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intValue-prop</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>intValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntMinimum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intMinimum-prop</anchor>
            <arglist>(int min)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>intMinimum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intMinimum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntMaximum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intMaximum-prop</anchor>
            <arglist>(int max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>intMaximum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intMaximum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntRange</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>setIntRange</anchor>
            <arglist>(int min, int max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntStep</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intStep-prop</anchor>
            <arglist>(int step)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>intStep</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intStep-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDoubleValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleValue-prop</anchor>
            <arglist>(double value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>doubleValue</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDoubleMinimum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleMinimum-prop</anchor>
            <arglist>(double min)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>doubleMinimum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleMinimum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDoubleMaximum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleMaximum-prop</anchor>
            <arglist>(double max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>doubleMaximum</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleMaximum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDoubleRange</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>setDoubleRange</anchor>
            <arglist>(double min, double max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDoubleDecimals</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleDecimals-prop</anchor>
            <arglist>(int decimals)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>doubleDecimals</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleDecimals-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOkButtonText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>okButtonText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>okButtonText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>okButtonText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCancelButtonText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>cancelButtonText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>cancelButtonText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>cancelButtonText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>getText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>getText</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;label, QLineEdit::EchoMode mode, const QString &amp;text, bool *ok, Qt::WindowFlags flags, Qt::InputMethodHints inputMethodHints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>getMultiLineText</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>getMultiLineText</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;label, const QString &amp;text, bool *ok, Qt::WindowFlags flags, Qt::InputMethodHints inputMethodHints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>getItem</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>getItem</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;label, const QStringList &amp;items, int current, bool editable, bool *ok, Qt::WindowFlags flags, Qt::InputMethodHints inputMethodHints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>getInt</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>getInt</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;label, int value, int min, int max, int step, bool *ok, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>double</type>
            <name>getDouble</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>getDouble</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;label, double value, double min, double max, int decimals, bool *ok, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>getInteger</name>
            <anchorfile>qinputdialog-obsolete.html</anchorfile>
            <anchor>getInteger</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;label, int value, int min, int max, int step, bool *ok, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textValueChanged</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>textValue-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textValueSelected</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>textValueSelected</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>intValueChanged</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intValue-prop</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>intValueSelected</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>intValueSelected</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doubleValueChanged</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleValue-prop</anchor>
            <arglist>(double value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doubleValueSelected</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>doubleValueSelected</anchor>
            <arglist>(double value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>done</name>
            <anchorfile>qinputdialog.html</anchorfile>
            <anchor>done</anchor>
            <arglist>(int result)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageBox</name>
        <filename>qmessagebox.html</filename>
        <base>QDialog</base>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Icon">
            <name>icon</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPixmap">
            <name>iconPixmap</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>iconPixmap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextFormat">
            <name>textFormat</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>textFormat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StandardButtons">
            <name>standardButtons</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>standardButtons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>detailedText</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>detailedText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>informativeText</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>informativeText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextInteractionFlags">
            <name>textInteractionFlags</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Icon</name>
            <anchor>Icon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoIcon">
            <anchor>Icon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Information">
            <anchor>Icon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Warning">
            <anchor>Icon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Critical">
            <anchor>Icon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Question">
            <anchor>Icon-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ButtonRole</name>
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AcceptRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RejectRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DestructiveRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HelpRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YesRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResetRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplyRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NRoles">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StandardButton</name>
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ok">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Save">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaveAll">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Open">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Yes">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YesToAll">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="No">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoToAll">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Abort">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Retry">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ignore">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Close">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cancel">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Discard">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Help">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Apply">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reset">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RestoreDefaults">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FirstButton">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastButton">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YesAll">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoAll">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Default">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Escape">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlagMask">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ButtonMask">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Button</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>Button-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMessageBox::StandardButton">
            <name>StandardButtons</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageBox</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>QMessageBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageBox</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>QMessageBox-2</anchor>
            <arglist>(Icon icon, const QString &amp;title, const QString &amp;text, StandardButtons buttons, QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageBox</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>dtor.QMessageBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>addButton</anchor>
            <arglist>(QAbstractButton *button, ButtonRole role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPushButton *</type>
            <name>addButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>addButton-2</anchor>
            <arglist>(const QString &amp;text, ButtonRole role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPushButton *</type>
            <name>addButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>addButton-3</anchor>
            <arglist>(StandardButton button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>removeButton</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractButton *&gt;</type>
            <name>buttons</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ButtonRole</type>
            <name>buttonRole</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>buttonRole</anchor>
            <arglist>(QAbstractButton *button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardButtons</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>standardButtons-prop</anchor>
            <arglist>(StandardButtons buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StandardButtons</type>
            <name>standardButtons</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>standardButtons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StandardButton</type>
            <name>standardButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>standardButton</anchor>
            <arglist>(QAbstractButton *button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractButton *</type>
            <name>button</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>button</anchor>
            <arglist>(StandardButton which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPushButton *</type>
            <name>defaultButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>defaultButton</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>setDefaultButton</anchor>
            <arglist>(QPushButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>setDefaultButton-2</anchor>
            <arglist>(StandardButton button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractButton *</type>
            <name>escapeButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>escapeButton</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEscapeButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>setEscapeButton</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEscapeButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>setEscapeButton-2</anchor>
            <arglist>(StandardButton button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractButton *</type>
            <name>clickedButton</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>clickedButton</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Icon</type>
            <name>icon</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>(Icon )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>iconPixmap</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>iconPixmap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconPixmap</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>iconPixmap-prop</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextFormat</type>
            <name>textFormat</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>textFormat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextFormat</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>textFormat-prop</anchor>
            <arglist>(Qt::TextFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextInteractionFlags</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist>(Qt::TextInteractionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextInteractionFlags</type>
            <name>textInteractionFlags</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckBox</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>setCheckBox</anchor>
            <arglist>(QCheckBox *cb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCheckBox *</type>
            <name>checkBox</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>checkBox</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>StandardButton</type>
            <name>information</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>information</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, StandardButtons buttons, StandardButton defaultButton)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>StandardButton</type>
            <name>question</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>question</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, StandardButtons buttons, StandardButton defaultButton)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>StandardButton</type>
            <name>warning</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>warning</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, StandardButtons buttons, StandardButton defaultButton)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>StandardButton</type>
            <name>critical</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>critical</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, StandardButtons buttons, StandardButton defaultButton)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>about</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>about</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>aboutQt</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>aboutQt</anchor>
            <arglist>(QWidget *parent, const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageBox</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>QMessageBox-3</anchor>
            <arglist>(const QString &amp;title, const QString &amp;text, Icon icon, int button0, int button1, int button2, QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>information</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>information-2</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, int button0, int button1, int button2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>information</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>information-4</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, const QString &amp;button0Text, const QString &amp;button1Text, const QString &amp;button2Text, int defaultButtonNumber, int escapeButtonNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>question</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>question-2</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, int button0, int button1, int button2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>question</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>question-4</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, const QString &amp;button0Text, const QString &amp;button1Text, const QString &amp;button2Text, int defaultButtonNumber, int escapeButtonNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>warning</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>warning-2</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, int button0, int button1, int button2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>warning</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>warning-4</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, const QString &amp;button0Text, const QString &amp;button1Text, const QString &amp;button2Text, int defaultButtonNumber, int escapeButtonNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>critical</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>critical-2</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, int button0, int button1, int button2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>critical</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>critical-4</anchor>
            <arglist>(QWidget *parent, const QString &amp;title, const QString &amp;text, const QString &amp;button0Text, const QString &amp;button1Text, const QString &amp;button2Text, int defaultButtonNumber, int escapeButtonNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>buttonText</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>buttonText</anchor>
            <arglist>(int button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtonText</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>setButtonText</anchor>
            <arglist>(int button, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>informativeText</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>informativeText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInformativeText</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>informativeText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailedText</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>detailedText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailedText</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>detailedText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowTitle</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>setWindowTitle</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowModality</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>setWindowModality</anchor>
            <arglist>(Qt::WindowModality windowModality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>standardIcon</name>
            <anchorfile>qmessagebox-obsolete.html</anchorfile>
            <anchor>standardIcon</anchor>
            <arglist>(Icon icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonClicked</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>buttonClicked</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>exec</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEvent</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>closeEvent</anchor>
            <arglist>(QCloseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qmessagebox.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProgressDialog</name>
        <filename>qprogressdialog.html</filename>
        <base>QDialog</base>
        <member kind="property" type="bool">
            <name>wasCanceled</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>wasCanceled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimum</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximum</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>value</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoReset</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>autoReset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoClose</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>autoClose-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumDuration</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>minimumDuration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>labelText</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>labelText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProgressDialog</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>QProgressDialog</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProgressDialog</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>QProgressDialog-2</anchor>
            <arglist>(const QString &amp;labelText, const QString &amp;cancelButtonText, int minimum, int maximum, QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QProgressDialog</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>dtor.QProgressDialog</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLabel</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>setLabel</anchor>
            <arglist>(QLabel *label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCancelButton</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>setCancelButton</anchor>
            <arglist>(QPushButton *cancelButton)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBar</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>setBar</anchor>
            <arglist>(QProgressBar *bar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wasCanceled</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>wasCanceled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimum</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximum</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>value</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>labelText</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>labelText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumDuration</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>minimumDuration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoReset</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>autoReset-prop</anchor>
            <arglist>(bool reset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoReset</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>autoReset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoClose</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>autoClose-prop</anchor>
            <arglist>(bool close)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoClose</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>autoClose-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximum</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>(int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimum</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>(int minimum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRange</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(int minimum, int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(int progress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLabelText</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>labelText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCancelButtonText</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>setCancelButtonText</anchor>
            <arglist>(const QString &amp;cancelButtonText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumDuration</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>minimumDuration-prop</anchor>
            <arglist>(int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>canceled</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>canceled</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEvent</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>closeEvent</anchor>
            <arglist>(QCloseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>forceShow</name>
            <anchorfile>qprogressdialog.html</anchorfile>
            <anchor>forceShow</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWizard</name>
        <filename>qwizard.html</filename>
        <base>QDialog</base>
        <member kind="property" type="WizardStyle">
            <name>wizardStyle</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>wizardStyle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WizardOptions">
            <name>options</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextFormat">
            <name>titleFormat</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>titleFormat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextFormat">
            <name>subTitleFormat</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>subTitleFormat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>startId</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>startId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentId</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>currentId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WizardButton</name>
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextButton">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommitButton">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishButton">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CancelButton">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HelpButton">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomButton1">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomButton2">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomButton3">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Stretch">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NStandardButtons">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NButtons">
            <anchor>WizardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WizardPixmap</name>
            <anchor>WizardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WatermarkPixmap">
            <anchor>WizardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LogoPixmap">
            <anchor>WizardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BannerPixmap">
            <anchor>WizardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundPixmap">
            <anchor>WizardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NPixmaps">
            <anchor>WizardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WizardStyle</name>
            <anchor>WizardStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClassicStyle">
            <anchor>WizardStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ModernStyle">
            <anchor>WizardStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MacStyle">
            <anchor>WizardStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AeroStyle">
            <anchor>WizardStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NStyles">
            <anchor>WizardStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WizardOption</name>
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndependentPages">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IgnoreSubTitles">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtendedWatermarkPixmap">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDefaultButton">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoBackButtonOnStartPage">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoBackButtonOnLastPage">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DisabledBackButtonOnLastPage">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HaveNextButtonOnLastPage">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HaveFinishButtonOnEarlyPages">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoCancelButton">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CancelButtonOnLeft">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HaveHelpButton">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HelpButtonOnRight">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HaveCustomButton1">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HaveCustomButton2">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HaveCustomButton3">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoCancelButtonOnLastPage">
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QWizard::WizardOption">
            <name>WizardOptions</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>WizardOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWizard</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>QWizard</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWizard</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>dtor.QWizard</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addPage</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>addPage</anchor>
            <arglist>(QWizardPage *page)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPage</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setPage</anchor>
            <arglist>(int id, QWizardPage *page)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removePage</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>removePage</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWizardPage *</type>
            <name>page</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>page</anchor>
            <arglist>(int id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasVisitedPage</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>hasVisitedPage</anchor>
            <arglist>(int id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>visitedPages</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>visitedPages</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>pageIds</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>pageIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartId</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>startId-prop</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startId</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>startId-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWizardPage *</type>
            <name>currentPage</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>currentPage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentId</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>currentId-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validateCurrentPage</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>validateCurrentPage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>nextId</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>nextId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setField</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setField</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>field</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>field</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWizardStyle</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>wizardStyle-prop</anchor>
            <arglist>(WizardStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WizardStyle</type>
            <name>wizardStyle</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>wizardStyle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(WizardOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(WizardOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptions</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>(WizardOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WizardOptions</type>
            <name>options</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>options-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtonText</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setButtonText</anchor>
            <arglist>(WizardButton which, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>buttonText</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>buttonText</anchor>
            <arglist>(WizardButton which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtonLayout</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setButtonLayout</anchor>
            <arglist>(const QList&lt;WizardButton&gt; &amp;layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButton</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setButton</anchor>
            <arglist>(WizardButton which, QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractButton *</type>
            <name>button</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>button</anchor>
            <arglist>(WizardButton which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitleFormat</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>titleFormat-prop</anchor>
            <arglist>(Qt::TextFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextFormat</type>
            <name>titleFormat</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>titleFormat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSubTitleFormat</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>subTitleFormat-prop</anchor>
            <arglist>(Qt::TextFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextFormat</type>
            <name>subTitleFormat</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>subTitleFormat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setPixmap</anchor>
            <arglist>(WizardPixmap which, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>(WizardPixmap which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSideWidget</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setSideWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>sideWidget</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>sideWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultProperty</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setDefaultProperty</anchor>
            <arglist>(const char *className, const char *property, const char *changedSignal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIdChanged</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>currentId-prop</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>helpRequested</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>helpRequested</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>customButtonClicked</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>customButtonClicked</anchor>
            <arglist>(int which)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pageAdded</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>pageAdded</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pageRemoved</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>pageRemoved</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>back</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>next</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>restart</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>restart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>nativeEvent</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>nativeEvent</anchor>
            <arglist>(const QByteArray &amp;eventType, void *message, long *result)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>done</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>done</anchor>
            <arglist>(int result)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializePage</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>initializePage</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>cleanupPage</name>
            <anchorfile>qwizard.html</anchorfile>
            <anchor>cleanupPage</anchor>
            <arglist>(int id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWizardPage</name>
        <filename>qwizardpage.html</filename>
        <base>QWidget</base>
        <member kind="property" type="QString">
            <name>title</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>subTitle</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>subTitle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWizardPage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>QWizardPage</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWizardPage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>dtor.QWizardPage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSubTitle</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>subTitle-prop</anchor>
            <arglist>(const QString &amp;subTitle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>subTitle</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>subTitle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>setPixmap</anchor>
            <arglist>(QWizard::WizardPixmap which, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>(QWizard::WizardPixmap which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFinalPage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>setFinalPage</anchor>
            <arglist>(bool finalPage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinalPage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>isFinalPage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCommitPage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>setCommitPage</anchor>
            <arglist>(bool commitPage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCommitPage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>isCommitPage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtonText</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>setButtonText</anchor>
            <arglist>(QWizard::WizardButton which, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>buttonText</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>buttonText</anchor>
            <arglist>(QWizard::WizardButton which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializePage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>initializePage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>cleanupPage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>cleanupPage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validatePage</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>validatePage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isComplete</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>isComplete</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>nextId</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>nextId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>completeChanged</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>completeChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setField</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>setField</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QVariant</type>
            <name>field</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>field</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerField</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>registerField</anchor>
            <arglist>(const QString &amp;name, QWidget *widget, const char *property, const char *changedSignal)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QWizard *</type>
            <name>wizard</name>
            <anchorfile>qwizardpage.html</anchorfile>
            <anchor>wizard</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsEffect</name>
        <filename>qgraphicseffect.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ChangeFlag</name>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SourceAttached">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SourceDetached">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SourceBoundingRectChanged">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SourceInvalidated">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGraphicsEffect::ChangeFlag">
            <name>ChangeFlags</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PixmapPadMode</name>
            <anchor>PixmapPadMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoPad">
            <anchor>PixmapPadMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PadToTransparentBorder">
            <anchor>PixmapPadMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PadToEffectiveBoundingRect">
            <anchor>PixmapPadMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsEffect</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>QGraphicsEffect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGraphicsEffect</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>dtor.QGraphicsEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRectFor</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>boundingRectFor</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>draw</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *painter) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sourceChanged</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>sourceChanged</anchor>
            <arglist>(ChangeFlags flags)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>updateBoundingRect</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>updateBoundingRect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>sourceIsPixmap</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>sourceIsPixmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sourceBoundingRect</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>sourceBoundingRect</anchor>
            <arglist>(Qt::CoordinateSystem system) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>drawSource</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>drawSource</anchor>
            <arglist>(QPainter *painter)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>sourcePixmap</name>
            <anchorfile>qgraphicseffect.html</anchorfile>
            <anchor>sourcePixmap</anchor>
            <arglist>(Qt::CoordinateSystem system, QPoint *offset, PixmapPadMode mode) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsColorizeEffect</name>
        <filename>qgraphicscolorizeeffect.html</filename>
        <base>QGraphicsEffect</base>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>strength</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>strength-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsColorizeEffect</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>QGraphicsColorizeEffect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsColorizeEffect</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>dtor.QGraphicsColorizeEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>strength</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>strength-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStrength</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>strength-prop</anchor>
            <arglist>(qreal strength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>strengthChanged</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>strength-prop</anchor>
            <arglist>(qreal strength)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>draw</name>
            <anchorfile>qgraphicscolorizeeffect.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *painter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsBlurEffect</name>
        <filename>qgraphicsblureffect.html</filename>
        <base>QGraphicsEffect</base>
        <member kind="property" type="qreal">
            <name>blurRadius</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>blurRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="BlurHints">
            <name>blurHints</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>blurHints-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BlurHint</name>
            <anchor>BlurHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PerformanceHint">
            <anchor>BlurHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QualityHint">
            <anchor>BlurHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnimationHint">
            <anchor>BlurHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGraphicsBlurEffect::BlurHint">
            <name>BlurHints</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>BlurHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsBlurEffect</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>QGraphicsBlurEffect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsBlurEffect</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>dtor.QGraphicsBlurEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRectFor</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>boundingRectFor</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>blurRadius</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>blurRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BlurHints</type>
            <name>blurHints</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>blurHints-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlurRadius</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>blurRadius-prop</anchor>
            <arglist>(qreal blurRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlurHints</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>blurHints-prop</anchor>
            <arglist>(BlurHints hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blurRadiusChanged</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>blurRadius-prop</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blurHintsChanged</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>blurHints-prop</anchor>
            <arglist>(BlurHints hints)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>draw</name>
            <anchorfile>qgraphicsblureffect.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *painter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsDropShadowEffect</name>
        <filename>qgraphicsdropshadoweffect.html</filename>
        <base>QGraphicsEffect</base>
        <member kind="property" type="QPointF">
            <name>offset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>xOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>xOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>yOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>yOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>blurRadius</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>blurRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsDropShadowEffect</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>QGraphicsDropShadowEffect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsDropShadowEffect</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>dtor.QGraphicsDropShadowEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRectFor</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>boundingRectFor</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>offset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>xOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>xOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>yOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>yOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>blurRadius</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>blurRadius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>(const QPointF &amp;ofs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>(qreal d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>xOffset-prop</anchor>
            <arglist>(qreal dx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYOffset</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>yOffset-prop</anchor>
            <arglist>(qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlurRadius</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>blurRadius-prop</anchor>
            <arglist>(qreal blurRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>offsetChanged</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blurRadiusChanged</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>blurRadius-prop</anchor>
            <arglist>(qreal blurRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>draw</name>
            <anchorfile>qgraphicsdropshadoweffect.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *painter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsOpacityEffect</name>
        <filename>qgraphicsopacityeffect.html</filename>
        <base>QGraphicsEffect</base>
        <member kind="property" type="qreal">
            <name>opacity</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QBrush">
            <name>opacityMask</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>opacityMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsOpacityEffect</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>QGraphicsOpacityEffect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsOpacityEffect</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>dtor.QGraphicsOpacityEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>opacityMask</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>opacityMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>(qreal opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacityMask</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>opacityMask-prop</anchor>
            <arglist>(const QBrush &amp;mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opacityChanged</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>(qreal opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opacityMaskChanged</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>opacityMask-prop</anchor>
            <arglist>(const QBrush &amp;mask)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>draw</name>
            <anchorfile>qgraphicsopacityeffect.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *painter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsAnchor</name>
        <filename>qgraphicsanchor.html</filename>
        <base>QObject</base>
        <member kind="property" type="qreal">
            <name>spacing</name>
            <anchorfile>qgraphicsanchor.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizePolicy::Policy">
            <name>sizePolicy</name>
            <anchorfile>qgraphicsanchor.html</anchorfile>
            <anchor>sizePolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qgraphicsanchor.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetSpacing</name>
            <anchorfile>qgraphicsanchor.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>spacing</name>
            <anchorfile>qgraphicsanchor.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizePolicy</name>
            <anchorfile>qgraphicsanchor.html</anchorfile>
            <anchor>sizePolicy-prop</anchor>
            <arglist>(QSizePolicy::Policy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizePolicy::Policy</type>
            <name>sizePolicy</name>
            <anchorfile>qgraphicsanchor.html</anchorfile>
            <anchor>sizePolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsAnchor</name>
            <anchorfile>qgraphicsanchor.html</anchorfile>
            <anchor>dtor.QGraphicsAnchor</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsAnchorLayout</name>
        <filename>qgraphicsanchorlayout.html</filename>
        <base>QGraphicsLayout</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsAnchorLayout</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>QGraphicsAnchorLayout</anchor>
            <arglist>(QGraphicsLayoutItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGraphicsAnchorLayout</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>dtor.QGraphicsAnchorLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsAnchor *</type>
            <name>addAnchor</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>addAnchor</anchor>
            <arglist>(QGraphicsLayoutItem *firstItem, Qt::AnchorPoint firstEdge, QGraphicsLayoutItem *secondItem, Qt::AnchorPoint secondEdge)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsAnchor *</type>
            <name>anchor</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>anchor</anchor>
            <arglist>(QGraphicsLayoutItem *firstItem, Qt::AnchorPoint firstEdge, QGraphicsLayoutItem *secondItem, Qt::AnchorPoint secondEdge)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCornerAnchors</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>addCornerAnchors</anchor>
            <arglist>(QGraphicsLayoutItem *firstItem, Qt::Corner firstCorner, QGraphicsLayoutItem *secondItem, Qt::Corner secondCorner)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnchors</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>addAnchors</anchor>
            <arglist>(QGraphicsLayoutItem *firstItem, QGraphicsLayoutItem *secondItem, Qt::Orientations orientations)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalSpacing</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>setHorizontalSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalSpacing</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>setVerticalSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>setSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>horizontalSpacing</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>horizontalSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>verticalSpacing</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>verticalSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>removeAt</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRectF &amp;geom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGraphicsLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSizeF</type>
            <name>sizeHint</name>
            <anchorfile>qgraphicsanchorlayout.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(Qt::SizeHint which, const QSizeF &amp;constraint) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsGridLayout</name>
        <filename>qgraphicsgridlayout.html</filename>
        <base>QGraphicsLayout</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsGridLayout</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>QGraphicsGridLayout</anchor>
            <arglist>(QGraphicsLayoutItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGraphicsGridLayout</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>dtor.QGraphicsGridLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QGraphicsLayoutItem *item, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>addItem-2</anchor>
            <arglist>(QGraphicsLayoutItem *item, int row, int column, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setHorizontalSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>horizontalSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>horizontalSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setVerticalSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>verticalSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>verticalSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setRowSpacing</anchor>
            <arglist>(int row, qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rowSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>rowSpacing</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setColumnSpacing</anchor>
            <arglist>(int column, qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>columnSpacing</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>columnSpacing</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowStretchFactor</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setRowStretchFactor</anchor>
            <arglist>(int row, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowStretchFactor</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>rowStretchFactor</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnStretchFactor</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setColumnStretchFactor</anchor>
            <arglist>(int column, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnStretchFactor</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>columnStretchFactor</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowMinimumHeight</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setRowMinimumHeight</anchor>
            <arglist>(int row, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rowMinimumHeight</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>rowMinimumHeight</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowPreferredHeight</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setRowPreferredHeight</anchor>
            <arglist>(int row, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rowPreferredHeight</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>rowPreferredHeight</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowMaximumHeight</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setRowMaximumHeight</anchor>
            <arglist>(int row, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rowMaximumHeight</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>rowMaximumHeight</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowFixedHeight</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setRowFixedHeight</anchor>
            <arglist>(int row, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnMinimumWidth</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setColumnMinimumWidth</anchor>
            <arglist>(int column, qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>columnMinimumWidth</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>columnMinimumWidth</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnPreferredWidth</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setColumnPreferredWidth</anchor>
            <arglist>(int column, qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>columnPreferredWidth</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>columnPreferredWidth</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnMaximumWidth</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setColumnMaximumWidth</anchor>
            <arglist>(int column, qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>columnMaximumWidth</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>columnMaximumWidth</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnFixedWidth</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setColumnFixedWidth</anchor>
            <arglist>(int column, qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowAlignment</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setRowAlignment</anchor>
            <arglist>(int row, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>rowAlignment</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>rowAlignment</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnAlignment</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setColumnAlignment</anchor>
            <arglist>(int column, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>columnAlignment</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>columnAlignment</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(QGraphicsLayoutItem *item, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>(QGraphicsLayoutItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowCount</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGraphicsLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>itemAt-2</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>removeAt</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItem</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(QGraphicsLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSizeF</type>
            <name>sizeHint</name>
            <anchorfile>qgraphicsgridlayout.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(Qt::SizeHint which, const QSizeF &amp;constraint) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsItem</name>
        <filename>qgraphicsitem.html</filename>
        <member kind="enum">
            <name>GraphicsItemFlag</name>
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsMovable">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsSelectable">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsFocusable">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemClipsToShape">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemClipsChildrenToShape">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIgnoresTransformations">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIgnoresParentOpacity">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemDoesntPropagateOpacityToChildren">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemStacksBehindParent">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemUsesExtendedStyleOption">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemHasNoContents">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemSendsGeometryChanges">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemAcceptsInputMethod">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemNegativeZStacksBehindParent">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsPanel">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsFocusScope">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemSendsScenePositionChanges">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemStopsClickFocusPropagation">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemStopsFocusHandling">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemContainsChildrenInShape">
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGraphicsItem::GraphicsItemFlag">
            <name>GraphicsItemFlags</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>GraphicsItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>GraphicsItemChange</name>
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemPositionChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemMatrixChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemVisibleChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemEnabledChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemSelectedChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemParentChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemChildAddedChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemChildRemovedChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemTransformChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemPositionHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemTransformHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemSceneChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemVisibleHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemEnabledHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemSelectedHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemParentHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemSceneHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemCursorChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemCursorHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemToolTipChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemToolTipHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemFlagsChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemFlagsHaveChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemZValueChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemZValueHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemOpacityChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemOpacityHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemScenePositionHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemRotationChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemRotationHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemScaleChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemScaleHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemTransformOriginPointChange">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemTransformOriginPointHasChanged">
            <anchor>GraphicsItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CacheMode</name>
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoCache">
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemCoordinateCache">
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceCoordinateCache">
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PanelModality</name>
            <anchor>PanelModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonModal">
            <anchor>PanelModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PanelModal">
            <anchor>PanelModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SceneModal">
            <anchor>PanelModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>QGraphicsItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGraphicsItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>dtor.QGraphicsItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsScene *</type>
            <name>scene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>parentItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>parentItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>topLevelItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>topLevelItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsObject *</type>
            <name>parentObject</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>parentObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsWidget *</type>
            <name>parentWidget</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>parentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsWidget *</type>
            <name>topLevelWidget</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>topLevelWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsWidget *</type>
            <name>window</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>panel</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>panel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParentItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setParentItem</anchor>
            <arglist>(QGraphicsItem *newParent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>children</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>children</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>childItems</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>childItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWidget</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWindow</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isWindow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPanel</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isPanel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsObject *</type>
            <name>toGraphicsObject</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>toGraphicsObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QGraphicsObject *</type>
            <name>toGraphicsObject</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>toGraphicsObject-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItemGroup *</type>
            <name>group</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGroup</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setGroup</anchor>
            <arglist>(QGraphicsItemGroup *group)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GraphicsItemFlags</type>
            <name>flags</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(GraphicsItemFlag flag, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(GraphicsItemFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CacheMode</type>
            <name>cacheMode</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>cacheMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCacheMode</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setCacheMode</anchor>
            <arglist>(CacheMode mode, const QSize &amp;logicalCacheSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PanelModality</type>
            <name>panelModality</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>panelModality</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPanelModality</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setPanelModality</anchor>
            <arglist>(PanelModality panelModality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBlockedByModalPanel</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isBlockedByModalPanel</anchor>
            <arglist>(QGraphicsItem **blockingPanel) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>toolTip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setToolTip</anchor>
            <arglist>(const QString &amp;toolTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor</type>
            <name>cursor</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>cursor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursor</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setCursor</anchor>
            <arglist>(const QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasCursor</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>hasCursor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetCursor</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>unsetCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isVisible</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisibleTo</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isVisibleTo</anchor>
            <arglist>(const QGraphicsItem *parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hide</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>hide</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>show</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>show</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelected</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isSelected</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelected</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setSelected</anchor>
            <arglist>(bool selected)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptDrops</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>acceptDrops</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptDrops</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setAcceptDrops</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>effectiveOpacity</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>effectiveOpacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setOpacity</anchor>
            <arglist>(qreal opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsEffect *</type>
            <name>graphicsEffect</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>graphicsEffect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGraphicsEffect</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setGraphicsEffect</anchor>
            <arglist>(QGraphicsEffect *effect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>acceptedMouseButtons</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>acceptedMouseButtons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptedMouseButtons</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setAcceptedMouseButtons</anchor>
            <arglist>(Qt::MouseButtons buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptsHoverEvents</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>acceptsHoverEvents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptsHoverEvents</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>setAcceptsHoverEvents</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptHoverEvents</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>acceptHoverEvents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptHoverEvents</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setAcceptHoverEvents</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptTouchEvents</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>acceptTouchEvents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptTouchEvents</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setAcceptTouchEvents</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>filtersChildEvents</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>filtersChildEvents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltersChildEvents</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setFiltersChildEvents</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>handlesChildEvents</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>handlesChildEvents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHandlesChildEvents</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>setHandlesChildEvents</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActive</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setActive</anchor>
            <arglist>(bool active)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFocus</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>hasFocus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setFocus</anchor>
            <arglist>(Qt::FocusReason focusReason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearFocus</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>clearFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>focusProxy</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>focusProxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocusProxy</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setFocusProxy</anchor>
            <arglist>(QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>focusItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>focusItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabMouse</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>grabMouse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungrabMouse</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>ungrabMouse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabKeyboard</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>grabKeyboard</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungrabKeyboard</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>ungrabKeyboard</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pos</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setPos</anchor>
            <arglist>(const QPointF &amp;pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setPos-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBy</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>moveBy</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureVisible</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>ensureVisible</anchor>
            <arglist>(const QRectF &amp;rect, int xmargin, int ymargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureVisible</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>ensureVisible-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, int xmargin, int ymargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>matrix</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>sceneMatrix</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>sceneMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(const QMatrix &amp;matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetMatrix</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>resetMatrix</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transform</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>sceneTransform</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>sceneTransform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>deviceTransform</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>deviceTransform</anchor>
            <arglist>(const QTransform &amp;viewportTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>itemTransform</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>itemTransform</anchor>
            <arglist>(const QGraphicsItem *other, bool *ok) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransform</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setTransform</anchor>
            <arglist>(const QTransform &amp;matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetTransform</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>resetTransform</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>scale-2</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shear</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>shear</anchor>
            <arglist>(qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qgraphicsitem-obsolete.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotation</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setRotation</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rotation</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>rotation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setScale</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>scale</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsTransform *&gt;</type>
            <name>transformations</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>transformations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransformations</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setTransformations</anchor>
            <arglist>(const QList&lt;QGraphicsTransform *&gt; &amp;transformations)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>transformOriginPoint</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>transformOriginPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransformOriginPoint</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setTransformOriginPoint</anchor>
            <arglist>(const QPointF &amp;origin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransformOriginPoint</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setTransformOriginPoint-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>advance</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>advance</anchor>
            <arglist>(int phase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>zValue</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>zValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZValue</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setZValue</anchor>
            <arglist>(qreal z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stackBefore</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>stackBefore</anchor>
            <arglist>(const QGraphicsItem *sibling)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>childrenBoundingRect</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>childrenBoundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sceneBoundingRect</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>sceneBoundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClipped</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isClipped</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>clipPath</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>clipPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>collidesWithItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>collidesWithItem</anchor>
            <arglist>(const QGraphicsItem *other, Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>collidesWithPath</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>collidesWithPath</anchor>
            <arglist>(const QPainterPath &amp;path, Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>collidingItems</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>collidingItems</anchor>
            <arglist>(Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isObscured</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isObscured</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isObscured</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isObscured-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>boundingRegion</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>boundingRegion</anchor>
            <arglist>(const QTransform &amp;itemToDeviceTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>boundingRegionGranularity</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>boundingRegionGranularity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingRegionGranularity</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setBoundingRegionGranularity</anchor>
            <arglist>(qreal granularity)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>update-2</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scroll</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>scroll</anchor>
            <arglist>(qreal dx, qreal dy, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToItem</anchor>
            <arglist>(const QGraphicsItem *item, const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToParent</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToScene</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToItem-2</anchor>
            <arglist>(const QGraphicsItem *item, const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToParent-2</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToScene-2</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectToItem</anchor>
            <arglist>(const QGraphicsItem *item, const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectToParent</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectToScene</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToItem-3</anchor>
            <arglist>(const QGraphicsItem *item, const QPolygonF &amp;polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToParent-3</anchor>
            <arglist>(const QPolygonF &amp;polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToScene-3</anchor>
            <arglist>(const QPolygonF &amp;polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>mapToItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToItem-4</anchor>
            <arglist>(const QGraphicsItem *item, const QPainterPath &amp;path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>mapToParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToParent-4</anchor>
            <arglist>(const QPainterPath &amp;path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToScene-4</anchor>
            <arglist>(const QPainterPath &amp;path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromItem</anchor>
            <arglist>(const QGraphicsItem *item, const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromParent</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromScene</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromItem-2</anchor>
            <arglist>(const QGraphicsItem *item, const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromParent-2</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromScene-2</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectFromItem</anchor>
            <arglist>(const QGraphicsItem *item, const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectFromParent</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectFromScene</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromItem-3</anchor>
            <arglist>(const QGraphicsItem *item, const QPolygonF &amp;polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromParent-3</anchor>
            <arglist>(const QPolygonF &amp;polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromScene-3</anchor>
            <arglist>(const QPolygonF &amp;polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>mapFromItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromItem-4</anchor>
            <arglist>(const QGraphicsItem *item, const QPainterPath &amp;path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>mapFromParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromParent-4</anchor>
            <arglist>(const QPainterPath &amp;path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromScene-4</anchor>
            <arglist>(const QPainterPath &amp;path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToItem-6</anchor>
            <arglist>(const QGraphicsItem *item, qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToParent-6</anchor>
            <arglist>(qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToScene-6</anchor>
            <arglist>(qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToItem-5</anchor>
            <arglist>(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToParent-5</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapToScene-5</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectToItem-2</anchor>
            <arglist>(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectToParent-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectToScene-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromItem-6</anchor>
            <arglist>(const QGraphicsItem *item, qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromParent-6</anchor>
            <arglist>(qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromScene-6</anchor>
            <arglist>(qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromItem-5</anchor>
            <arglist>(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromParent-5</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapFromScene-5</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectFromItem-2</anchor>
            <arglist>(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromParent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectFromParent-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromScene</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mapRectFromScene-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAncestorOf</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isAncestorOf</anchor>
            <arglist>(const QGraphicsItem *child) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>commonAncestorItem</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>commonAncestorItem</anchor>
            <arglist>(const QGraphicsItem *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUnderMouse</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>isUnderMouse</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(int key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::InputMethodHints</type>
            <name>inputMethodHints</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>inputMethodHints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputMethodHints</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>setInputMethodHints</anchor>
            <arglist>(Qt::InputMethodHints hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installSceneEventFilter</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>installSceneEventFilter</anchor>
            <arglist>(QGraphicsItem *filterItem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeSceneEventFilter</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>removeSceneEventFilter</anchor>
            <arglist>(QGraphicsItem *filterItem)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>updateMicroFocus</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>updateMicroFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>sceneEventFilter</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>sceneEventFilter</anchor>
            <arglist>(QGraphicsItem *watched, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>sceneEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>sceneEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QGraphicsSceneContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverEnterEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>hoverEnterEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverMoveEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>hoverMoveEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverLeaveEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>hoverLeaveEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QGraphicsSceneWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>itemChange</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>itemChange</anchor>
            <arglist>(GraphicsItemChange change, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>prepareGeometryChange</name>
            <anchorfile>qgraphicsitem.html</anchorfile>
            <anchor>prepareGeometryChange</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsObject</name>
        <filename>qgraphicsobject.html</filename>
        <base>QObject</base>
        <base>QGraphicsItem</base>
        <member kind="property" type="QGraphicsObject *">
            <name>parent</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>opacity</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>pos</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>pos-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>rotation</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>scale</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>transformOriginPoint</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>transformOriginPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGraphicsEffect *">
            <name>effect</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsObject</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>QGraphicsObject</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsObject</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>dtor.QGraphicsObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabGesture</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>grabGesture</anchor>
            <arglist>(Qt::GestureType gesture, Qt::GestureFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungrabGesture</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>ungrabGesture</anchor>
            <arglist>(Qt::GestureType gesture)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>updateMicroFocus</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>updateMicroFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parentChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opacityChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibleChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qgraphicsobject.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractGraphicsShapeItem</name>
        <filename>qabstractgraphicsshapeitem.html</filename>
        <base>QGraphicsItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractGraphicsShapeItem</name>
            <anchorfile>qabstractgraphicsshapeitem.html</anchorfile>
            <anchor>QAbstractGraphicsShapeItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractGraphicsShapeItem</name>
            <anchorfile>qabstractgraphicsshapeitem.html</anchorfile>
            <anchor>dtor.QAbstractGraphicsShapeItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen</type>
            <name>pen</name>
            <anchorfile>qabstractgraphicsshapeitem.html</anchorfile>
            <anchor>pen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPen</name>
            <anchorfile>qabstractgraphicsshapeitem.html</anchorfile>
            <anchor>setPen</anchor>
            <arglist>(const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>brush</name>
            <anchorfile>qabstractgraphicsshapeitem.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qabstractgraphicsshapeitem.html</anchorfile>
            <anchor>setBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qabstractgraphicsshapeitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qabstractgraphicsshapeitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsPathItem</name>
        <filename>qgraphicspathitem.html</filename>
        <base>QAbstractGraphicsShapeItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsPathItem</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>QGraphicsPathItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsPathItem</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>QGraphicsPathItem-2</anchor>
            <arglist>(const QPainterPath &amp;path, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsPathItem</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>dtor.QGraphicsPathItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>path</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicspathitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsRectItem</name>
        <filename>qgraphicsrectitem.html</filename>
        <base>QAbstractGraphicsShapeItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsRectItem</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>QGraphicsRectItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsRectItem</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>QGraphicsRectItem-2</anchor>
            <arglist>(const QRectF &amp;rect, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsRectItem</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>QGraphicsRectItem-3</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsRectItem</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>dtor.QGraphicsRectItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>setRect-2</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicsrectitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsEllipseItem</name>
        <filename>qgraphicsellipseitem.html</filename>
        <base>QAbstractGraphicsShapeItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsEllipseItem</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>QGraphicsEllipseItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsEllipseItem</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>QGraphicsEllipseItem-2</anchor>
            <arglist>(const QRectF &amp;rect, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsEllipseItem</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>QGraphicsEllipseItem-3</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsEllipseItem</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>dtor.QGraphicsEllipseItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>setRect-2</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startAngle</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>startAngle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartAngle</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>setStartAngle</anchor>
            <arglist>(int angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>spanAngle</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>spanAngle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpanAngle</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>setSpanAngle</anchor>
            <arglist>(int angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicsellipseitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsPolygonItem</name>
        <filename>qgraphicspolygonitem.html</filename>
        <base>QAbstractGraphicsShapeItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsPolygonItem</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>QGraphicsPolygonItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsPolygonItem</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>QGraphicsPolygonItem-2</anchor>
            <arglist>(const QPolygonF &amp;polygon, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsPolygonItem</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>dtor.QGraphicsPolygonItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>polygon</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>polygon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPolygon</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>setPolygon</anchor>
            <arglist>(const QPolygonF &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::FillRule</type>
            <name>fillRule</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>fillRule</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFillRule</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>setFillRule</anchor>
            <arglist>(Qt::FillRule rule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicspolygonitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsLineItem</name>
        <filename>qgraphicslineitem.html</filename>
        <base>QGraphicsItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsLineItem</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>QGraphicsLineItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsLineItem</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>QGraphicsLineItem-2</anchor>
            <arglist>(const QLineF &amp;line, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsLineItem</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>QGraphicsLineItem-3</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsLineItem</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>dtor.QGraphicsLineItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen</type>
            <name>pen</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>pen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPen</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>setPen</anchor>
            <arglist>(const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>line</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>line</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLine</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>setLine</anchor>
            <arglist>(const QLineF &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLine</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>setLine-2</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicslineitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsPixmapItem</name>
        <filename>qgraphicspixmapitem.html</filename>
        <base>QGraphicsItem</base>
        <member kind="enum">
            <name>ShapeMode</name>
            <anchor>ShapeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaskShape">
            <anchor>ShapeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BoundingRectShape">
            <anchor>ShapeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HeuristicMaskShape">
            <anchor>ShapeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsPixmapItem</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>QGraphicsPixmapItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsPixmapItem</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>QGraphicsPixmapItem-2</anchor>
            <arglist>(const QPixmap &amp;pixmap, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsPixmapItem</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>dtor.QGraphicsPixmapItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>setPixmap</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TransformationMode</type>
            <name>transformationMode</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>transformationMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransformationMode</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>setTransformationMode</anchor>
            <arglist>(Qt::TransformationMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>offset</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>offset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>setOffset</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>setOffset-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ShapeMode</type>
            <name>shapeMode</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>shapeMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShapeMode</name>
            <anchorfile>qgraphicspixmapitem.html</anchorfile>
            <anchor>setShapeMode</anchor>
            <arglist>(ShapeMode mode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsTextItem</name>
        <filename>qgraphicstextitem.html</filename>
        <base>QGraphicsObject</base>
        <member kind="property" type="bool">
            <name>openExternalLinks</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTextCursor">
            <name>textCursor</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>textCursor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsTextItem</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>QGraphicsTextItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsTextItem</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>QGraphicsTextItem-2</anchor>
            <arglist>(const QString &amp;text, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsTextItem</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>dtor.QGraphicsTextItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toHtml</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>toHtml</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHtml</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>setHtml</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toPlainText</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>toPlainText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlainText</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>setPlainText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultTextColor</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>setDefaultTextColor</anchor>
            <arglist>(const QColor &amp;col)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>defaultTextColor</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>defaultTextColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextWidth</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>setTextWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>textWidth</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>textWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjustSize</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>adjustSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocument</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>setDocument</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextInteractionFlags</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>setTextInteractionFlags</anchor>
            <arglist>(Qt::TextInteractionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextInteractionFlags</type>
            <name>textInteractionFlags</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>textInteractionFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabChangesFocus</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>setTabChangesFocus</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabChangesFocus</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>tabChangesFocus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpenExternalLinks</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist>(bool open)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>openExternalLinks</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextCursor</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>textCursor-prop</anchor>
            <arglist>(const QTextCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>textCursor</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>textCursor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linkActivated</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>linkActivated</anchor>
            <arglist>(const QString &amp;link)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linkHovered</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>linkHovered</anchor>
            <arglist>(const QString &amp;link)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>sceneEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>sceneEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QGraphicsSceneContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverEnterEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>hoverEnterEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverMoveEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>hoverMoveEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverLeaveEvent</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>hoverLeaveEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qgraphicstextitem.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSimpleTextItem</name>
        <filename>qgraphicssimpletextitem.html</filename>
        <base>QAbstractGraphicsShapeItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsSimpleTextItem</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>QGraphicsSimpleTextItem</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsSimpleTextItem</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>QGraphicsSimpleTextItem-2</anchor>
            <arglist>(const QString &amp;text, QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSimpleTextItem</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>dtor.QGraphicsSimpleTextItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicssimpletextitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsItemGroup</name>
        <filename>qgraphicsitemgroup.html</filename>
        <base>QGraphicsItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsItemGroup</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>QGraphicsItemGroup</anchor>
            <arglist>(QGraphicsItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsItemGroup</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>dtor.QGraphicsItemGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addToGroup</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>addToGroup</anchor>
            <arglist>(QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFromGroup</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>removeFromGroup</anchor>
            <arglist>(QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isObscuredBy</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>isObscuredBy</anchor>
            <arglist>(const QGraphicsItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>opaqueArea</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>opaqueArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicsitemgroup.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsItemAnimation</name>
        <filename>qgraphicsitemanimation.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsItemAnimation</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>QGraphicsItemAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGraphicsItemAnimation</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>dtor.QGraphicsItemAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>item</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>item</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>setItem</anchor>
            <arglist>(QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeLine *</type>
            <name>timeLine</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>timeLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeLine</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>setTimeLine</anchor>
            <arglist>(QTimeLine *timeLine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>posAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>posAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPair&lt;qreal, QPointF&gt; &gt;</type>
            <name>posList</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>posList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>setPosAt</anchor>
            <arglist>(qreal step, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>matrixAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>matrixAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rotationAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>rotationAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPair&lt;qreal, qreal&gt; &gt;</type>
            <name>rotationList</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>rotationList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>setRotationAt</anchor>
            <arglist>(qreal step, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>xTranslationAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>xTranslationAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>yTranslationAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>yTranslationAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPair&lt;qreal, QPointF&gt; &gt;</type>
            <name>translationList</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>translationList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTranslationAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>setTranslationAt</anchor>
            <arglist>(qreal step, qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>verticalScaleAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>verticalScaleAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>horizontalScaleAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>horizontalScaleAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPair&lt;qreal, QPointF&gt; &gt;</type>
            <name>scaleList</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>scaleList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaleAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>setScaleAt</anchor>
            <arglist>(qreal step, qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>verticalShearAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>verticalShearAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>horizontalShearAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>horizontalShearAt</anchor>
            <arglist>(qreal step) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPair&lt;qreal, QPointF&gt; &gt;</type>
            <name>shearList</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>shearList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShearAt</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>setShearAt</anchor>
            <arglist>(qreal step, qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStep</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>setStep</anchor>
            <arglist>(qreal step)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qgraphicsitemanimation-obsolete.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>beforeAnimationStep</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>beforeAnimationStep</anchor>
            <arglist>(qreal step)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>afterAnimationStep</name>
            <anchorfile>qgraphicsitemanimation.html</anchorfile>
            <anchor>afterAnimationStep</anchor>
            <arglist>(qreal step)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsLayout</name>
        <filename>qgraphicslayout.html</filename>
        <base>QGraphicsLayoutItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsLayout</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>QGraphicsLayout</anchor>
            <arglist>(QGraphicsLayoutItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsLayout</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>dtor.QGraphicsLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsMargins</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>setContentsMargins</anchor>
            <arglist>(qreal left, qreal top, qreal right, qreal bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>getContentsMargins</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>getContentsMargins</anchor>
            <arglist>(qreal *left, qreal *top, qreal *right, qreal *bottom) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activate</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>activate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActivated</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>isActivated</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateGeometry</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>updateGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>widgetEvent</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>widgetEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QGraphicsLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int i) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>removeAt</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int index) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addChildLayoutItem</name>
            <anchorfile>qgraphicslayout.html</anchorfile>
            <anchor>addChildLayoutItem</anchor>
            <arglist>(QGraphicsLayoutItem *layoutItem)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsLayoutItem</name>
        <filename>qgraphicslayoutitem.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsLayoutItem</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>QGraphicsLayoutItem</anchor>
            <arglist>(QGraphicsLayoutItem *parent, bool isLayout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGraphicsLayoutItem</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>dtor.QGraphicsLayoutItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizePolicy</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setSizePolicy</anchor>
            <arglist>(const QSizePolicy &amp;policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizePolicy</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setSizePolicy-2</anchor>
            <arglist>(QSizePolicy::Policy hPolicy, QSizePolicy::Policy vPolicy, QSizePolicy::ControlType controlType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizePolicy</type>
            <name>sizePolicy</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>sizePolicy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setMinimumSize</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setMinimumSize-2</anchor>
            <arglist>(qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>minimumSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumWidth</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setMinimumWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minimumWidth</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>minimumWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumHeight</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setMinimumHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minimumHeight</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>minimumHeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreferredSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setPreferredSize</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreferredSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setPreferredSize-2</anchor>
            <arglist>(qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>preferredSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>preferredSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreferredWidth</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setPreferredWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>preferredWidth</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>preferredWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreferredHeight</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setPreferredHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>preferredHeight</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>preferredHeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setMaximumSize</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setMaximumSize-2</anchor>
            <arglist>(qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>maximumSize</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumWidth</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setMaximumWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumWidth</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>maximumWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumHeight</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setMaximumHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumHeight</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>maximumHeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>geometry</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>getContentsMargins</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>getContentsMargins</anchor>
            <arglist>(qreal *left, qreal *top, qreal *right, qreal *bottom) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>contentsRect</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>contentsRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>effectiveSizeHint</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>effectiveSizeHint</anchor>
            <arglist>(Qt::SizeHint which, const QSizeF &amp;constraint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateGeometry</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>updateGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsLayoutItem *</type>
            <name>parentLayoutItem</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>parentLayoutItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParentLayoutItem</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setParentLayoutItem</anchor>
            <arglist>(QGraphicsLayoutItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLayout</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>isLayout</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>graphicsItem</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>graphicsItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownedByLayout</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>ownedByLayout</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setGraphicsItem</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setGraphicsItem</anchor>
            <arglist>(QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setOwnedByLayout</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>setOwnedByLayout</anchor>
            <arglist>(bool ownership)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual QSizeF</type>
            <name>sizeHint</name>
            <anchorfile>qgraphicslayoutitem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(Qt::SizeHint which, const QSizeF &amp;constraint) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsLinearLayout</name>
        <filename>qgraphicslinearlayout.html</filename>
        <base>QGraphicsLayout</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsLinearLayout</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>QGraphicsLinearLayout</anchor>
            <arglist>(QGraphicsLayoutItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsLinearLayout</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>QGraphicsLinearLayout-2</anchor>
            <arglist>(Qt::Orientation orientation, QGraphicsLayoutItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGraphicsLinearLayout</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>dtor.QGraphicsLinearLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>setOrientation</anchor>
            <arglist>(Qt::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QGraphicsLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addStretch</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>addStretch</anchor>
            <arglist>(int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertItem</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>insertItem</anchor>
            <arglist>(int index, QGraphicsLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertStretch</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>insertStretch</anchor>
            <arglist>(int index, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItem</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(QGraphicsLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>removeAt</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>setSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>spacing</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>spacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemSpacing</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>setItemSpacing</anchor>
            <arglist>(int index, qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>itemSpacing</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>itemSpacing</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStretchFactor</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>setStretchFactor</anchor>
            <arglist>(QGraphicsLayoutItem *item, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>stretchFactor</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>stretchFactor</anchor>
            <arglist>(QGraphicsLayoutItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(QGraphicsLayoutItem *item, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>(QGraphicsLayoutItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGraphicsLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSizeF</type>
            <name>sizeHint</name>
            <anchorfile>qgraphicslinearlayout.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(Qt::SizeHint which, const QSizeF &amp;constraint) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsProxyWidget</name>
        <filename>qgraphicsproxywidget.html</filename>
        <base>QGraphicsWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsProxyWidget</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>QGraphicsProxyWidget</anchor>
            <arglist>(QGraphicsItem *parent, Qt::WindowFlags wFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsProxyWidget</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>dtor.QGraphicsProxyWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidget</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>setWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>subWidgetRect</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>subWidgetRect</anchor>
            <arglist>(const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsProxyWidget *</type>
            <name>createProxyForChildWidget</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>createProxyForChildWidget</anchor>
            <arglist>(QWidget *child)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>itemChange</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>itemChange</anchor>
            <arglist>(GraphicsItemChange change, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *object, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QGraphicsSceneContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverEnterEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>hoverEnterEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverLeaveEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>hoverLeaveEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverMoveEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>hoverMoveEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>grabMouseEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>grabMouseEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ungrabMouseEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>ungrabMouseEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QGraphicsSceneWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSizeF</type>
            <name>sizeHint</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(Qt::SizeHint which, const QSizeF &amp;constraint) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QGraphicsSceneResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QGraphicsProxyWidget *</type>
            <name>newProxyWidget</name>
            <anchorfile>qgraphicsproxywidget.html</anchorfile>
            <anchor>newProxyWidget</anchor>
            <arglist>(const QWidget *child)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsScene</name>
        <filename>qgraphicsscene.html</filename>
        <base>QObject</base>
        <member kind="property" type="QBrush">
            <name>backgroundBrush</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>backgroundBrush-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QBrush">
            <name>foregroundBrush</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>foregroundBrush-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ItemIndexMethod">
            <name>itemIndexMethod</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>itemIndexMethod-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>sceneRect</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>sceneRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>bspTreeDepth</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>bspTreeDepth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPalette">
            <name>palette</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>sortCacheEnabled</name>
            <anchorfile>qgraphicsscene-obsolete.html</anchorfile>
            <anchor>sortCacheEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>stickyFocus</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>stickyFocus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>minimumRenderSize</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>minimumRenderSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ItemIndexMethod</name>
            <anchor>ItemIndexMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BspTreeIndex">
            <anchor>ItemIndexMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoIndex">
            <anchor>ItemIndexMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SceneLayer</name>
            <anchor>SceneLayer-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemLayer">
            <anchor>SceneLayer-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundLayer">
            <anchor>SceneLayer-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForegroundLayer">
            <anchor>SceneLayer-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllLayers">
            <anchor>SceneLayer-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGraphicsScene::SceneLayer">
            <name>SceneLayers</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>SceneLayer-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsScene</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>QGraphicsScene</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsScene</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>QGraphicsScene-2</anchor>
            <arglist>(const QRectF &amp;sceneRect, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsScene</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>QGraphicsScene-3</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGraphicsScene</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>dtor.QGraphicsScene</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sceneRect</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>sceneRect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSceneRect</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>sceneRect-prop</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSceneRect</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>sceneRect-prop</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>render</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>render</anchor>
            <arglist>(QPainter *painter, const QRectF &amp;target, const QRectF &amp;source, Qt::AspectRatioMode aspectRatioMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ItemIndexMethod</type>
            <name>itemIndexMethod</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>itemIndexMethod-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemIndexMethod</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>itemIndexMethod-prop</anchor>
            <arglist>(ItemIndexMethod method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSortCacheEnabled</name>
            <anchorfile>qgraphicsscene-obsolete.html</anchorfile>
            <anchor>sortCacheEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortCacheEnabled</name>
            <anchorfile>qgraphicsscene-obsolete.html</anchorfile>
            <anchor>sortCacheEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bspTreeDepth</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>bspTreeDepth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBspTreeDepth</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>bspTreeDepth-prop</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>itemsBoundingRect</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>itemsBoundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>items</anchor>
            <arglist>(Qt::SortOrder order) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>items-2</anchor>
            <arglist>(const QPointF &amp;pos, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform &amp;deviceTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>items-5</anchor>
            <arglist>(const QRectF &amp;rect, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform &amp;deviceTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>items-6</anchor>
            <arglist>(const QPolygonF &amp;polygon, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform &amp;deviceTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>items-7</anchor>
            <arglist>(const QPainterPath &amp;path, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform &amp;deviceTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>collidingItems</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>collidingItems</anchor>
            <arglist>(const QGraphicsItem *item, Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsscene-obsolete.html</anchorfile>
            <anchor>itemAt-2</anchor>
            <arglist>(const QPointF &amp;position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(const QPointF &amp;position, const QTransform &amp;deviceTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsscene-obsolete.html</anchorfile>
            <anchor>items-3</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>items-4</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform &amp;deviceTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsscene-obsolete.html</anchorfile>
            <anchor>itemAt-4</anchor>
            <arglist>(qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>itemAt-3</anchor>
            <arglist>(qreal x, qreal y, const QTransform &amp;deviceTransform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>selectedItems</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>selectedItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>selectionArea</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>selectionArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionArea</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>setSelectionArea</anchor>
            <arglist>(const QPainterPath &amp;path, const QTransform &amp;deviceTransform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionArea</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>setSelectionArea-2</anchor>
            <arglist>(const QPainterPath &amp;path, Qt::ItemSelectionMode mode, const QTransform &amp;deviceTransform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionArea</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>setSelectionArea-3</anchor>
            <arglist>(const QPainterPath &amp;path, Qt::ItemSelectionOperation selectionOperation, Qt::ItemSelectionMode mode, const QTransform &amp;deviceTransform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItemGroup *</type>
            <name>createItemGroup</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>createItemGroup</anchor>
            <arglist>(const QList&lt;QGraphicsItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroyItemGroup</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>destroyItemGroup</anchor>
            <arglist>(QGraphicsItemGroup *group)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsEllipseItem *</type>
            <name>addEllipse</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addEllipse</anchor>
            <arglist>(const QRectF &amp;rect, const QPen &amp;pen, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsLineItem *</type>
            <name>addLine</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addLine</anchor>
            <arglist>(const QLineF &amp;line, const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsPathItem *</type>
            <name>addPath</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addPath</anchor>
            <arglist>(const QPainterPath &amp;path, const QPen &amp;pen, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsPixmapItem *</type>
            <name>addPixmap</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addPixmap</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsPolygonItem *</type>
            <name>addPolygon</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addPolygon</anchor>
            <arglist>(const QPolygonF &amp;polygon, const QPen &amp;pen, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsRectItem *</type>
            <name>addRect</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addRect</anchor>
            <arglist>(const QRectF &amp;rect, const QPen &amp;pen, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsTextItem *</type>
            <name>addText</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addText</anchor>
            <arglist>(const QString &amp;text, const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsSimpleTextItem *</type>
            <name>addSimpleText</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addSimpleText</anchor>
            <arglist>(const QString &amp;text, const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsProxyWidget *</type>
            <name>addWidget</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *widget, Qt::WindowFlags wFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsEllipseItem *</type>
            <name>addEllipse</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addEllipse-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, const QPen &amp;pen, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsLineItem *</type>
            <name>addLine</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addLine-2</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2, const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsRectItem *</type>
            <name>addRect</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>addRect-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, const QPen &amp;pen, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItem</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>focusItem</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>focusItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocusItem</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>setFocusItem</anchor>
            <arglist>(QGraphicsItem *item, Qt::FocusReason focusReason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFocus</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>hasFocus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>setFocus</anchor>
            <arglist>(Qt::FocusReason focusReason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearFocus</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>clearFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStickyFocus</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>stickyFocus-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>stickyFocus</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>stickyFocus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>mouseGrabberItem</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>mouseGrabberItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>backgroundBrush</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>backgroundBrush-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundBrush</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>backgroundBrush-prop</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foregroundBrush</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>foregroundBrush-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForegroundBrush</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>foregroundBrush-prop</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsView *&gt;</type>
            <name>views</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>views</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>update-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>invalidate-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, SceneLayers layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStyle *</type>
            <name>style</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(QStyle *style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette</type>
            <name>palette</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPalette</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist>(const QPalette &amp;palette)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>activePanel</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>activePanel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActivePanel</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>setActivePanel</anchor>
            <arglist>(QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsWidget *</type>
            <name>activeWindow</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>activeWindow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveWindow</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>setActiveWindow</anchor>
            <arglist>(QGraphicsWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sendEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>sendEvent</anchor>
            <arglist>(QGraphicsItem *item, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minimumRenderSize</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>minimumRenderSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumRenderSize</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>minimumRenderSize-prop</anchor>
            <arglist>(qreal minSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>(const QRectF &amp;rect, SceneLayers layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>advance</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>advance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearSelection</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>clearSelection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *watched, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QGraphicsSceneContextMenuEvent *contextMenuEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QGraphicsSceneDragDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *focusEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *focusEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>helpEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>helpEvent</anchor>
            <arglist>(QGraphicsSceneHelpEvent *helpEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *keyEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *keyEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QGraphicsSceneMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QGraphicsSceneWheelEvent *wheelEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawBackground</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>drawBackground</anchor>
            <arglist>(QPainter *painter, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawForeground</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>drawForeground</anchor>
            <arglist>(QPainter *painter, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawItems</name>
            <anchorfile>qgraphicsscene-obsolete.html</anchorfile>
            <anchor>drawItems</anchor>
            <arglist>(QPainter *painter, int numItems, QGraphicsItem *[] items, const QStyleOptionGraphicsItem[] options, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>changed</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>changed</anchor>
            <arglist>(const QList&lt;QRectF&gt; &amp;region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneRectChanged</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>sceneRectChanged</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusItemChanged</name>
            <anchorfile>qgraphicsscene.html</anchorfile>
            <anchor>focusItemChanged</anchor>
            <arglist>(QGraphicsItem *newFocusItem, QGraphicsItem *oldFocusItem, Qt::FocusReason reason)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneEvent</name>
        <filename>qgraphicssceneevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneEvent</name>
            <anchorfile>qgraphicssceneevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qgraphicssceneevent.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneMouseEvent</name>
        <filename>qgraphicsscenemouseevent.html</filename>
        <base>QGraphicsSceneEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneMouseEvent</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneMouseEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>screenPos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>buttonDownPos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>buttonDownPos</anchor>
            <arglist>(Qt::MouseButton button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>buttonDownScenePos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>buttonDownScenePos</anchor>
            <arglist>(Qt::MouseButton button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>buttonDownScreenPos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>buttonDownScreenPos</anchor>
            <arglist>(Qt::MouseButton button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastPos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>lastPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastScenePos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>lastScenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>lastScreenPos</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>lastScreenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>buttons</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButton</type>
            <name>button</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseEventSource</type>
            <name>source</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseEventFlags</type>
            <name>flags</name>
            <anchorfile>qgraphicsscenemouseevent.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneWheelEvent</name>
        <filename>qgraphicsscenewheelevent.html</filename>
        <base>QGraphicsSceneEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneWheelEvent</name>
            <anchorfile>qgraphicsscenewheelevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneWheelEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pos</name>
            <anchorfile>qgraphicsscenewheelevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qgraphicsscenewheelevent.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>screenPos</name>
            <anchorfile>qgraphicsscenewheelevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>buttons</name>
            <anchorfile>qgraphicsscenewheelevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qgraphicsscenewheelevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>delta</name>
            <anchorfile>qgraphicsscenewheelevent.html</anchorfile>
            <anchor>delta</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qgraphicsscenewheelevent.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneContextMenuEvent</name>
        <filename>qgraphicsscenecontextmenuevent.html</filename>
        <base>QGraphicsSceneEvent</base>
        <member kind="enum">
            <name>Reason</name>
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mouse">
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keyboard">
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other">
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneContextMenuEvent</name>
            <anchorfile>qgraphicsscenecontextmenuevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneContextMenuEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pos</name>
            <anchorfile>qgraphicsscenecontextmenuevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qgraphicsscenecontextmenuevent.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>screenPos</name>
            <anchorfile>qgraphicsscenecontextmenuevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qgraphicsscenecontextmenuevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Reason</type>
            <name>reason</name>
            <anchorfile>qgraphicsscenecontextmenuevent.html</anchorfile>
            <anchor>reason</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneHoverEvent</name>
        <filename>qgraphicsscenehoverevent.html</filename>
        <base>QGraphicsSceneEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneHoverEvent</name>
            <anchorfile>qgraphicsscenehoverevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneHoverEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pos</name>
            <anchorfile>qgraphicsscenehoverevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qgraphicsscenehoverevent.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>screenPos</name>
            <anchorfile>qgraphicsscenehoverevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastPos</name>
            <anchorfile>qgraphicsscenehoverevent.html</anchorfile>
            <anchor>lastPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastScenePos</name>
            <anchorfile>qgraphicsscenehoverevent.html</anchorfile>
            <anchor>lastScenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>lastScreenPos</name>
            <anchorfile>qgraphicsscenehoverevent.html</anchorfile>
            <anchor>lastScreenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qgraphicsscenehoverevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneHelpEvent</name>
        <filename>qgraphicsscenehelpevent.html</filename>
        <base>QGraphicsSceneEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneHelpEvent</name>
            <anchorfile>qgraphicsscenehelpevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneHelpEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qgraphicsscenehelpevent.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>screenPos</name>
            <anchorfile>qgraphicsscenehelpevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneDragDropEvent</name>
        <filename>qgraphicsscenedragdropevent.html</filename>
        <base>QGraphicsSceneEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneDragDropEvent</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneDragDropEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pos</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>screenPos</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>buttons</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropActions</type>
            <name>possibleActions</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>possibleActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>proposedAction</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>proposedAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptProposedAction</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>acceptProposedAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>dropAction</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>dropAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDropAction</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>setDropAction</anchor>
            <arglist>(Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>source</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qgraphicsscenedragdropevent.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneResizeEvent</name>
        <filename>qgraphicssceneresizeevent.html</filename>
        <base>QGraphicsSceneEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsSceneResizeEvent</name>
            <anchorfile>qgraphicssceneresizeevent.html</anchorfile>
            <anchor>QGraphicsSceneResizeEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneResizeEvent</name>
            <anchorfile>qgraphicssceneresizeevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneResizeEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>oldSize</name>
            <anchorfile>qgraphicssceneresizeevent.html</anchorfile>
            <anchor>oldSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>newSize</name>
            <anchorfile>qgraphicssceneresizeevent.html</anchorfile>
            <anchor>newSize</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsSceneMoveEvent</name>
        <filename>qgraphicsscenemoveevent.html</filename>
        <base>QGraphicsSceneEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsSceneMoveEvent</name>
            <anchorfile>qgraphicsscenemoveevent.html</anchorfile>
            <anchor>QGraphicsSceneMoveEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsSceneMoveEvent</name>
            <anchorfile>qgraphicsscenemoveevent.html</anchorfile>
            <anchor>dtor.QGraphicsSceneMoveEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>oldPos</name>
            <anchorfile>qgraphicsscenemoveevent.html</anchorfile>
            <anchor>oldPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>newPos</name>
            <anchorfile>qgraphicsscenemoveevent.html</anchorfile>
            <anchor>newPos</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsTransform</name>
        <filename>qgraphicstransform.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsTransform</name>
            <anchorfile>qgraphicstransform.html</anchorfile>
            <anchor>QGraphicsTransform</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsTransform</name>
            <anchorfile>qgraphicstransform.html</anchorfile>
            <anchor>dtor.QGraphicsTransform</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>applyTo</name>
            <anchorfile>qgraphicstransform.html</anchorfile>
            <anchor>applyTo</anchor>
            <arglist>(QMatrix4x4 *matrix) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qgraphicstransform.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsScale</name>
        <filename>qgraphicsscale.html</filename>
        <base>QGraphicsTransform</base>
        <member kind="property" type="QVector3D">
            <name>origin</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>xScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>xScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>yScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>yScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>zScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>zScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>QGraphicsScale</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>dtor.QGraphicsScale</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>origin</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrigin</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>(const QVector3D &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>xScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>xScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>xScale-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>yScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>yScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>yScale-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>zScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>zScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZScale</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>zScale-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>applyTo</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>applyTo</anchor>
            <arglist>(QMatrix4x4 *matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>originChanged</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xScaleChanged</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>xScale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yScaleChanged</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>yScale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zScaleChanged</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>zScale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qgraphicsscale.html</anchorfile>
            <anchor>scaleChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsRotation</name>
        <filename>qgraphicsrotation.html</filename>
        <base>QGraphicsTransform</base>
        <member kind="property" type="QVector3D">
            <name>origin</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>angle</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>angle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>axis</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsRotation</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>QGraphicsRotation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsRotation</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>dtor.QGraphicsRotation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>origin</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrigin</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>(const QVector3D &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angle</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>angle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAngle</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>angle-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>axis</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxis</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxis</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(Qt::Axis axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>applyTo</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>applyTo</anchor>
            <arglist>(QMatrix4x4 *matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>originChanged</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>angleChanged</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>angle-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axisChanged</name>
            <anchorfile>qgraphicsrotation.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsView</name>
        <filename>qgraphicsview.html</filename>
        <base>QAbstractScrollArea</base>
        <member kind="property" type="QBrush">
            <name>backgroundBrush</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>backgroundBrush-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QBrush">
            <name>foregroundBrush</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>foregroundBrush-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>interactive</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>interactive-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>sceneRect</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>sceneRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>alignment</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPainter::RenderHints">
            <name>renderHints</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>renderHints-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="DragMode">
            <name>dragMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>dragMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="CacheMode">
            <name>cacheMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ViewportAnchor">
            <name>transformationAnchor</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>transformationAnchor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ViewportAnchor">
            <name>resizeAnchor</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>resizeAnchor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ViewportUpdateMode">
            <name>viewportUpdateMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>viewportUpdateMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ItemSelectionMode">
            <name>rubberBandSelectionMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>rubberBandSelectionMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="OptimizationFlags">
            <name>optimizationFlags</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>optimizationFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ViewportAnchor</name>
            <anchor>ViewportAnchor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoAnchor">
            <anchor>ViewportAnchor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorViewCenter">
            <anchor>ViewportAnchor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorUnderMouse">
            <anchor>ViewportAnchor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CacheModeFlag</name>
            <anchor>CacheModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheNone">
            <anchor>CacheModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheBackground">
            <anchor>CacheModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGraphicsView::CacheModeFlag">
            <name>CacheMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>CacheModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DragMode</name>
            <anchor>DragMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDrag">
            <anchor>DragMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollHandDrag">
            <anchor>DragMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RubberBandDrag">
            <anchor>DragMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ViewportUpdateMode</name>
            <anchor>ViewportUpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FullViewportUpdate">
            <anchor>ViewportUpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinimalViewportUpdate">
            <anchor>ViewportUpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SmartViewportUpdate">
            <anchor>ViewportUpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoViewportUpdate">
            <anchor>ViewportUpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BoundingRectViewportUpdate">
            <anchor>ViewportUpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>OptimizationFlag</name>
            <anchor>OptimizationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontClipPainter">
            <anchor>OptimizationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontSavePainterState">
            <anchor>OptimizationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontAdjustForAntialiasing">
            <anchor>OptimizationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndirectPainting">
            <anchor>OptimizationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGraphicsView::OptimizationFlag">
            <name>OptimizationFlags</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>OptimizationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsView</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>QGraphicsView</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsView</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>QGraphicsView-2</anchor>
            <arglist>(QGraphicsScene *scene, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsView</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>dtor.QGraphicsView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter::RenderHints</type>
            <name>renderHints</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>renderHints-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderHint</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>setRenderHint</anchor>
            <arglist>(QPainter::RenderHint hint, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderHints</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>renderHints-prop</anchor>
            <arglist>(QPainter::RenderHints hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ViewportAnchor</type>
            <name>transformationAnchor</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>transformationAnchor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransformationAnchor</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>transformationAnchor-prop</anchor>
            <arglist>(ViewportAnchor anchor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ViewportAnchor</type>
            <name>resizeAnchor</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>resizeAnchor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeAnchor</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>resizeAnchor-prop</anchor>
            <arglist>(ViewportAnchor anchor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ViewportUpdateMode</type>
            <name>viewportUpdateMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>viewportUpdateMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportUpdateMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>viewportUpdateMode-prop</anchor>
            <arglist>(ViewportUpdateMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OptimizationFlags</type>
            <name>optimizationFlags</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>optimizationFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptimizationFlag</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>setOptimizationFlag</anchor>
            <arglist>(OptimizationFlag flag, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptimizationFlags</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>optimizationFlags-prop</anchor>
            <arglist>(OptimizationFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DragMode</type>
            <name>dragMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>dragMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>dragMode-prop</anchor>
            <arglist>(DragMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemSelectionMode</type>
            <name>rubberBandSelectionMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>rubberBandSelectionMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRubberBandSelectionMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>rubberBandSelectionMode-prop</anchor>
            <arglist>(Qt::ItemSelectionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>rubberBandRect</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>rubberBandRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CacheMode</type>
            <name>cacheMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCacheMode</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist>(CacheMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetCachedContent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>resetCachedContent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInteractive</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>interactive-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInteractive</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>interactive-prop</anchor>
            <arglist>(bool allowed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsScene *</type>
            <name>scene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>setScene</anchor>
            <arglist>(QGraphicsScene *scene)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sceneRect</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>sceneRect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSceneRect</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>sceneRect-prop</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSceneRect</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>sceneRect-prop</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>matrix</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(const QMatrix &amp;matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetMatrix</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>resetMatrix</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transform</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>viewportTransform</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>viewportTransform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTransformed</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>isTransformed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransform</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>setTransform</anchor>
            <arglist>(const QTransform &amp;matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetTransform</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>resetTransform</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shear</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>shear</anchor>
            <arglist>(qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>centerOn</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>centerOn</anchor>
            <arglist>(const QPointF &amp;pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>centerOn</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>centerOn-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>centerOn</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>centerOn-3</anchor>
            <arglist>(const QGraphicsItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureVisible</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>ensureVisible</anchor>
            <arglist>(const QRectF &amp;rect, int xmargin, int ymargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureVisible</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>ensureVisible-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, int xmargin, int ymargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureVisible</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>ensureVisible-3</anchor>
            <arglist>(const QGraphicsItem *item, int xmargin, int ymargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fitInView</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>fitInView</anchor>
            <arglist>(const QRectF &amp;rect, Qt::AspectRatioMode aspectRatioMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fitInView</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>fitInView-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, Qt::AspectRatioMode aspectRatioMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fitInView</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>fitInView-3</anchor>
            <arglist>(const QGraphicsItem *item, Qt::AspectRatioMode aspectRatioMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>render</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>render</anchor>
            <arglist>(QPainter *painter, const QRectF &amp;target, const QRect &amp;source, Qt::AspectRatioMode aspectRatioMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>items</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>items-2</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>items-3</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>items-5</anchor>
            <arglist>(const QRect &amp;rect, Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>items-4</anchor>
            <arglist>(int x, int y, int w, int h, Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>items-6</anchor>
            <arglist>(const QPolygon &amp;polygon, Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsItem *&gt;</type>
            <name>items</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>items-7</anchor>
            <arglist>(const QPainterPath &amp;path, Qt::ItemSelectionMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsItem *</type>
            <name>itemAt</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>itemAt-2</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapToScene</anchor>
            <arglist>(const QPoint &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapToScene-2</anchor>
            <arglist>(const QRect &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapToScene-3</anchor>
            <arglist>(const QPolygon &amp;polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapToScene-4</anchor>
            <arglist>(const QPainterPath &amp;path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapFromScene</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapFromScene-2</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapFromScene-3</anchor>
            <arglist>(const QPolygonF &amp;polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapFromScene-4</anchor>
            <arglist>(const QPainterPath &amp;path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapToScene-5</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>mapToScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapToScene-6</anchor>
            <arglist>(int x, int y, int w, int h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapFromScene-5</anchor>
            <arglist>(qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>mapFromScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mapFromScene-6</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>backgroundBrush</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>backgroundBrush-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundBrush</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>backgroundBrush-prop</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foregroundBrush</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>foregroundBrush-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForegroundBrush</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>foregroundBrush-prop</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>updateScene</anchor>
            <arglist>(const QList&lt;QRectF&gt; &amp;rects)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidateScene</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>invalidateScene</anchor>
            <arglist>(const QRectF &amp;rect, QGraphicsScene::SceneLayers layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateSceneRect</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>updateSceneRect</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rubberBandChanged</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>rubberBandChanged</anchor>
            <arglist>(QRect rubberBandRect, QPointF fromScenePoint, QPointF toScenePoint)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setupViewport</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>setupViewport</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>viewportEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>viewportEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollContentsBy</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>scrollContentsBy</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawBackground</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>drawBackground</anchor>
            <arglist>(QPainter *painter, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawForeground</name>
            <anchorfile>qgraphicsview.html</anchorfile>
            <anchor>drawForeground</anchor>
            <arglist>(QPainter *painter, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawItems</name>
            <anchorfile>qgraphicsview-obsolete.html</anchorfile>
            <anchor>drawItems</anchor>
            <arglist>(QPainter *painter, int numItems, QGraphicsItem *[] items, const QStyleOptionGraphicsItem[] options)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsWidget</name>
        <filename>qgraphicswidget.html</filename>
        <base>QGraphicsObject</base>
        <base>QGraphicsLayoutItem</base>
        <member kind="property" type="QPalette">
            <name>palette</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::LayoutDirection">
            <name>layoutDirection</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>size</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>minimumSize</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>minimumSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>preferredSize</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>preferredSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>maximumSize</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>maximumSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizePolicy">
            <name>sizePolicy</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>sizePolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::FocusPolicy">
            <name>focusPolicy</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>focusPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::WindowFlags">
            <name>windowFlags</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>windowTitle</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowTitle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>geometry</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoFillBackground</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>autoFillBackground-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGraphicsLayout *">
            <name>layout</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>layout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsWidget</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>QGraphicsWidget</anchor>
            <arglist>(QGraphicsItem *parent, Qt::WindowFlags wFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsWidget</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>dtor.QGraphicsWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsLayout *</type>
            <name>layout</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>layout-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayout</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>layout-prop</anchor>
            <arglist>(QGraphicsLayout *layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjustSize</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>adjustSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>layoutDirection</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayoutDirection</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetLayoutDirection</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStyle *</type>
            <name>style</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(QStyle *style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette</type>
            <name>palette</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPalette</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist>(const QPalette &amp;palette)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoFillBackground</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>autoFillBackground-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoFillBackground</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>autoFillBackground-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>(qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsMargins</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>setContentsMargins</anchor>
            <arglist>(qreal left, qreal top, qreal right, qreal bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>getContentsMargins</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>getContentsMargins</anchor>
            <arglist>(qreal *left, qreal *top, qreal *right, qreal *bottom) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowFrameMargins</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>setWindowFrameMargins</anchor>
            <arglist>(qreal left, qreal top, qreal right, qreal bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getWindowFrameMargins</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>getWindowFrameMargins</anchor>
            <arglist>(qreal *left, qreal *top, qreal *right, qreal *bottom) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetWindowFrameMargins</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>unsetWindowFrameMargins</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>windowFrameGeometry</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowFrameGeometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>windowFrameRect</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowFrameRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowFlags</type>
            <name>windowFlags</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowType</type>
            <name>windowType</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowFlags</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowFlags-prop</anchor>
            <arglist>(Qt::WindowFlags wFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActiveWindow</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>isActiveWindow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowTitle</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowTitle-prop</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>windowTitle</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowTitle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::FocusPolicy</type>
            <name>focusPolicy</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>focusPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocusPolicy</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>focusPolicy-prop</anchor>
            <arglist>(Qt::FocusPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setTabOrder</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>setTabOrder</anchor>
            <arglist>(QGraphicsWidget *first, QGraphicsWidget *second)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsWidget *</type>
            <name>focusWidget</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>focusWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>grabShortcut</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>grabShortcut</anchor>
            <arglist>(const QKeySequence &amp;sequence, Qt::ShortcutContext context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseShortcut</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>releaseShortcut</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcutEnabled</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>setShortcutEnabled</anchor>
            <arglist>(int id, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcutAutoRepeat</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>setShortcutAutoRepeat</anchor>
            <arglist>(int id, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAction</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addActions</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>addActions</anchor>
            <arglist>(const QList&lt;QAction *&gt; &amp;actions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAction</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>insertAction</anchor>
            <arglist>(QAction *before, QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertActions</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>insertActions</anchor>
            <arglist>(QAction *before, QList&lt;QAction *&gt; actions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAction</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>removeAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAction *&gt;</type>
            <name>actions</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>actions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(Qt::WidgetAttribute attribute, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAttribute</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>testAttribute</anchor>
            <arglist>(Qt::WidgetAttribute attribute) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintWindowFrame</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>paintWindowFrame</anchor>
            <arglist>(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryChanged</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>close</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initStyleOption</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOption *option) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSizeF</type>
            <name>sizeHint</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(Qt::SizeHint which, const QSizeF &amp;constraint) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateGeometry</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>updateGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>itemChange</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>itemChange</anchor>
            <arglist>(GraphicsItemChange change, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>sceneEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>sceneEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>windowFrameEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowFrameEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual Qt::WindowFrameSection</type>
            <name>windowFrameSectionAt</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>windowFrameSectionAt</anchor>
            <arglist>(const QPointF &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>closeEvent</anchor>
            <arglist>(QCloseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>moveEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>moveEvent</anchor>
            <arglist>(QGraphicsSceneMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polishEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>polishEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QGraphicsSceneResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverMoveEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>hoverMoveEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverLeaveEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>hoverLeaveEvent</anchor>
            <arglist>(QGraphicsSceneHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>grabMouseEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>grabMouseEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ungrabMouseEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>ungrabMouseEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>grabKeyboardEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>grabKeyboardEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ungrabKeyboardEvent</name>
            <anchorfile>qgraphicswidget.html</anchorfile>
            <anchor>ungrabKeyboardEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractItemDelegate</name>
        <filename>qabstractitemdelegate.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>EndEditHint</name>
            <anchor>EndEditHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoHint">
            <anchor>EndEditHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EditNextItem">
            <anchor>EndEditHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EditPreviousItem">
            <anchor>EndEditHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubmitModelCache">
            <anchor>EndEditHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RevertModelCache">
            <anchor>EndEditHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractItemDelegate</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>QAbstractItemDelegate</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractItemDelegate</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>dtor.QAbstractItemDelegate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>createEditor</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>createEditor</anchor>
            <arglist>(QWidget *parent, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>destroyEditor</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>destroyEditor</anchor>
            <arglist>(QWidget *editor, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setEditorData</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>setEditorData</anchor>
            <arglist>(QWidget *editor, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setModelData</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>setModelData</anchor>
            <arglist>(QWidget *editor, QAbstractItemModel *model, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateEditorGeometry</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>updateEditorGeometry</anchor>
            <arglist>(QWidget *editor, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>editorEvent</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>editorEvent</anchor>
            <arglist>(QEvent *event, QAbstractItemModel *model, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>elidedText</name>
            <anchorfile>qabstractitemdelegate-obsolete.html</anchorfile>
            <anchor>elidedText</anchor>
            <arglist>(const QFontMetrics &amp;fontMetrics, int width, Qt::TextElideMode mode, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>helpEvent</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>helpEvent</anchor>
            <arglist>(QHelpEvent *event, QAbstractItemView *view, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commitData</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>commitData</anchor>
            <arglist>(QWidget *editor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeEditor</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>closeEditor</anchor>
            <arglist>(QWidget *editor, QAbstractItemDelegate::EndEditHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sizeHintChanged</name>
            <anchorfile>qabstractitemdelegate.html</anchorfile>
            <anchor>sizeHintChanged</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractItemView</name>
        <filename>qabstractitemview.html</filename>
        <base>QAbstractScrollArea</base>
        <member kind="property" type="bool">
            <name>autoScroll</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>autoScroll-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>autoScrollMargin</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>autoScrollMargin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="EditTriggers">
            <name>editTriggers</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>editTriggers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>tabKeyNavigation</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>tabKeyNavigation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>showDropIndicator</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>showDropIndicator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dragEnabled</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dragDropOverwriteMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragDropOverwriteMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="DragDropMode">
            <name>dragDropMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragDropMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::DropAction">
            <name>defaultDropAction</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>defaultDropAction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>alternatingRowColors</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>alternatingRowColors-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SelectionMode">
            <name>selectionMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SelectionBehavior">
            <name>selectionBehavior</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionBehavior-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>iconSize</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextElideMode">
            <name>textElideMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>textElideMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ScrollMode">
            <name>verticalScrollMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>verticalScrollMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ScrollMode">
            <name>horizontalScrollMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>horizontalScrollMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SelectionMode</name>
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSelection">
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleSelection">
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MultiSelection">
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtendedSelection">
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContiguousSelection">
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SelectionBehavior</name>
            <anchor>SelectionBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectItems">
            <anchor>SelectionBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectRows">
            <anchor>SelectionBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectColumns">
            <anchor>SelectionBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ScrollHint</name>
            <anchor>ScrollHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EnsureVisible">
            <anchor>ScrollHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PositionAtTop">
            <anchor>ScrollHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PositionAtBottom">
            <anchor>ScrollHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PositionAtCenter">
            <anchor>ScrollHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>EditTrigger</name>
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoEditTriggers">
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CurrentChanged">
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoubleClicked">
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectedClicked">
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EditKeyPressed">
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyKeyPressed">
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllEditTriggers">
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QAbstractItemView::EditTrigger">
            <name>EditTriggers</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>EditTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ScrollMode</name>
            <anchor>ScrollMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollPerItem">
            <anchor>ScrollMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollPerPixel">
            <anchor>ScrollMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractItemView</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>QAbstractItemView</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractItemView</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dtor.QAbstractItemView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setModel</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelectionModel</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setSelectionModel</anchor>
            <arglist>(QItemSelectionModel *selectionModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QItemSelectionModel *</type>
            <name>selectionModel</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionModel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemDelegate</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setItemDelegate</anchor>
            <arglist>(QAbstractItemDelegate *delegate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemDelegate *</type>
            <name>itemDelegate</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>itemDelegate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionMode-prop</anchor>
            <arglist>(QAbstractItemView::SelectionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemView::SelectionMode</type>
            <name>selectionMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionBehavior</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionBehavior-prop</anchor>
            <arglist>(QAbstractItemView::SelectionBehavior behavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemView::SelectionBehavior</type>
            <name>selectionBehavior</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionBehavior-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>currentIndex</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>currentIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>rootIndex</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>rootIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEditTriggers</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>editTriggers-prop</anchor>
            <arglist>(EditTriggers triggers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>EditTriggers</type>
            <name>editTriggers</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>editTriggers-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalScrollMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>verticalScrollMode-prop</anchor>
            <arglist>(ScrollMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ScrollMode</type>
            <name>verticalScrollMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>verticalScrollMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalScrollMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>horizontalScrollMode-prop</anchor>
            <arglist>(ScrollMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ScrollMode</type>
            <name>horizontalScrollMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>horizontalScrollMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoScroll</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>autoScroll-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAutoScroll</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>autoScroll-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoScrollMargin</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>autoScrollMargin-prop</anchor>
            <arglist>(int margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>autoScrollMargin</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>autoScrollMargin-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabKeyNavigation</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>tabKeyNavigation-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabKeyNavigation</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>tabKeyNavigation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDropIndicatorShown</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>showDropIndicator-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>showDropIndicator</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>showDropIndicator-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragEnabled</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>dragEnabled</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragDropOverwriteMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragDropOverwriteMode-prop</anchor>
            <arglist>(bool overwrite)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>dragDropOverwriteMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragDropOverwriteMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>DragDropMode</name>
            <anchor>DragDropMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDragDrop">
            <anchor>DragDropMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragOnly">
            <anchor>DragDropMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DropOnly">
            <anchor>DragDropMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragDrop">
            <anchor>DragDropMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InternalMove">
            <anchor>DragDropMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragDropMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragDropMode-prop</anchor>
            <arglist>(DragDropMode behavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DragDropMode</type>
            <name>dragDropMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragDropMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultDropAction</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>defaultDropAction-prop</anchor>
            <arglist>(Qt::DropAction dropAction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>defaultDropAction</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>defaultDropAction-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlternatingRowColors</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>alternatingRowColors-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>alternatingRowColors</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>alternatingRowColors-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconSize</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>iconSize</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextElideMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>textElideMode-prop</anchor>
            <arglist>(Qt::TextElideMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextElideMode</type>
            <name>textElideMode</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>textElideMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyboardSearch</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>keyboardSearch</anchor>
            <arglist>(const QString &amp;search)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRect</type>
            <name>visualRect</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>visualRect</anchor>
            <arglist>(const QModelIndex &amp;index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>scrollTo</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>scrollTo</anchor>
            <arglist>(const QModelIndex &amp;index, ScrollHint hint) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>indexAt</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>indexAt</anchor>
            <arglist>(const QPoint &amp;point) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeHintForIndex</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>sizeHintForIndex</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>sizeHintForRow</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>sizeHintForRow</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>sizeHintForColumn</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>sizeHintForColumn</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>openPersistentEditor</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>openPersistentEditor</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closePersistentEditor</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>closePersistentEditor</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndexWidget</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setIndexWidget</anchor>
            <arglist>(const QModelIndex &amp;index, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>indexWidget</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>indexWidget</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemDelegateForRow</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setItemDelegateForRow</anchor>
            <arglist>(int row, QAbstractItemDelegate *delegate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemDelegate *</type>
            <name>itemDelegateForRow</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>itemDelegateForRow</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemDelegateForColumn</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setItemDelegateForColumn</anchor>
            <arglist>(int column, QAbstractItemDelegate *delegate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemDelegate *</type>
            <name>itemDelegateForColumn</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>itemDelegateForColumn</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemDelegate *</type>
            <name>itemDelegate</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>itemDelegate-2</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>reset</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRootIndex</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setRootIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>selectAll</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>edit</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>edit</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearSelection</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>clearSelection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setCurrentIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollToTop</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>scrollToTop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollToBottom</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>scrollToBottom</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dataChanged</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight, const QVector&lt;int&gt; &amp;roles)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>rowsInserted</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>rowsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>rowsAboutToBeRemoved</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>rowsAboutToBeRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>selectionChanged</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>currentChanged</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateGeometries</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>updateGeometries</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEditor</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>closeEditor</anchor>
            <arglist>(QWidget *editor, QAbstractItemDelegate::EndEditHint hint)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>commitData</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>commitData</anchor>
            <arglist>(QWidget *editor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>editorDestroyed</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>editorDestroyed</anchor>
            <arglist>(QObject *editor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doubleClicked</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>doubleClicked</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewportEntered</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>viewportEntered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>iconSizeChanged</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalStepsPerItem</name>
            <anchorfile>qabstractitemview-obsolete.html</anchorfile>
            <anchor>setHorizontalStepsPerItem</anchor>
            <arglist>(int steps)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>horizontalStepsPerItem</name>
            <anchorfile>qabstractitemview-obsolete.html</anchorfile>
            <anchor>horizontalStepsPerItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalStepsPerItem</name>
            <anchorfile>qabstractitemview-obsolete.html</anchorfile>
            <anchor>setVerticalStepsPerItem</anchor>
            <arglist>(int steps)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>verticalStepsPerItem</name>
            <anchorfile>qabstractitemview-obsolete.html</anchorfile>
            <anchor>verticalStepsPerItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>CursorAction</name>
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveUp">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveDown">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveLeft">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveRight">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveHome">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveEnd">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MovePageUp">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MovePageDown">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveNext">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MovePrevious">
            <anchor>CursorAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>moveCursor</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>moveCursor</anchor>
            <arglist>(CursorAction cursorAction, Qt::KeyboardModifiers modifiers) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual int</type>
            <name>horizontalOffset</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>horizontalOffset</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual int</type>
            <name>verticalOffset</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>verticalOffset</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isIndexHidden</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>isIndexHidden</anchor>
            <arglist>(const QModelIndex &amp;index) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setSelection</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual QRegion</type>
            <name>visualRegionForSelection</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>visualRegionForSelection</anchor>
            <arglist>(const QItemSelection &amp;selection) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>selectedIndexes</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectedIndexes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>edit</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>edit-2</anchor>
            <arglist>(const QModelIndex &amp;index, EditTrigger trigger, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QItemSelectionModel::SelectionFlags</type>
            <name>selectionCommand</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>selectionCommand</anchor>
            <arglist>(const QModelIndex &amp;index, const QEvent *event) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startDrag</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>startDrag</anchor>
            <arglist>(Qt::DropActions supportedActions)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QStyleOptionViewItem</type>
            <name>viewOptions</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>viewOptions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DraggingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragSelectingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EditingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExpandingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CollapsingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnimatingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(State state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>scheduleDelayedItemsLayout</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>scheduleDelayedItemsLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>executeDelayedItemsLayout</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>executeDelayedItemsLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setDirtyRegion</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>setDirtyRegion</anchor>
            <arglist>(const QRegion &amp;region)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>scrollDirtyRegion</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>scrollDirtyRegion</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QPoint</type>
            <name>dirtyRegionOffset</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dirtyRegionOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>viewportEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>viewportEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="enum">
            <name>DropIndicatorPosition</name>
            <anchor>DropIndicatorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnItem">
            <anchor>DropIndicatorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AboveItem">
            <anchor>DropIndicatorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BelowItem">
            <anchor>DropIndicatorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnViewport">
            <anchor>DropIndicatorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>DropIndicatorPosition</type>
            <name>dropIndicatorPosition</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>dropIndicatorPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>viewportSizeHint</name>
            <anchorfile>qabstractitemview.html</anchorfile>
            <anchor>viewportSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QColumnView</name>
        <filename>qcolumnview.html</filename>
        <base>QAbstractItemView</base>
        <member kind="property" type="bool">
            <name>resizeGripsVisible</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>resizeGripsVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updatePreviewWidget</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>updatePreviewWidget</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColumnView</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>QColumnView</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QColumnView</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>dtor.QColumnView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>indexAt</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>indexAt</anchor>
            <arglist>(const QPoint &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollTo</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>scrollTo</anchor>
            <arglist>(const QModelIndex &amp;index, ScrollHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>visualRect</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>visualRect</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setModel</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelectionModel</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>setSelectionModel</anchor>
            <arglist>(QItemSelectionModel *newSelectionModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRootIndex</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>setRootIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>selectAll</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>selectAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeGripsVisible</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>resizeGripsVisible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>resizeGripsVisible</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>resizeGripsVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>previewWidget</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>previewWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreviewWidget</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>setPreviewWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnWidths</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>setColumnWidths</anchor>
            <arglist>(const QList&lt;int&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>columnWidths</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>columnWidths</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isIndexHidden</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>isIndexHidden</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>moveCursor</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>moveCursor</anchor>
            <arglist>(CursorAction cursorAction, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelection</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(const QRect &amp;rect, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QRegion</type>
            <name>visualRegionForSelection</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>visualRegionForSelection</anchor>
            <arglist>(const QItemSelection &amp;selection) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>horizontalOffset</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>horizontalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>verticalOffset</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>verticalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>rowsInserted</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>rowsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>currentChanged</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollContentsBy</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>scrollContentsBy</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QAbstractItemView *</type>
            <name>createColumn</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>createColumn</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initializeColumn</name>
            <anchorfile>qcolumnview.html</anchorfile>
            <anchor>initializeColumn</anchor>
            <arglist>(QAbstractItemView *column) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDataWidgetMapper</name>
        <filename>qdatawidgetmapper.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Orientation">
            <name>orientation</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SubmitPolicy">
            <name>submitPolicy</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>submitPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataWidgetMapper</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>QDataWidgetMapper</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDataWidgetMapper</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>dtor.QDataWidgetMapper</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModel</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemDelegate</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>setItemDelegate</anchor>
            <arglist>(QAbstractItemDelegate *delegate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemDelegate *</type>
            <name>itemDelegate</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>itemDelegate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootIndex</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>setRootIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>rootIndex</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>rootIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>(Qt::Orientation aOrientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>SubmitPolicy</name>
            <anchor>SubmitPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoSubmit">
            <anchor>SubmitPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ManualSubmit">
            <anchor>SubmitPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSubmitPolicy</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>submitPolicy-prop</anchor>
            <arglist>(SubmitPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SubmitPolicy</type>
            <name>submitPolicy</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>submitPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMapping</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>addMapping</anchor>
            <arglist>(QWidget *widget, int section)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMapping</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>addMapping-2</anchor>
            <arglist>(QWidget *widget, int section, const QByteArray &amp;propertyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMapping</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>removeMapping</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mappedSection</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>mappedSection</anchor>
            <arglist>(QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>mappedPropertyName</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>mappedPropertyName</anchor>
            <arglist>(QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>mappedWidgetAt</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>mappedWidgetAt</anchor>
            <arglist>(int section) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMapping</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>clearMapping</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>revert</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>revert</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>submit</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>submit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFirst</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>toFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toLast</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>toLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toNext</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>toNext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toPrevious</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>toPrevious</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentModelIndex</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>setCurrentModelIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIndexChanged</name>
            <anchorfile>qdatawidgetmapper.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDirModel</name>
        <filename>qdirmodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="property" type="bool">
            <name>resolveSymlinks</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>readOnly</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>lazyChildCount</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>lazyChildCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Roles</name>
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FileIconRole">
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FilePathRole">
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FileNameRole">
            <anchor>Roles-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirModel</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>QDirModel</anchor>
            <arglist>(const QStringList &amp;nameFilters, QDir::Filters filters, QDir::SortFlags sort, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirModel</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>QDirModel-2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDirModel</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>dtor.QDirModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;child) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconProvider</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>setIconProvider</anchor>
            <arglist>(QFileIconProvider *provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileIconProvider *</type>
            <name>iconProvider</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>iconProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameFilters</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>setNameFilters</anchor>
            <arglist>(const QStringList &amp;filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>nameFilters</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>nameFilters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(QDir::Filters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir::Filters</type>
            <name>filter</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(QDir::SortFlags sort)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir::SortFlags</type>
            <name>sorting</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolveSymlinks</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>resolveSymlinks</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>resolveSymlinks-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadOnly</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLazyChildCount</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>lazyChildCount-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>lazyChildCount</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>lazyChildCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>index</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>index-2</anchor>
            <arglist>(const QString &amp;path, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDir</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>isDir</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>mkdir</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>mkdir</anchor>
            <arglist>(const QModelIndex &amp;parent, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rmdir</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>rmdir</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>fileIcon</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>fileIcon</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo</type>
            <name>fileInfo</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>fileInfo</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refresh</name>
            <anchorfile>qdirmodel.html</anchorfile>
            <anchor>refresh</anchor>
            <arglist>(const QModelIndex &amp;parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileIconProvider</name>
        <filename>qfileiconprovider.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileIconProvider</name>
            <anchorfile>qfileiconprovider.html</anchorfile>
            <anchor>QFileIconProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFileIconProvider</name>
            <anchorfile>qfileiconprovider.html</anchorfile>
            <anchor>dtor.QFileIconProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>IconType</name>
            <anchor>IconType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Computer">
            <anchor>IconType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Desktop">
            <anchor>IconType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Trashcan">
            <anchor>IconType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Network">
            <anchor>IconType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Drive">
            <anchor>IconType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Folder">
            <anchor>IconType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="File">
            <anchor>IconType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Option</name>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontUseCustomDirectoryIcons">
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QFileIconProvider::Option">
            <name>Options</name>
            <anchorfile>qfileiconprovider.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QIcon</type>
            <name>icon</name>
            <anchorfile>qfileiconprovider.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>(IconType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QIcon</type>
            <name>icon</name>
            <anchorfile>qfileiconprovider.html</anchorfile>
            <anchor>icon-2</anchor>
            <arglist>(const QFileInfo &amp;info) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>type</name>
            <anchorfile>qfileiconprovider.html</anchorfile>
            <anchor>type</anchor>
            <arglist>(const QFileInfo &amp;info) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptions</name>
            <anchorfile>qfileiconprovider.html</anchorfile>
            <anchor>setOptions</anchor>
            <arglist>(Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Options</type>
            <name>options</name>
            <anchorfile>qfileiconprovider.html</anchorfile>
            <anchor>options</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHeaderView</name>
        <filename>qheaderview.html</filename>
        <base>QAbstractItemView</base>
        <member kind="property" type="bool">
            <name>showSortIndicator</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>showSortIndicator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>highlightSections</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>highlightSections-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>stretchLastSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>stretchLastSection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>cascadingSectionResizes</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>cascadingSectionResizes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>defaultSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>defaultSectionSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>minimumSectionSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>maximumSectionSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>defaultAlignment</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>defaultAlignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ResizeMode</name>
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Interactive">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Stretch">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fixed">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResizeToContents">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Custom">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHeaderView</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>QHeaderView</anchor>
            <arglist>(Qt::Orientation orientation, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QHeaderView</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>dtor.QHeaderView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setModel</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>offset</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>offset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sectionSizeHint</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionSizeHint</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>visualIndexAt</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>visualIndexAt</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>logicalIndexAt</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>logicalIndexAt</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>logicalIndexAt</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>logicalIndexAt-2</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>logicalIndexAt</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>logicalIndexAt-3</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionSize</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sectionPosition</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionPosition</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sectionViewportPosition</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionViewportPosition</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>moveSection</anchor>
            <arglist>(int from, int to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swapSections</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>swapSections</anchor>
            <arglist>(int first, int second)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>resizeSection</anchor>
            <arglist>(int logicalIndex, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeSections</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>resizeSections</anchor>
            <arglist>(QHeaderView::ResizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSectionHidden</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>isSectionHidden</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSectionHidden</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setSectionHidden</anchor>
            <arglist>(int logicalIndex, bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hiddenSectionCount</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>hiddenSectionCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hideSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>hideSection</anchor>
            <arglist>(int logicalIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>showSection</anchor>
            <arglist>(int logicalIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>visualIndex</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>visualIndex</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>logicalIndex</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>logicalIndex</anchor>
            <arglist>(int visualIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSectionsMovable</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setSectionsMovable</anchor>
            <arglist>(bool movable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sectionsMovable</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionsMovable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMovable</name>
            <anchorfile>qheaderview-obsolete.html</anchorfile>
            <anchor>setMovable</anchor>
            <arglist>(bool movable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMovable</name>
            <anchorfile>qheaderview-obsolete.html</anchorfile>
            <anchor>isMovable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSectionsClickable</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setSectionsClickable</anchor>
            <arglist>(bool clickable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sectionsClickable</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionsClickable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClickable</name>
            <anchorfile>qheaderview-obsolete.html</anchorfile>
            <anchor>setClickable</anchor>
            <arglist>(bool clickable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClickable</name>
            <anchorfile>qheaderview-obsolete.html</anchorfile>
            <anchor>isClickable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHighlightSections</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>highlightSections-prop</anchor>
            <arglist>(bool highlight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>highlightSections</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>highlightSections-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ResizeMode</type>
            <name>sectionResizeMode</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionResizeMode</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSectionResizeMode</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setSectionResizeMode</anchor>
            <arglist>(ResizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSectionResizeMode</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setSectionResizeMode-2</anchor>
            <arglist>(int logicalIndex, ResizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeContentsPrecision</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setResizeContentsPrecision</anchor>
            <arglist>(int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>resizeContentsPrecision</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>resizeContentsPrecision</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeMode</name>
            <anchorfile>qheaderview-obsolete.html</anchorfile>
            <anchor>setResizeMode</anchor>
            <arglist>(ResizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeMode</name>
            <anchorfile>qheaderview-obsolete.html</anchorfile>
            <anchor>setResizeMode-2</anchor>
            <arglist>(int logicalIndex, ResizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ResizeMode</type>
            <name>resizeMode</name>
            <anchorfile>qheaderview-obsolete.html</anchorfile>
            <anchor>resizeMode</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>stretchSectionCount</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>stretchSectionCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortIndicatorShown</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>showSortIndicator-prop</anchor>
            <arglist>(bool show)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSortIndicatorShown</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>showSortIndicator-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortIndicator</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setSortIndicator</anchor>
            <arglist>(int logicalIndex, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sortIndicatorSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sortIndicatorSection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::SortOrder</type>
            <name>sortIndicatorOrder</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sortIndicatorOrder</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>stretchLastSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>stretchLastSection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStretchLastSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>stretchLastSection-prop</anchor>
            <arglist>(bool stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cascadingSectionResizes</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>cascadingSectionResizes-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCascadingSectionResizes</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>cascadingSectionResizes-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>defaultSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>defaultSectionSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>defaultSectionSize-prop</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetDefaultSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>defaultSectionSize-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>minimumSectionSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>minimumSectionSize-prop</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>maximumSectionSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumSectionSize</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>maximumSectionSize-prop</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>defaultAlignment</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>defaultAlignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultAlignment</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>defaultAlignment-prop</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sectionsMoved</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionsMoved</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sectionsHidden</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionsHidden</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>saveState</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>saveState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>restoreState</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>restoreState</anchor>
            <arglist>(const QByteArray &amp;state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>reset</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setOffset</anchor>
            <arglist>(int offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffsetToSectionPosition</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setOffsetToSectionPosition</anchor>
            <arglist>(int visualSectionNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffsetToLastSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setOffsetToLastSection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>headerDataChanged</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>headerDataChanged</anchor>
            <arglist>(Qt::Orientation orientation, int logicalFirst, int logicalLast)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sectionMoved</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionMoved</anchor>
            <arglist>(int logicalIndex, int oldVisualIndex, int newVisualIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sectionResized</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionResized</anchor>
            <arglist>(int logicalIndex, int oldSize, int newSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sectionPressed</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionPressed</anchor>
            <arglist>(int logicalIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sectionClicked</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionClicked</anchor>
            <arglist>(int logicalIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sectionEntered</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionEntered</anchor>
            <arglist>(int logicalIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sectionDoubleClicked</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionDoubleClicked</anchor>
            <arglist>(int logicalIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sectionCountChanged</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionCountChanged</anchor>
            <arglist>(int oldCount, int newCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sectionHandleDoubleClicked</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionHandleDoubleClicked</anchor>
            <arglist>(int logicalIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometriesChanged</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>geometriesChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortIndicatorChanged</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sortIndicatorChanged</anchor>
            <arglist>(int logicalIndex, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>resizeSections</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>resizeSections-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sectionsInserted</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int logicalFirst, int logicalLast)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sectionsAboutToBeRemoved</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionsAboutToBeRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int logicalFirst, int logicalLast)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>currentChanged</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;old)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>viewportEvent</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>viewportEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintSection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>paintSection</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rect, int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sectionSizeFromContents</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>sectionSizeFromContents</anchor>
            <arglist>(int logicalIndex) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>horizontalOffset</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>horizontalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>verticalOffset</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>verticalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelection</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qheaderview.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionHeader *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemDelegate</name>
        <filename>qitemdelegate.html</filename>
        <base>QAbstractItemDelegate</base>
        <member kind="property" type="bool">
            <name>clipping</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>clipping-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemDelegate</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>QItemDelegate</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QItemDelegate</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>dtor.QItemDelegate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasClipping</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>clipping-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipping</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>clipping-prop</anchor>
            <arglist>(bool clip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>createEditor</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>createEditor</anchor>
            <arglist>(QWidget *parent, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setEditorData</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>setEditorData</anchor>
            <arglist>(QWidget *editor, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setModelData</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>setModelData</anchor>
            <arglist>(QWidget *editor, QAbstractItemModel *model, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateEditorGeometry</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>updateEditorGeometry</anchor>
            <arglist>(QWidget *editor, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QItemEditorFactory *</type>
            <name>itemEditorFactory</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>itemEditorFactory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemEditorFactory</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>setItemEditorFactory</anchor>
            <arglist>(QItemEditorFactory *factory)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawDisplay</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>drawDisplay</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QRect &amp;rect, const QString &amp;text) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawDecoration</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>drawDecoration</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QRect &amp;rect, const QPixmap &amp;pixmap) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawFocus</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>drawFocus</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QRect &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawCheck</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>drawCheck</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QRect &amp;rect, Qt::CheckState state) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>drawBackground</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>drawBackground</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *editor, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>editorEvent</name>
            <anchorfile>qitemdelegate.html</anchorfile>
            <anchor>editorEvent</anchor>
            <arglist>(QEvent *event, QAbstractItemModel *model, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemEditorCreatorBase</name>
        <filename>qitemeditorcreatorbase.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QItemEditorCreatorBase</name>
            <anchorfile>qitemeditorcreatorbase.html</anchorfile>
            <anchor>dtor.QItemEditorCreatorBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QWidget *</type>
            <name>createWidget</name>
            <anchorfile>qitemeditorcreatorbase.html</anchorfile>
            <anchor>createWidget</anchor>
            <arglist>(QWidget *parent) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QByteArray</type>
            <name>valuePropertyName</name>
            <anchorfile>qitemeditorcreatorbase.html</anchorfile>
            <anchor>valuePropertyName</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemEditorCreator</name>
        <filename>qitemeditorcreator.html</filename>
        <base>QItemEditorCreatorBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemEditorCreator</name>
            <anchorfile>qitemeditorcreator.html</anchorfile>
            <anchor>QItemEditorCreator</anchor>
            <arglist>(const QByteArray &amp;valuePropertyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>createWidget</name>
            <anchorfile>qitemeditorcreator.html</anchorfile>
            <anchor>createWidget</anchor>
            <arglist>(QWidget *parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QByteArray</type>
            <name>valuePropertyName</name>
            <anchorfile>qitemeditorcreator.html</anchorfile>
            <anchor>valuePropertyName</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStandardItemEditorCreator</name>
        <filename>qstandarditemeditorcreator.html</filename>
        <base>QItemEditorCreatorBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItemEditorCreator</name>
            <anchorfile>qstandarditemeditorcreator.html</anchorfile>
            <anchor>QStandardItemEditorCreator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>createWidget</name>
            <anchorfile>qstandarditemeditorcreator.html</anchorfile>
            <anchor>createWidget</anchor>
            <arglist>(QWidget *parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QByteArray</type>
            <name>valuePropertyName</name>
            <anchorfile>qstandarditemeditorcreator.html</anchorfile>
            <anchor>valuePropertyName</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemEditorFactory</name>
        <filename>qitemeditorfactory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemEditorFactory</name>
            <anchorfile>qitemeditorfactory.html</anchorfile>
            <anchor>QItemEditorFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QItemEditorFactory</name>
            <anchorfile>qitemeditorfactory.html</anchorfile>
            <anchor>dtor.QItemEditorFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>createEditor</name>
            <anchorfile>qitemeditorfactory.html</anchorfile>
            <anchor>createEditor</anchor>
            <arglist>(int userType, QWidget *parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QByteArray</type>
            <name>valuePropertyName</name>
            <anchorfile>qitemeditorfactory.html</anchorfile>
            <anchor>valuePropertyName</anchor>
            <arglist>(int userType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerEditor</name>
            <anchorfile>qitemeditorfactory.html</anchorfile>
            <anchor>registerEditor</anchor>
            <arglist>(int userType, QItemEditorCreatorBase *creator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QItemEditorFactory *</type>
            <name>defaultFactory</name>
            <anchorfile>qitemeditorfactory.html</anchorfile>
            <anchor>defaultFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultFactory</name>
            <anchorfile>qitemeditorfactory.html</anchorfile>
            <anchor>setDefaultFactory</anchor>
            <arglist>(QItemEditorFactory *factory)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QListView</name>
        <filename>qlistview.html</filename>
        <base>QAbstractItemView</base>
        <member kind="property" type="Movement">
            <name>movement</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>movement-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Flow">
            <name>flow</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>flow-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isWrapping</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>isWrapping-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ResizeMode">
            <name>resizeMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="LayoutMode">
            <name>layoutMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>layoutMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>spacing</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>gridSize</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>gridSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ViewMode">
            <name>viewMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>modelColumn</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>modelColumn-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>uniformItemSizes</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>uniformItemSizes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>batchSize</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>batchSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wordWrap</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>selectionRectVisible</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>selectionRectVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Movement</name>
            <anchor>Movement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Static">
            <anchor>Movement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Free">
            <anchor>Movement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Snap">
            <anchor>Movement-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Flow</name>
            <anchor>Flow-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftToRight">
            <anchor>Flow-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopToBottom">
            <anchor>Flow-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ResizeMode</name>
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fixed">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Adjust">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LayoutMode</name>
            <anchor>LayoutMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SinglePass">
            <anchor>LayoutMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Batched">
            <anchor>LayoutMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ViewMode</name>
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListMode">
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IconMode">
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QListView</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>QListView</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QListView</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>dtor.QListView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMovement</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>movement-prop</anchor>
            <arglist>(Movement movement)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Movement</type>
            <name>movement</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>movement-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlow</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>flow-prop</anchor>
            <arglist>(Flow flow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Flow</type>
            <name>flow</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>flow-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapping</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>isWrapping-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWrapping</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>isWrapping-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>(ResizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ResizeMode</type>
            <name>resizeMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayoutMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>layoutMode-prop</anchor>
            <arglist>(LayoutMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LayoutMode</type>
            <name>layoutMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>layoutMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist>(int space)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>spacing</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBatchSize</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>batchSize-prop</anchor>
            <arglist>(int batchSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>batchSize</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>batchSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGridSize</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>gridSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>gridSize</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>gridSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist>(ViewMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ViewMode</type>
            <name>viewMode</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPropertyFlags</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>clearPropertyFlags</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRowHidden</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>isRowHidden</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowHidden</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>setRowHidden</anchor>
            <arglist>(int row, bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModelColumn</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>modelColumn-prop</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>modelColumn</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>modelColumn-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformItemSizes</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>uniformItemSizes-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>uniformItemSizes</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>uniformItemSizes-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWordWrap</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wordWrap</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionRectVisible</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>selectionRectVisible-prop</anchor>
            <arglist>(bool show)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelectionRectVisible</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>selectionRectVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>visualRect</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>visualRect</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollTo</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>scrollTo</anchor>
            <arglist>(const QModelIndex &amp;index, ScrollHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>indexAt</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>indexAt</anchor>
            <arglist>(const QPoint &amp;p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>indexesMoved</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>indexesMoved</anchor>
            <arglist>(const QModelIndexList &amp;indexes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dataChanged</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight, const QVector&lt;int&gt; &amp;roles)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>rowsInserted</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>rowsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>rowsAboutToBeRemoved</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>rowsAboutToBeRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startDrag</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>startDrag</anchor>
            <arglist>(Qt::DropActions supportedActions)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QStyleOptionViewItem</type>
            <name>viewOptions</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>viewOptions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>horizontalOffset</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>horizontalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>verticalOffset</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>verticalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>moveCursor</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>moveCursor</anchor>
            <arglist>(CursorAction cursorAction, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QRect</type>
            <name>rectForIndex</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>rectForIndex</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPositionForIndex</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>setPositionForIndex</anchor>
            <arglist>(const QPoint &amp;position, const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelection</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(const QRect &amp;rect, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QRegion</type>
            <name>visualRegionForSelection</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>visualRegionForSelection</anchor>
            <arglist>(const QItemSelection &amp;selection) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>selectedIndexes</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>selectedIndexes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateGeometries</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>updateGeometries</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isIndexHidden</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>isIndexHidden</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>selectionChanged</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>currentChanged</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>viewportSizeHint</name>
            <anchorfile>qlistview.html</anchorfile>
            <anchor>viewportSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QListWidgetItem</name>
        <filename>qlistwidgetitem.html</filename>
        <member kind="enum">
            <name>ItemType</name>
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserType">
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QListWidgetItem</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>QListWidgetItem</anchor>
            <arglist>(QListWidget *parent, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QListWidgetItem</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>QListWidgetItem-2</anchor>
            <arglist>(const QString &amp;text, QListWidget *parent, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QListWidgetItem</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>QListWidgetItem-3</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text, QListWidget *parent, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QListWidgetItem</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>QListWidgetItem-4</anchor>
            <arglist>(const QListWidgetItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QListWidgetItem</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>dtor.QListWidgetItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QListWidgetItem *</type>
            <name>clone</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListWidget *</type>
            <name>listWidget</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>listWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelected</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setSelected</anchor>
            <arglist>(bool select)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelected</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>isSelected</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHidden</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setHidden</anchor>
            <arglist>(bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHidden</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>isHidden</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(Qt::ItemFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>statusTip</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>statusTip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatusTip</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setStatusTip</anchor>
            <arglist>(const QString &amp;statusTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>toolTip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setToolTip</anchor>
            <arglist>(const QString &amp;toolTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>whatsThis</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>whatsThis</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhatsThis</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setWhatsThis</anchor>
            <arglist>(const QString &amp;whatsThis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textAlignment</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>textAlignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextAlignment</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setTextAlignment</anchor>
            <arglist>(int alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qlistwidgetitem-obsolete.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setBackgroundColor</name>
            <anchorfile>qlistwidgetitem-obsolete.html</anchorfile>
            <anchor>setBackgroundColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>background</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>textColor</name>
            <anchorfile>qlistwidgetitem-obsolete.html</anchorfile>
            <anchor>textColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextColor</name>
            <anchorfile>qlistwidgetitem-obsolete.html</anchorfile>
            <anchor>setTextColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foreground</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForeground</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setForeground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CheckState</type>
            <name>checkState</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>checkState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckState</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setCheckState</anchor>
            <arglist>(Qt::CheckState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeHint</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeHint</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setSizeHint</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setData</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(int role, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QListWidgetItem &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>read</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QDataStream &amp;in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>write</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QDataStream &amp;out) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListWidgetItem &amp;</type>
            <name>operator=</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QListWidgetItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>type</name>
            <anchorfile>qlistwidgetitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QListWidget</name>
        <filename>qlistwidget.html</filename>
        <base>QListView</base>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentRow</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>currentRow-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>sortingEnabled</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QListWidget</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>QListWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QListWidget</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>dtor.QListWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListWidgetItem *</type>
            <name>item</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>row</anchor>
            <arglist>(const QListWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>insertItem</anchor>
            <arglist>(int row, QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>insertItem-2</anchor>
            <arglist>(int row, const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertItems</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>insertItems</anchor>
            <arglist>(int row, const QStringList &amp;labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>addItem-2</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItems</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>addItems</anchor>
            <arglist>(const QStringList &amp;labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListWidgetItem *</type>
            <name>takeItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>takeItem</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListWidgetItem *</type>
            <name>currentItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>currentItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>setCurrentItem</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>setCurrentItem-2</anchor>
            <arglist>(QListWidgetItem *item, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentRow</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>currentRow-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentRow</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>currentRow-prop</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentRow</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>currentRow-prop</anchor>
            <arglist>(int row, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListWidgetItem *</type>
            <name>itemAt</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(const QPoint &amp;p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListWidgetItem *</type>
            <name>itemAt</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemAt-2</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>visualItemRect</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>visualItemRect</anchor>
            <arglist>(const QListWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortItems</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>sortItems</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortingEnabled</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSortingEnabled</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>editItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>editItem</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>openPersistentEditor</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>openPersistentEditor</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closePersistentEditor</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>closePersistentEditor</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>itemWidget</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemWidget</anchor>
            <arglist>(QListWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemWidget</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>setItemWidget</anchor>
            <arglist>(QListWidgetItem *item, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItemWidget</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>removeItemWidget</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isItemSelected</name>
            <anchorfile>qlistwidget-obsolete.html</anchorfile>
            <anchor>isItemSelected</anchor>
            <arglist>(const QListWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemSelected</name>
            <anchorfile>qlistwidget-obsolete.html</anchorfile>
            <anchor>setItemSelected</anchor>
            <arglist>(const QListWidgetItem *item, bool select)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QListWidgetItem *&gt;</type>
            <name>selectedItems</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>selectedItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QListWidgetItem *&gt;</type>
            <name>findItems</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>findItems</anchor>
            <arglist>(const QString &amp;text, Qt::MatchFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isItemHidden</name>
            <anchorfile>qlistwidget-obsolete.html</anchorfile>
            <anchor>isItemHidden</anchor>
            <arglist>(const QListWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemHidden</name>
            <anchorfile>qlistwidget-obsolete.html</anchorfile>
            <anchor>setItemHidden</anchor>
            <arglist>(const QListWidgetItem *item, bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollToItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>scrollToItem</anchor>
            <arglist>(const QListWidgetItem *item, QAbstractItemView::ScrollHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemPressed</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemPressed</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemClicked</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemClicked</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemDoubleClicked</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemDoubleClicked</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemActivated</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemActivated</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemEntered</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemEntered</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemChanged</anchor>
            <arglist>(QListWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentItemChanged</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>currentItemChanged</anchor>
            <arglist>(QListWidgetItem *current, QListWidgetItem *previous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentTextChanged</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>currentTextChanged</anchor>
            <arglist>(const QString &amp;currentText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentRowChanged</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>currentRow-prop</anchor>
            <arglist>(int currentRow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemSelectionChanged</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemSelectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QList&lt;QListWidgetItem *&gt; &amp;items) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(int index, const QMimeData *data, Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QList&lt;QListWidgetItem *&gt;</type>
            <name>items</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>items</anchor>
            <arglist>(const QMimeData *data) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>indexFromItem</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>indexFromItem</anchor>
            <arglist>(QListWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QListWidgetItem *</type>
            <name>itemFromIndex</name>
            <anchorfile>qlistwidget.html</anchorfile>
            <anchor>itemFromIndex</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyledItemDelegate</name>
        <filename>qstyleditemdelegate.html</filename>
        <base>QAbstractItemDelegate</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyledItemDelegate</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>QStyledItemDelegate</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStyledItemDelegate</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>dtor.QStyledItemDelegate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>createEditor</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>createEditor</anchor>
            <arglist>(QWidget *parent, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setEditorData</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>setEditorData</anchor>
            <arglist>(QWidget *editor, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setModelData</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>setModelData</anchor>
            <arglist>(QWidget *editor, QAbstractItemModel *model, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateEditorGeometry</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>updateEditorGeometry</anchor>
            <arglist>(QWidget *editor, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QItemEditorFactory *</type>
            <name>itemEditorFactory</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>itemEditorFactory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemEditorFactory</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>setItemEditorFactory</anchor>
            <arglist>(QItemEditorFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>displayText</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>displayText</anchor>
            <arglist>(const QVariant &amp;value, const QLocale &amp;locale) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initStyleOption</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionViewItem *option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *editor, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>editorEvent</name>
            <anchorfile>qstyleditemdelegate.html</anchorfile>
            <anchor>editorEvent</anchor>
            <arglist>(QEvent *event, QAbstractItemModel *model, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTableView</name>
        <filename>qtableview.html</filename>
        <base>QAbstractItemView</base>
        <member kind="property" type="bool">
            <name>showGrid</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>showGrid-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::PenStyle">
            <name>gridStyle</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>gridStyle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>sortingEnabled</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wordWrap</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>cornerButtonEnabled</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>cornerButtonEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableView</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>QTableView</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTableView</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>dtor.QTableView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setModel</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRootIndex</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setRootIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelectionModel</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setSelectionModel</anchor>
            <arglist>(QItemSelectionModel *selectionModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHeaderView *</type>
            <name>horizontalHeader</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>horizontalHeader</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHeaderView *</type>
            <name>verticalHeader</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>verticalHeader</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalHeader</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setHorizontalHeader</anchor>
            <arglist>(QHeaderView *header)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalHeader</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setVerticalHeader</anchor>
            <arglist>(QHeaderView *header)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowViewportPosition</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>rowViewportPosition</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowAt</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>rowAt</anchor>
            <arglist>(int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowHeight</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setRowHeight</anchor>
            <arglist>(int row, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowHeight</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>rowHeight</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnViewportPosition</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>columnViewportPosition</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnAt</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>columnAt</anchor>
            <arglist>(int x) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnWidth</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setColumnWidth</anchor>
            <arglist>(int column, int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnWidth</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>columnWidth</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRowHidden</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>isRowHidden</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowHidden</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setRowHidden</anchor>
            <arglist>(int row, bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isColumnHidden</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>isColumnHidden</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnHidden</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setColumnHidden</anchor>
            <arglist>(int column, bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortingEnabled</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSortingEnabled</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>showGrid</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>showGrid-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenStyle</type>
            <name>gridStyle</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>gridStyle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGridStyle</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>gridStyle-prop</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWordWrap</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wordWrap</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCornerButtonEnabled</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>cornerButtonEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCornerButtonEnabled</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>cornerButtonEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>indexAt</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>indexAt</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpan</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setSpan</anchor>
            <arglist>(int row, int column, int rowSpanCount, int columnSpanCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowSpan</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>rowSpan</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnSpan</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>columnSpan</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearSpans</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>clearSpans</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortByColumn</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>sortByColumn</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectRow</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>selectRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectColumn</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>selectColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hideRow</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>hideRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hideColumn</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>hideColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showRow</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>showRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showColumn</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>showColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeRowToContents</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>resizeRowToContents</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeRowsToContents</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>resizeRowsToContents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeColumnToContents</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>resizeColumnToContents</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeColumnsToContents</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>resizeColumnsToContents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortByColumn</name>
            <anchorfile>qtableview-obsolete.html</anchorfile>
            <anchor>sortByColumn-2</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShowGrid</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>showGrid-prop</anchor>
            <arglist>(bool show)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>rowMoved</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>rowMoved</anchor>
            <arglist>(int row, int oldIndex, int newIndex)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>columnMoved</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>columnMoved</anchor>
            <arglist>(int column, int oldIndex, int newIndex)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>rowResized</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>rowResized</anchor>
            <arglist>(int row, int oldHeight, int newHeight)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>columnResized</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>columnResized</anchor>
            <arglist>(int column, int oldWidth, int newWidth)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>rowCountChanged</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>rowCountChanged</anchor>
            <arglist>(int oldCount, int newCount)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>columnCountChanged</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>columnCountChanged</anchor>
            <arglist>(int oldCount, int newCount)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QStyleOptionViewItem</type>
            <name>viewOptions</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>viewOptions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>horizontalOffset</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>horizontalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>verticalOffset</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>verticalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>moveCursor</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>moveCursor</anchor>
            <arglist>(CursorAction cursorAction, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelection</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>selectedIndexes</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>selectedIndexes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateGeometries</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>updateGeometries</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>viewportSizeHint</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>viewportSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>sizeHintForRow</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>sizeHintForRow</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>sizeHintForColumn</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>sizeHintForColumn</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isIndexHidden</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>isIndexHidden</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>selectionChanged</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>currentChanged</name>
            <anchorfile>qtableview.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTableWidgetSelectionRange</name>
        <filename>qtablewidgetselectionrange.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidgetSelectionRange</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>QTableWidgetSelectionRange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidgetSelectionRange</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>QTableWidgetSelectionRange-2</anchor>
            <arglist>(int top, int left, int bottom, int right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidgetSelectionRange</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>QTableWidgetSelectionRange-3</anchor>
            <arglist>(const QTableWidgetSelectionRange &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTableWidgetSelectionRange</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>dtor.QTableWidgetSelectionRange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>topRow</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>topRow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottomRow</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>bottomRow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>leftColumn</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>leftColumn</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rightColumn</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>rightColumn</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowCount</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qtablewidgetselectionrange.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTableWidgetItem</name>
        <filename>qtablewidgetitem.html</filename>
        <member kind="enum">
            <name>ItemType</name>
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserType">
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidgetItem</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>QTableWidgetItem</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidgetItem</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>QTableWidgetItem-2</anchor>
            <arglist>(const QString &amp;text, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidgetItem</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>QTableWidgetItem-3</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidgetItem</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>QTableWidgetItem-4</anchor>
            <arglist>(const QTableWidgetItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTableWidgetItem</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>dtor.QTableWidgetItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QTableWidgetItem *</type>
            <name>clone</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidget *</type>
            <name>tableWidget</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>tableWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelected</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setSelected</anchor>
            <arglist>(bool select)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelected</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>isSelected</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(Qt::ItemFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>statusTip</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>statusTip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatusTip</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setStatusTip</anchor>
            <arglist>(const QString &amp;statusTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>toolTip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setToolTip</anchor>
            <arglist>(const QString &amp;toolTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>whatsThis</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>whatsThis</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhatsThis</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setWhatsThis</anchor>
            <arglist>(const QString &amp;whatsThis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textAlignment</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>textAlignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextAlignment</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setTextAlignment</anchor>
            <arglist>(int alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qtablewidgetitem-obsolete.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundColor</name>
            <anchorfile>qtablewidgetitem-obsolete.html</anchorfile>
            <anchor>setBackgroundColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>background</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>textColor</name>
            <anchorfile>qtablewidgetitem-obsolete.html</anchorfile>
            <anchor>textColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextColor</name>
            <anchorfile>qtablewidgetitem-obsolete.html</anchorfile>
            <anchor>setTextColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foreground</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForeground</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setForeground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CheckState</type>
            <name>checkState</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>checkState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckState</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setCheckState</anchor>
            <arglist>(Qt::CheckState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeHint</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeHint</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setSizeHint</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setData</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(int role, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QTableWidgetItem &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>read</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QDataStream &amp;in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>write</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QDataStream &amp;out) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem &amp;</type>
            <name>operator=</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTableWidgetItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>type</name>
            <anchorfile>qtablewidgetitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTableWidget</name>
        <filename>qtablewidget.html</filename>
        <base>QTableView</base>
        <member kind="property" type="int">
            <name>rowCount</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>rowCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>columnCount</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>columnCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidget</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>QTableWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTableWidget</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>QTableWidget-2</anchor>
            <arglist>(int rows, int columns, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTableWidget</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>dtor.QTableWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowCount</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>rowCount-prop</anchor>
            <arglist>(int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowCount</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>rowCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnCount</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>columnCount-prop</anchor>
            <arglist>(int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>columnCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>row</anchor>
            <arglist>(const QTableWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>column</anchor>
            <arglist>(const QTableWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>item</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setItem</anchor>
            <arglist>(int row, int column, QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>takeItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>takeItem</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>verticalHeaderItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>verticalHeaderItem</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalHeaderItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setVerticalHeaderItem</anchor>
            <arglist>(int row, QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>takeVerticalHeaderItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>takeVerticalHeaderItem</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>horizontalHeaderItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>horizontalHeaderItem</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalHeaderItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setHorizontalHeaderItem</anchor>
            <arglist>(int column, QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>takeHorizontalHeaderItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>takeHorizontalHeaderItem</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalHeaderLabels</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setVerticalHeaderLabels</anchor>
            <arglist>(const QStringList &amp;labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalHeaderLabels</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setHorizontalHeaderLabels</anchor>
            <arglist>(const QStringList &amp;labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentRow</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>currentRow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentColumn</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>currentColumn</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>currentItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>currentItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setCurrentItem</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setCurrentItem-2</anchor>
            <arglist>(QTableWidgetItem *item, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentCell</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setCurrentCell</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentCell</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setCurrentCell-2</anchor>
            <arglist>(int row, int column, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortItems</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>sortItems</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>editItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>editItem</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>openPersistentEditor</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>openPersistentEditor</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closePersistentEditor</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>closePersistentEditor</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>cellWidget</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>cellWidget</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCellWidget</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setCellWidget</anchor>
            <arglist>(int row, int column, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeCellWidget</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>removeCellWidget</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isItemSelected</name>
            <anchorfile>qtablewidget-obsolete.html</anchorfile>
            <anchor>isItemSelected</anchor>
            <arglist>(const QTableWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemSelected</name>
            <anchorfile>qtablewidget-obsolete.html</anchorfile>
            <anchor>setItemSelected</anchor>
            <arglist>(const QTableWidgetItem *item, bool select)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRangeSelected</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setRangeSelected</anchor>
            <arglist>(const QTableWidgetSelectionRange &amp;range, bool select)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTableWidgetSelectionRange&gt;</type>
            <name>selectedRanges</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>selectedRanges</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTableWidgetItem *&gt;</type>
            <name>selectedItems</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>selectedItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTableWidgetItem *&gt;</type>
            <name>findItems</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>findItems</anchor>
            <arglist>(const QString &amp;text, Qt::MatchFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>visualRow</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>visualRow</anchor>
            <arglist>(int logicalRow) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>visualColumn</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>visualColumn</anchor>
            <arglist>(int logicalColumn) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>itemAt</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(const QPoint &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>itemAt</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemAt-2</anchor>
            <arglist>(int ax, int ay) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>visualItemRect</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>visualItemRect</anchor>
            <arglist>(const QTableWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTableWidgetItem *</type>
            <name>itemPrototype</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemPrototype</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemPrototype</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>setItemPrototype</anchor>
            <arglist>(const QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollToItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>scrollToItem</anchor>
            <arglist>(const QTableWidgetItem *item, QAbstractItemView::ScrollHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>insertRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumn</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>insertColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRow</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>removeRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeColumn</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>removeColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearContents</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>clearContents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemPressed</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemPressed</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemClicked</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemClicked</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemDoubleClicked</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemDoubleClicked</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemActivated</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemActivated</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemEntered</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemEntered</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemChanged</anchor>
            <arglist>(QTableWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentItemChanged</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>currentItemChanged</anchor>
            <arglist>(QTableWidgetItem *current, QTableWidgetItem *previous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemSelectionChanged</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemSelectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cellPressed</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>cellPressed</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cellClicked</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>cellClicked</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cellDoubleClicked</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>cellDoubleClicked</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cellActivated</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>cellActivated</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cellEntered</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>cellEntered</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cellChanged</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>cellChanged</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentCellChanged</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>currentCellChanged</anchor>
            <arglist>(int currentRow, int currentColumn, int previousRow, int previousColumn)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QList&lt;QTableWidgetItem *&gt; &amp;items) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(int row, int column, const QMimeData *data, Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QList&lt;QTableWidgetItem *&gt;</type>
            <name>items</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>items</anchor>
            <arglist>(const QMimeData *data) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>indexFromItem</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>indexFromItem</anchor>
            <arglist>(QTableWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTableWidgetItem *</type>
            <name>itemFromIndex</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>itemFromIndex</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qtablewidget.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTreeView</name>
        <filename>qtreeview.html</filename>
        <base>QAbstractItemView</base>
        <member kind="property" type="int">
            <name>autoExpandDelay</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>autoExpandDelay-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>indentation</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>indentation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>rootIsDecorated</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>rootIsDecorated-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>uniformRowHeights</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>uniformRowHeights-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>itemsExpandable</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>itemsExpandable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>sortingEnabled</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>animated</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>allColumnsShowFocus</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>allColumnsShowFocus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wordWrap</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>headerHidden</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>headerHidden-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>expandsOnDoubleClick</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>expandsOnDoubleClick-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeView</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>QTreeView</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTreeView</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>dtor.QTreeView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setModel</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRootIndex</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setRootIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelectionModel</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setSelectionModel</anchor>
            <arglist>(QItemSelectionModel *selectionModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHeaderView *</type>
            <name>header</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>header</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(QHeaderView *header)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>autoExpandDelay</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>autoExpandDelay-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoExpandDelay</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>autoExpandDelay-prop</anchor>
            <arglist>(int delay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indentation</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>indentation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndentation</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>indentation-prop</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetIndentation</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>indentation-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rootIsDecorated</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>rootIsDecorated-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootIsDecorated</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>rootIsDecorated-prop</anchor>
            <arglist>(bool show)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>uniformRowHeights</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>uniformRowHeights-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformRowHeights</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>uniformRowHeights-prop</anchor>
            <arglist>(bool uniform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>itemsExpandable</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>itemsExpandable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemsExpandable</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>itemsExpandable-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>expandsOnDoubleClick</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>expandsOnDoubleClick-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpandsOnDoubleClick</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>expandsOnDoubleClick-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnViewportPosition</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>columnViewportPosition</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnWidth</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>columnWidth</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnWidth</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setColumnWidth</anchor>
            <arglist>(int column, int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnAt</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>columnAt</anchor>
            <arglist>(int x) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isColumnHidden</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>isColumnHidden</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnHidden</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setColumnHidden</anchor>
            <arglist>(int column, bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHeaderHidden</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>headerHidden-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeaderHidden</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>headerHidden-prop</anchor>
            <arglist>(bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRowHidden</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>isRowHidden</anchor>
            <arglist>(int row, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowHidden</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setRowHidden</anchor>
            <arglist>(int row, const QModelIndex &amp;parent, bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFirstColumnSpanned</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>isFirstColumnSpanned</anchor>
            <arglist>(int row, const QModelIndex &amp;parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstColumnSpanned</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setFirstColumnSpanned</anchor>
            <arglist>(int row, const QModelIndex &amp;parent, bool span)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExpanded</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>isExpanded</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpanded</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setExpanded</anchor>
            <arglist>(const QModelIndex &amp;index, bool expanded)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortingEnabled</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSortingEnabled</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>sortingEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimated</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnimated</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllColumnsShowFocus</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>allColumnsShowFocus-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>allColumnsShowFocus</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>allColumnsShowFocus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWordWrap</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wordWrap</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTreePosition</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setTreePosition</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>treePosition</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>treePosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyboardSearch</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>keyboardSearch</anchor>
            <arglist>(const QString &amp;search)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>visualRect</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>visualRect</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollTo</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>scrollTo</anchor>
            <arglist>(const QModelIndex &amp;index, ScrollHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>indexAt</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>indexAt</anchor>
            <arglist>(const QPoint &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>indexAbove</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>indexAbove</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>indexBelow</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>indexBelow</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>reset</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortByColumn</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>sortByColumn</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dataChanged</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight, const QVector&lt;int&gt; &amp;roles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>selectAll</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>selectAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>expanded</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>expanded</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>collapsed</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>collapsed</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hideColumn</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>hideColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showColumn</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>showColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>expand</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>expand</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>collapse</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>collapse</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeColumnToContents</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>resizeColumnToContents</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortByColumn</name>
            <anchorfile>qtreeview-obsolete.html</anchorfile>
            <anchor>sortByColumn-2</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>expandAll</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>expandAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>collapseAll</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>collapseAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>expandToDepth</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>expandToDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>columnResized</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>columnResized</anchor>
            <arglist>(int column, int oldSize, int newSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>columnCountChanged</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>columnCountChanged</anchor>
            <arglist>(int oldCount, int newCount)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>columnMoved</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>columnMoved</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>rowsRemoved</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>rowsRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollContentsBy</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>scrollContentsBy</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>rowsInserted</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>rowsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>rowsAboutToBeRemoved</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>rowsAboutToBeRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>moveCursor</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>moveCursor</anchor>
            <arglist>(CursorAction cursorAction, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>horizontalOffset</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>horizontalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>verticalOffset</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>verticalOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelection</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(const QRect &amp;rect, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QRegion</type>
            <name>visualRegionForSelection</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>visualRegionForSelection</anchor>
            <arglist>(const QItemSelection &amp;selection) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>selectedIndexes</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>selectedIndexes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>drawTree</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>drawTree</anchor>
            <arglist>(QPainter *painter, const QRegion &amp;region) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRow</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>drawRow</anchor>
            <arglist>(QPainter *painter, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawBranches</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>drawBranches</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rect, const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>viewportEvent</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>viewportEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateGeometries</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>updateGeometries</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>viewportSizeHint</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>viewportSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>sizeHintForColumn</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>sizeHintForColumn</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>indexRowSizeHint</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>indexRowSizeHint</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>rowHeight</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>rowHeight</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isIndexHidden</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>isIndexHidden</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>selectionChanged</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>currentChanged</name>
            <anchorfile>qtreeview.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTreeWidgetItem</name>
        <filename>qtreewidgetitem.html</filename>
        <member kind="enum">
            <name>ItemType</name>
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserType">
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem-2</anchor>
            <arglist>(const QStringList &amp;strings, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem-3</anchor>
            <arglist>(QTreeWidget *parent, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem-4</anchor>
            <arglist>(QTreeWidget *parent, const QStringList &amp;strings, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem-5</anchor>
            <arglist>(QTreeWidget *parent, QTreeWidgetItem *preceding, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem-6</anchor>
            <arglist>(QTreeWidgetItem *parent, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem-7</anchor>
            <arglist>(QTreeWidgetItem *parent, const QStringList &amp;strings, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem-8</anchor>
            <arglist>(QTreeWidgetItem *parent, QTreeWidgetItem *preceding, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>QTreeWidgetItem-9</anchor>
            <arglist>(const QTreeWidgetItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTreeWidgetItem</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>dtor.QTreeWidgetItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QTreeWidgetItem *</type>
            <name>clone</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidget *</type>
            <name>treeWidget</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>treeWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelected</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setSelected</anchor>
            <arglist>(bool select)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelected</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>isSelected</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHidden</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setHidden</anchor>
            <arglist>(bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHidden</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>isHidden</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpanded</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setExpanded</anchor>
            <arglist>(bool expand)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExpanded</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>isExpanded</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstColumnSpanned</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setFirstColumnSpanned</anchor>
            <arglist>(bool span)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFirstColumnSpanned</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>isFirstColumnSpanned</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDisabled</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setDisabled</anchor>
            <arglist>(bool disabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDisabled</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>isDisabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>ChildIndicatorPolicy</name>
            <anchor>ChildIndicatorPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShowIndicator">
            <anchor>ChildIndicatorPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontShowIndicator">
            <anchor>ChildIndicatorPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontShowIndicatorWhenChildless">
            <anchor>ChildIndicatorPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChildIndicatorPolicy</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setChildIndicatorPolicy</anchor>
            <arglist>(QTreeWidgetItem::ChildIndicatorPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem::ChildIndicatorPolicy</type>
            <name>childIndicatorPolicy</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>childIndicatorPolicy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(Qt::ItemFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(int column, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(int column, const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>statusTip</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>statusTip</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatusTip</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setStatusTip</anchor>
            <arglist>(int column, const QString &amp;statusTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>toolTip</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setToolTip</anchor>
            <arglist>(int column, const QString &amp;toolTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>whatsThis</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>whatsThis</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhatsThis</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setWhatsThis</anchor>
            <arglist>(int column, const QString &amp;whatsThis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(int column, const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textAlignment</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>textAlignment</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextAlignment</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setTextAlignment</anchor>
            <arglist>(int column, int alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qtreewidgetitem-obsolete.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundColor</name>
            <anchorfile>qtreewidgetitem-obsolete.html</anchorfile>
            <anchor>setBackgroundColor</anchor>
            <arglist>(int column, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>background</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>background</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(int column, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>textColor</name>
            <anchorfile>qtreewidgetitem-obsolete.html</anchorfile>
            <anchor>textColor</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextColor</name>
            <anchorfile>qtreewidgetitem-obsolete.html</anchorfile>
            <anchor>setTextColor</anchor>
            <arglist>(int column, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foreground</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForeground</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setForeground</anchor>
            <arglist>(int column, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CheckState</type>
            <name>checkState</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>checkState</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckState</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setCheckState</anchor>
            <arglist>(int column, Qt::CheckState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeHint</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeHint</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setSizeHint</anchor>
            <arglist>(int column, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int column, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setData</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(int column, int role, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QTreeWidgetItem &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>read</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QDataStream &amp;in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>write</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QDataStream &amp;out) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem &amp;</type>
            <name>operator=</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTreeWidgetItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>parent</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>child</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>child</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>childCount</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>childCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfChild</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>indexOfChild</anchor>
            <arglist>(QTreeWidgetItem *child) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addChild</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>addChild</anchor>
            <arglist>(QTreeWidgetItem *child)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChild</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>insertChild</anchor>
            <arglist>(int index, QTreeWidgetItem *child)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChild</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>removeChild</anchor>
            <arglist>(QTreeWidgetItem *child)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>takeChild</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>takeChild</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addChildren</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>addChildren</anchor>
            <arglist>(const QList&lt;QTreeWidgetItem *&gt; &amp;children)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChildren</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>insertChildren</anchor>
            <arglist>(int index, const QList&lt;QTreeWidgetItem *&gt; &amp;children)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTreeWidgetItem *&gt;</type>
            <name>takeChildren</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>takeChildren</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>type</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortChildren</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>sortChildren</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>emitDataChanged</name>
            <anchorfile>qtreewidgetitem.html</anchorfile>
            <anchor>emitDataChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTreeWidget</name>
        <filename>qtreewidget.html</filename>
        <base>QTreeView</base>
        <member kind="property" type="int">
            <name>columnCount</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>columnCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>topLevelItemCount</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>topLevelItemCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidget</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>QTreeWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTreeWidget</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>dtor.QTreeWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>columnCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnCount</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>columnCount-prop</anchor>
            <arglist>(int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>invisibleRootItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>invisibleRootItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>topLevelItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>topLevelItem</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>topLevelItemCount</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>topLevelItemCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertTopLevelItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>insertTopLevelItem</anchor>
            <arglist>(int index, QTreeWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTopLevelItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>addTopLevelItem</anchor>
            <arglist>(QTreeWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>takeTopLevelItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>takeTopLevelItem</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfTopLevelItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>indexOfTopLevelItem</anchor>
            <arglist>(QTreeWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertTopLevelItems</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>insertTopLevelItems</anchor>
            <arglist>(int index, const QList&lt;QTreeWidgetItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTopLevelItems</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>addTopLevelItems</anchor>
            <arglist>(const QList&lt;QTreeWidgetItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>headerItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>headerItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeaderItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setHeaderItem</anchor>
            <arglist>(QTreeWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeaderLabels</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setHeaderLabels</anchor>
            <arglist>(const QStringList &amp;labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeaderLabel</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setHeaderLabel</anchor>
            <arglist>(const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>currentItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>currentItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentColumn</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>currentColumn</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setCurrentItem</anchor>
            <arglist>(QTreeWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setCurrentItem-2</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setCurrentItem-3</anchor>
            <arglist>(QTreeWidgetItem *item, int column, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>itemAt</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(const QPoint &amp;p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>itemAt</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemAt-2</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>visualItemRect</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>visualItemRect</anchor>
            <arglist>(const QTreeWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sortColumn</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>sortColumn</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortItems</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>sortItems</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>editItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>editItem</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>openPersistentEditor</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>openPersistentEditor</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closePersistentEditor</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>closePersistentEditor</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>itemWidget</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemWidget</anchor>
            <arglist>(QTreeWidgetItem *item, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemWidget</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setItemWidget</anchor>
            <arglist>(QTreeWidgetItem *item, int column, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItemWidget</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>removeItemWidget</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isItemSelected</name>
            <anchorfile>qtreewidget-obsolete.html</anchorfile>
            <anchor>isItemSelected</anchor>
            <arglist>(const QTreeWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemSelected</name>
            <anchorfile>qtreewidget-obsolete.html</anchorfile>
            <anchor>setItemSelected</anchor>
            <arglist>(const QTreeWidgetItem *item, bool select)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTreeWidgetItem *&gt;</type>
            <name>selectedItems</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>selectedItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTreeWidgetItem *&gt;</type>
            <name>findItems</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>findItems</anchor>
            <arglist>(const QString &amp;text, Qt::MatchFlags flags, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isItemHidden</name>
            <anchorfile>qtreewidget-obsolete.html</anchorfile>
            <anchor>isItemHidden</anchor>
            <arglist>(const QTreeWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemHidden</name>
            <anchorfile>qtreewidget-obsolete.html</anchorfile>
            <anchor>setItemHidden</anchor>
            <arglist>(const QTreeWidgetItem *item, bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isItemExpanded</name>
            <anchorfile>qtreewidget-obsolete.html</anchorfile>
            <anchor>isItemExpanded</anchor>
            <arglist>(const QTreeWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemExpanded</name>
            <anchorfile>qtreewidget-obsolete.html</anchorfile>
            <anchor>setItemExpanded</anchor>
            <arglist>(const QTreeWidgetItem *item, bool expand)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFirstItemColumnSpanned</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>isFirstItemColumnSpanned</anchor>
            <arglist>(const QTreeWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstItemColumnSpanned</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setFirstItemColumnSpanned</anchor>
            <arglist>(const QTreeWidgetItem *item, bool span)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>itemAbove</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemAbove</anchor>
            <arglist>(const QTreeWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>itemBelow</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemBelow</anchor>
            <arglist>(const QTreeWidgetItem *item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSelectionModel</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>setSelectionModel</anchor>
            <arglist>(QItemSelectionModel *selectionModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollToItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>scrollToItem</anchor>
            <arglist>(const QTreeWidgetItem *item, QAbstractItemView::ScrollHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>expandItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>expandItem</anchor>
            <arglist>(const QTreeWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>collapseItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>collapseItem</anchor>
            <arglist>(const QTreeWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemPressed</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemPressed</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemClicked</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemClicked</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemDoubleClicked</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemDoubleClicked</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemActivated</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemActivated</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemEntered</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemEntered</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemChanged</anchor>
            <arglist>(QTreeWidgetItem *item, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemExpanded</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemExpanded</anchor>
            <arglist>(QTreeWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemCollapsed</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemCollapsed</anchor>
            <arglist>(QTreeWidgetItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentItemChanged</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>currentItemChanged</anchor>
            <arglist>(QTreeWidgetItem *current, QTreeWidgetItem *previous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemSelectionChanged</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemSelectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QList&lt;QTreeWidgetItem *&gt; &amp;items) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(QTreeWidgetItem *parent, int index, const QMimeData *data, Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QList&lt;QTreeWidgetItem *&gt;</type>
            <name>items</name>
            <anchorfile>qtreewidget-obsolete.html</anchorfile>
            <anchor>items</anchor>
            <arglist>(const QMimeData *data) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>indexFromItem</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>indexFromItem</anchor>
            <arglist>(QTreeWidgetItem *item, int column) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>itemFromIndex</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>itemFromIndex</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qtreewidget.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTreeWidgetItemIterator</name>
        <filename>qtreewidgetitemiterator.html</filename>
        <member kind="enum">
            <name>IteratorFlag</name>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="All">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hidden">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotHidden">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Selected">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unselected">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Selectable">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSelectable">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragEnabled">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragDisabled">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DropEnabled">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DropDisabled">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HasChildren">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoChildren">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Checked">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotChecked">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Enabled">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Disabled">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Editable">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEditable">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserFlag">
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTreeWidgetItemIterator::IteratorFlag">
            <name>IteratorFlags</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItemIterator</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>QTreeWidgetItemIterator</anchor>
            <arglist>(const QTreeWidgetItemIterator &amp;it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItemIterator</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>QTreeWidgetItemIterator-2</anchor>
            <arglist>(QTreeWidget *widget, IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTreeWidgetItemIterator</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>QTreeWidgetItemIterator-3</anchor>
            <arglist>(QTreeWidgetItem *item, IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTreeWidgetItemIterator</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>dtor.QTreeWidgetItemIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItemIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTreeWidgetItemIterator &amp;it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItemIterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTreeWidgetItemIterator</type>
            <name>operator++</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItemIterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItemIterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTreeWidgetItemIterator</type>
            <name>operator--</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItemIterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTreeWidgetItem *</type>
            <name>operator*</name>
            <anchorfile>qtreewidgetitemiterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAction</name>
        <filename>qaction.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>checkable</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>checked</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QIcon">
            <name>icon</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>iconText</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>iconText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>toolTip</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>statusTip</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>statusTip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>whatsThis</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QKeySequence">
            <name>shortcut</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>shortcut-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ShortcutContext">
            <name>shortcutContext</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>shortcutContext-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoRepeat</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="MenuRole">
            <name>menuRole</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>menuRole-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>iconVisibleInMenu</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>iconVisibleInMenu-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Priority">
            <name>priority</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>priority-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MenuRole</name>
            <anchor>MenuRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoRole">
            <anchor>MenuRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextHeuristicRole">
            <anchor>MenuRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationSpecificRole">
            <anchor>MenuRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AboutQtRole">
            <anchor>MenuRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AboutRole">
            <anchor>MenuRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferencesRole">
            <anchor>MenuRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QuitRole">
            <anchor>MenuRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Priority</name>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAction</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>QAction</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAction</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>QAction-2</anchor>
            <arglist>(const QString &amp;text, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAction</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>QAction-3</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAction</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>dtor.QAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActionGroup</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>setActionGroup</anchor>
            <arglist>(QActionGroup *group)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QActionGroup *</type>
            <name>actionGroup</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>actionGroup</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconText</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>iconText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>iconText</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>iconText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist>(const QString &amp;tip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatusTip</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>statusTip-prop</anchor>
            <arglist>(const QString &amp;statusTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>statusTip</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>statusTip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhatsThis</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist>(const QString &amp;what)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>whatsThis</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPriority</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>priority-prop</anchor>
            <arglist>(Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Priority</type>
            <name>priority</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>priority-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>menu</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>menu</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMenu</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>setMenu</anchor>
            <arglist>(QMenu *menu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSeparator</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>setSeparator</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSeparator</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>isSeparator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcut</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>shortcut-prop</anchor>
            <arglist>(const QKeySequence &amp;shortcut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeySequence</type>
            <name>shortcut</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>shortcut-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcuts</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>setShortcuts</anchor>
            <arglist>(const QList&lt;QKeySequence&gt; &amp;shortcuts)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcuts</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>setShortcuts-2</anchor>
            <arglist>(QKeySequence::StandardKey key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QKeySequence&gt;</type>
            <name>shortcuts</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>shortcuts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcutContext</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>shortcutContext-prop</anchor>
            <arglist>(Qt::ShortcutContext context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ShortcutContext</type>
            <name>shortcutContext</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>shortcutContext-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRepeat</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRepeat</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckable</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCheckable</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariant &amp;userData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isChecked</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>ActionEvent</name>
            <anchor>ActionEvent-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Trigger">
            <anchor>ActionEvent-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hover">
            <anchor>ActionEvent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activate</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>activate</anchor>
            <arglist>(ActionEvent event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>showStatusText</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>showStatusText</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMenuRole</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>menuRole-prop</anchor>
            <arglist>(MenuRole menuRole)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MenuRole</type>
            <name>menuRole</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>menuRole-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconVisibleInMenu</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>iconVisibleInMenu-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIconVisibleInMenu</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>iconVisibleInMenu-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>parentWidget</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>parentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QWidget *&gt;</type>
            <name>associatedWidgets</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>associatedWidgets</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGraphicsWidget *&gt;</type>
            <name>associatedGraphicsWidgets</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>associatedGraphicsWidgets</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trigger</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>trigger</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hover</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>hover</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChecked</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggle</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>toggle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDisabled</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>setDisabled</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>changed</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggered</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>triggered</anchor>
            <arglist>(bool checked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hovered</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>hovered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggled</name>
            <anchorfile>qaction.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>(bool checked)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QActionGroup</name>
        <filename>qactiongroup.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>exclusive</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>exclusive-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QActionGroup</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>QActionGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QActionGroup</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>dtor.QActionGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>addAction-2</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>addAction-3</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAction</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>removeAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAction *&gt;</type>
            <name>actions</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>actions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>checkedAction</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>checkedAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExclusive</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>exclusive-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDisabled</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>setDisabled</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExclusive</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>exclusive-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggered</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>triggered</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hovered</name>
            <anchorfile>qactiongroup.html</anchorfile>
            <anchor>hovered</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QApplication</name>
        <filename>qapplication.html</filename>
        <base>QGuiApplication</base>
        <member kind="property" type="QIcon">
            <name>windowIcon</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>cursorFlashTime</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>cursorFlashTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>doubleClickInterval</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>doubleClickInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>keyboardInputInterval</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>keyboardInputInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>wheelScrollLines</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>wheelScrollLines-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>globalStrut</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>globalStrut-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>startDragTime</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>startDragTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>startDragDistance</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>startDragDistance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>styleSheet</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>styleSheet-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>autoMaximizeThreshold</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>autoMaximizeThreshold-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoSipEnabled</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>autoSipEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QApplication</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>QApplication</anchor>
            <arglist>(int &amp;argc, char **argv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QApplication</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>dtor.QApplication</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStyle *</type>
            <name>style</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>style</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(QStyle *style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStyle *</type>
            <name>setStyle</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>setStyle-2</anchor>
            <arglist>(const QString &amp;style)</arglist>
        </member>
        <member kind="enum">
            <name>ColorSpec</name>
            <anchor>ColorSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalColor">
            <anchor>ColorSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomColor">
            <anchor>ColorSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ManyColor">
            <anchor>ColorSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>colorSpec</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>colorSpec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setColorSpec</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>setColorSpec</anchor>
            <arglist>(int spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setGraphicsSystem</name>
            <anchorfile>qapplication-obsolete.html</anchorfile>
            <anchor>setGraphicsSystem</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPalette</type>
            <name>palette</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>palette</anchor>
            <arglist>(const QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPalette</type>
            <name>palette</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>palette-2</anchor>
            <arglist>(const char *className)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPalette</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>setPalette</anchor>
            <arglist>(const QPalette &amp;palette, const char *className)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>font</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>font-2</anchor>
            <arglist>(const QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>font-3</anchor>
            <arglist>(const char *className)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font, const char *className)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFontMetrics</type>
            <name>fontMetrics</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>fontMetrics</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setWindowIcon</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QIcon</type>
            <name>windowIcon</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidgetList</type>
            <name>allWidgets</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>allWidgets</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidgetList</type>
            <name>topLevelWidgets</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>topLevelWidgets</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDesktopWidget *</type>
            <name>desktop</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>desktop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>activePopupWidget</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>activePopupWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>activeModalWidget</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>activeModalWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>focusWidget</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>focusWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>activeWindow</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>activeWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setActiveWindow</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>setActiveWindow</anchor>
            <arglist>(QWidget *active)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>widgetAt</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>widgetAt</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>widgetAt</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>widgetAt-2</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>topLevelAt</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>topLevelAt</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>topLevelAt</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>topLevelAt-2</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>beep</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>beep</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>alert</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>alert</anchor>
            <arglist>(QWidget *widget, int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setCursorFlashTime</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>cursorFlashTime-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>cursorFlashTime</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>cursorFlashTime-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDoubleClickInterval</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>doubleClickInterval-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>doubleClickInterval</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>doubleClickInterval-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setKeyboardInputInterval</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>keyboardInputInterval-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>keyboardInputInterval</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>keyboardInputInterval-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setWheelScrollLines</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>wheelScrollLines-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>wheelScrollLines</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>wheelScrollLines-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setGlobalStrut</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>globalStrut-prop</anchor>
            <arglist>(const QSize &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSize</type>
            <name>globalStrut</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>globalStrut-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStartDragTime</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>startDragTime-prop</anchor>
            <arglist>(int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>startDragTime</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>startDragTime-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStartDragDistance</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>startDragDistance-prop</anchor>
            <arglist>(int l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>startDragDistance</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>startDragDistance-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isEffectEnabled</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>isEffectEnabled</anchor>
            <arglist>(Qt::UIEffect effect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setEffectEnabled</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>setEffectEnabled</anchor>
            <arglist>(Qt::UIEffect effect, bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale</type>
            <name>keyboardInputLocale</name>
            <anchorfile>qapplication-obsolete.html</anchorfile>
            <anchor>keyboardInputLocale</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::LayoutDirection</type>
            <name>keyboardInputDirection</name>
            <anchorfile>qapplication-obsolete.html</anchorfile>
            <anchor>keyboardInputDirection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>notify</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>notify</anchor>
            <arglist>(QObject *receiver, QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setKeypadNavigationEnabled</name>
            <anchorfile>qapplication-obsolete.html</anchorfile>
            <anchor>setKeypadNavigationEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>keypadNavigationEnabled</name>
            <anchorfile>qapplication-obsolete.html</anchorfile>
            <anchor>keypadNavigationEnabled</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setNavigationMode</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>setNavigationMode</anchor>
            <arglist>(Qt::NavigationMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::NavigationMode</type>
            <name>navigationMode</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>navigationMode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusChanged</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>focusChanged</anchor>
            <arglist>(QWidget *old, QWidget *now)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleSheet</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>styleSheet-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyleSheet</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>styleSheet-prop</anchor>
            <arglist>(const QString &amp;sheet)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoMaximizeThreshold</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>autoMaximizeThreshold-prop</anchor>
            <arglist>(const int threshold)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>autoMaximizeThreshold</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>autoMaximizeThreshold-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoSipEnabled</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>autoSipEnabled-prop</anchor>
            <arglist>(const bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoSipEnabled</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>autoSipEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>closeAllWindows</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>closeAllWindows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>aboutQt</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>aboutQt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qapplication.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBoxLayout</name>
        <filename>qboxlayout.html</filename>
        <base>QLayout</base>
        <member kind="enum">
            <name>Direction</name>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftToRight">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightToLeft">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopToBottom">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomToTop">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Down">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Up">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBoxLayout</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>QBoxLayout</anchor>
            <arglist>(Direction dir, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBoxLayout</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>dtor.QBoxLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Direction</type>
            <name>direction</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>setDirection</anchor>
            <arglist>(Direction direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addSpacing</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>addSpacing</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addStretch</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>addStretch</anchor>
            <arglist>(int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addSpacerItem</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>addSpacerItem</anchor>
            <arglist>(QSpacerItem *spacerItem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addWidget</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *widget, int stretch, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addLayout</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>addLayout</anchor>
            <arglist>(QLayout *layout, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addStrut</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>addStrut</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addItem</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertSpacing</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>insertSpacing</anchor>
            <arglist>(int index, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertStretch</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>insertStretch</anchor>
            <arglist>(int index, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertSpacerItem</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>insertSpacerItem</anchor>
            <arglist>(int index, QSpacerItem *spacerItem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertWidget</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>insertWidget</anchor>
            <arglist>(int index, QWidget *widget, int stretch, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertLayout</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>insertLayout</anchor>
            <arglist>(int index, QLayout *layout, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertItem</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>insertItem</anchor>
            <arglist>(int index, QLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>spacing</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>spacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>setSpacing</anchor>
            <arglist>(int spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setStretchFactor</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>setStretchFactor</anchor>
            <arglist>(QWidget *widget, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setStretchFactor</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>setStretchFactor-2</anchor>
            <arglist>(QLayout *layout, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStretch</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>setStretch</anchor>
            <arglist>(int index, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>stretch</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>stretch</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSize</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>maximumSize</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>minimumHeightForWidth</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>minimumHeightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::Orientations</type>
            <name>expandingDirections</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>expandingDirections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayoutItem *</type>
            <name>takeAt</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qboxlayout.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;r)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHBoxLayout</name>
        <filename>qhboxlayout.html</filename>
        <base>QBoxLayout</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHBoxLayout</name>
            <anchorfile>qhboxlayout.html</anchorfile>
            <anchor>QHBoxLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHBoxLayout</name>
            <anchorfile>qhboxlayout.html</anchorfile>
            <anchor>QHBoxLayout-2</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHBoxLayout</name>
            <anchorfile>qhboxlayout.html</anchorfile>
            <anchor>dtor.QHBoxLayout</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVBoxLayout</name>
        <filename>qvboxlayout.html</filename>
        <base>QBoxLayout</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVBoxLayout</name>
            <anchorfile>qvboxlayout.html</anchorfile>
            <anchor>QVBoxLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVBoxLayout</name>
            <anchorfile>qvboxlayout.html</anchorfile>
            <anchor>QVBoxLayout-2</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVBoxLayout</name>
            <anchorfile>qvboxlayout.html</anchorfile>
            <anchor>dtor.QVBoxLayout</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDesktopWidget</name>
        <filename>qdesktopwidget.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>virtualDesktop</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>virtualDesktop-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>screenCount</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screenCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>primaryScreen</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>primaryScreen-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVirtualDesktop</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>virtualDesktop-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numScreens</name>
            <anchorfile>qdesktopwidget-obsolete.html</anchorfile>
            <anchor>numScreens</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>screenCount</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screenCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>primaryScreen</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>primaryScreen-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>screenNumber</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screenNumber</anchor>
            <arglist>(const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>screenNumber</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screenNumber-2</anchor>
            <arglist>(const QPoint &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>screen</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screen</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect</type>
            <name>screenGeometry</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screenGeometry</anchor>
            <arglist>(int screen) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect</type>
            <name>screenGeometry</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screenGeometry-2</anchor>
            <arglist>(const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect</type>
            <name>screenGeometry</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screenGeometry-3</anchor>
            <arglist>(const QPoint &amp;p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect</type>
            <name>availableGeometry</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>availableGeometry</anchor>
            <arglist>(int screen) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect</type>
            <name>availableGeometry</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>availableGeometry-2</anchor>
            <arglist>(const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect</type>
            <name>availableGeometry</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>availableGeometry-3</anchor>
            <arglist>(const QPoint &amp;p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resized</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>resized</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workAreaResized</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>workAreaResized</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>screenCountChanged</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>screenCount-prop</anchor>
            <arglist>(int newCount)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qdesktopwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFormLayout</name>
        <filename>qformlayout.html</filename>
        <base>QLayout</base>
        <member kind="property" type="FieldGrowthPolicy">
            <name>fieldGrowthPolicy</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>fieldGrowthPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="RowWrapPolicy">
            <name>rowWrapPolicy</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>rowWrapPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>labelAlignment</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>labelAlignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>formAlignment</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>formAlignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>horizontalSpacing</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>horizontalSpacing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>verticalSpacing</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>verticalSpacing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FieldGrowthPolicy</name>
            <anchor>FieldGrowthPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FieldsStayAtSizeHint">
            <anchor>FieldGrowthPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExpandingFieldsGrow">
            <anchor>FieldGrowthPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllNonFixedFieldsGrow">
            <anchor>FieldGrowthPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RowWrapPolicy</name>
            <anchor>RowWrapPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontWrapRows">
            <anchor>RowWrapPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WrapLongRows">
            <anchor>RowWrapPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WrapAllRows">
            <anchor>RowWrapPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ItemRole</name>
            <anchor>ItemRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LabelRole">
            <anchor>ItemRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FieldRole">
            <anchor>ItemRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SpanningRole">
            <anchor>ItemRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFormLayout</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>QFormLayout</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFormLayout</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>dtor.QFormLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldGrowthPolicy</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>fieldGrowthPolicy-prop</anchor>
            <arglist>(FieldGrowthPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FieldGrowthPolicy</type>
            <name>fieldGrowthPolicy</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>fieldGrowthPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowWrapPolicy</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>rowWrapPolicy-prop</anchor>
            <arglist>(RowWrapPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RowWrapPolicy</type>
            <name>rowWrapPolicy</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>rowWrapPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLabelAlignment</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>labelAlignment-prop</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>labelAlignment</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>labelAlignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormAlignment</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>formAlignment-prop</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>formAlignment</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>formAlignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalSpacing</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>horizontalSpacing-prop</anchor>
            <arglist>(int spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>horizontalSpacing</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>horizontalSpacing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalSpacing</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>verticalSpacing-prop</anchor>
            <arglist>(int spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verticalSpacing</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>verticalSpacing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>spacing</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>spacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>setSpacing</anchor>
            <arglist>(int spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>addRow</anchor>
            <arglist>(QWidget *label, QWidget *field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>addRow-2</anchor>
            <arglist>(QWidget *label, QLayout *field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>addRow-3</anchor>
            <arglist>(const QString &amp;labelText, QWidget *field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>addRow-4</anchor>
            <arglist>(const QString &amp;labelText, QLayout *field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>addRow-5</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>addRow-6</anchor>
            <arglist>(QLayout *layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>insertRow</anchor>
            <arglist>(int row, QWidget *label, QWidget *field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>insertRow-2</anchor>
            <arglist>(int row, QWidget *label, QLayout *field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>insertRow-3</anchor>
            <arglist>(int row, const QString &amp;labelText, QWidget *field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>insertRow-4</anchor>
            <arglist>(int row, const QString &amp;labelText, QLayout *field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>insertRow-5</anchor>
            <arglist>(int row, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>insertRow-6</anchor>
            <arglist>(int row, QLayout *layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>setItem</anchor>
            <arglist>(int row, ItemRole role, QLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidget</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>setWidget</anchor>
            <arglist>(int row, ItemRole role, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayout</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>setLayout</anchor>
            <arglist>(int row, ItemRole role, QLayout *layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int row, ItemRole role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getItemPosition</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>getItemPosition</anchor>
            <arglist>(int index, int *rowPtr, ItemRole *rolePtr) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getWidgetPosition</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>getWidgetPosition</anchor>
            <arglist>(QWidget *widget, int *rowPtr, ItemRole *rolePtr) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getLayoutPosition</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>getLayoutPosition</anchor>
            <arglist>(QLayout *layout, int *rowPtr, ItemRole *rolePtr) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>labelForField</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>labelForField</anchor>
            <arglist>(QWidget *field) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>labelForField</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>labelForField-2</anchor>
            <arglist>(QLayout *field) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addItem</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>itemAt-2</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayoutItem *</type>
            <name>takeAt</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSize</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int width) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::Orientations</type>
            <name>expandingDirections</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>expandingDirections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowCount</name>
            <anchorfile>qformlayout.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGesture</name>
        <filename>qgesture.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt::GestureState">
            <name>state</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::GestureType">
            <name>gestureType</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>gestureType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGesture::GestureCancelPolicy">
            <name>gestureCancelPolicy</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>gestureCancelPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>hotSpot</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>hotSpot-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasHotSpot</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>hasHotSpot-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGesture</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>QGesture</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGesture</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>dtor.QGesture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::GestureType</type>
            <name>gestureType</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>gestureType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::GestureState</type>
            <name>state</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>hotSpot</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>hotSpot-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHotSpot</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>hotSpot-prop</anchor>
            <arglist>(const QPointF &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasHotSpot</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>hasHotSpot-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetHotSpot</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>hotSpot-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>GestureCancelPolicy</name>
            <anchor>GestureCancelPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CancelNone">
            <anchor>GestureCancelPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CancelAllInContext">
            <anchor>GestureCancelPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGestureCancelPolicy</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>gestureCancelPolicy-prop</anchor>
            <arglist>(GestureCancelPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GestureCancelPolicy</type>
            <name>gestureCancelPolicy</name>
            <anchorfile>qgesture.html</anchorfile>
            <anchor>gestureCancelPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPanGesture</name>
        <filename>qpangesture.html</filename>
        <base>QGesture</base>
        <member kind="property" type="QPointF">
            <name>lastOffset</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>lastOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>offset</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>delta</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>delta-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>acceleration</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPanGesture</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>dtor.QPanGesture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastOffset</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>lastOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>offset</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>delta</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>delta-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>acceleration</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLastOffset</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>lastOffset-prop</anchor>
            <arglist>(const QPointF &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>(const QPointF &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceleration</name>
            <anchorfile>qpangesture.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPinchGesture</name>
        <filename>qpinchgesture.html</filename>
        <base>QGesture</base>
        <member kind="enum">
            <name>ChangeFlag</name>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScaleFactorChanged">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RotationAngleChanged">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CenterPointChanged">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPinchGesture::ChangeFlag">
            <name>ChangeFlags</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ChangeFlags">
            <name>totalChangeFlags</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalChangeFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ChangeFlags">
            <name>changeFlags</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>changeFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>totalScaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalScaleFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>lastScaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastScaleFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>scaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>totalRotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalRotationAngle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>lastRotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastRotationAngle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>rotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>rotationAngle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>startCenterPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>startCenterPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>lastCenterPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastCenterPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>centerPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>centerPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPinchGesture</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>dtor.QPinchGesture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ChangeFlags</type>
            <name>totalChangeFlags</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalChangeFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTotalChangeFlags</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalChangeFlags-prop</anchor>
            <arglist>(ChangeFlags value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ChangeFlags</type>
            <name>changeFlags</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>changeFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChangeFlags</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>changeFlags-prop</anchor>
            <arglist>(ChangeFlags value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startCenterPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>startCenterPoint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastCenterPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastCenterPoint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>centerPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>centerPoint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartCenterPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>startCenterPoint-prop</anchor>
            <arglist>(const QPointF &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLastCenterPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastCenterPoint-prop</anchor>
            <arglist>(const QPointF &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenterPoint</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>centerPoint-prop</anchor>
            <arglist>(const QPointF &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>totalScaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalScaleFactor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lastScaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastScaleFactor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>scaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTotalScaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalScaleFactor-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLastScaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastScaleFactor-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaleFactor</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>totalRotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalRotationAngle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lastRotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastRotationAngle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>rotationAngle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTotalRotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>totalRotationAngle-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLastRotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>lastRotationAngle-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationAngle</name>
            <anchorfile>qpinchgesture.html</anchorfile>
            <anchor>rotationAngle-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSwipeGesture</name>
        <filename>qswipegesture.html</filename>
        <base>QGesture</base>
        <member kind="property" type="SwipeDirection">
            <name>horizontalDirection</name>
            <anchorfile>qswipegesture.html</anchorfile>
            <anchor>horizontalDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SwipeDirection">
            <name>verticalDirection</name>
            <anchorfile>qswipegesture.html</anchorfile>
            <anchor>verticalDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>swipeAngle</name>
            <anchorfile>qswipegesture.html</anchorfile>
            <anchor>swipeAngle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SwipeDirection</name>
            <anchor>SwipeDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDirection">
            <anchor>SwipeDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Left">
            <anchor>SwipeDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Right">
            <anchor>SwipeDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Up">
            <anchor>SwipeDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Down">
            <anchor>SwipeDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSwipeGesture</name>
            <anchorfile>qswipegesture.html</anchorfile>
            <anchor>dtor.QSwipeGesture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SwipeDirection</type>
            <name>horizontalDirection</name>
            <anchorfile>qswipegesture.html</anchorfile>
            <anchor>horizontalDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SwipeDirection</type>
            <name>verticalDirection</name>
            <anchorfile>qswipegesture.html</anchorfile>
            <anchor>verticalDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>swipeAngle</name>
            <anchorfile>qswipegesture.html</anchorfile>
            <anchor>swipeAngle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwipeAngle</name>
            <anchorfile>qswipegesture.html</anchorfile>
            <anchor>swipeAngle-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTapGesture</name>
        <filename>qtapgesture.html</filename>
        <base>QGesture</base>
        <member kind="property" type="QPointF">
            <name>position</name>
            <anchorfile>qtapgesture.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTapGesture</name>
            <anchorfile>qtapgesture.html</anchorfile>
            <anchor>dtor.QTapGesture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qtapgesture.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtapgesture.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QPointF &amp;pos)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTapAndHoldGesture</name>
        <filename>qtapandholdgesture.html</filename>
        <base>QGesture</base>
        <member kind="property" type="QPointF">
            <name>position</name>
            <anchorfile>qtapandholdgesture.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTapAndHoldGesture</name>
            <anchorfile>qtapandholdgesture.html</anchorfile>
            <anchor>dtor.QTapAndHoldGesture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qtapandholdgesture.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtapandholdgesture.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QPointF &amp;pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qtapandholdgesture.html</anchorfile>
            <anchor>setTimeout</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qtapandholdgesture.html</anchorfile>
            <anchor>timeout</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGestureEvent</name>
        <filename>qgestureevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGestureEvent</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>QGestureEvent</anchor>
            <arglist>(const QList&lt;QGesture *&gt; &amp;gestures)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGestureEvent</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>dtor.QGestureEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGesture *&gt;</type>
            <name>gestures</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>gestures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGesture *</type>
            <name>gesture</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>gesture</anchor>
            <arglist>(Qt::GestureType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGesture *&gt;</type>
            <name>activeGestures</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>activeGestures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGesture *&gt;</type>
            <name>canceledGestures</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>canceledGestures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(QGesture *gesture, bool value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>(QGesture *gesture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>ignore</anchor>
            <arglist>(QGesture *gesture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>(QGesture *gesture) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>setAccepted-2</anchor>
            <arglist>(Qt::GestureType gestureType, bool value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>accept-2</anchor>
            <arglist>(Qt::GestureType gestureType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>ignore-2</anchor>
            <arglist>(Qt::GestureType gestureType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>isAccepted-2</anchor>
            <arglist>(Qt::GestureType gestureType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToGraphicsScene</name>
            <anchorfile>qgestureevent.html</anchorfile>
            <anchor>mapToGraphicsScene</anchor>
            <arglist>(const QPointF &amp;gesturePoint) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGestureRecognizer</name>
        <filename>qgesturerecognizer.html</filename>
        <member kind="enum">
            <name>ResultFlag</name>
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ignore">
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MayBeGesture">
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriggerGesture">
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishGesture">
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CancelGesture">
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResultState_Mask">
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConsumeEventHint">
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResultHint_Mask">
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGestureRecognizer::ResultFlag">
            <name>Result</name>
            <anchorfile>qgesturerecognizer.html</anchorfile>
            <anchor>ResultFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGestureRecognizer</name>
            <anchorfile>qgesturerecognizer.html</anchorfile>
            <anchor>QGestureRecognizer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGestureRecognizer</name>
            <anchorfile>qgesturerecognizer.html</anchorfile>
            <anchor>dtor.QGestureRecognizer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGesture *</type>
            <name>create</name>
            <anchorfile>qgesturerecognizer.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QObject *target)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Result</type>
            <name>recognize</name>
            <anchorfile>qgesturerecognizer.html</anchorfile>
            <anchor>recognize</anchor>
            <arglist>(QGesture *gesture, QObject *watched, QEvent *event) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>reset</name>
            <anchorfile>qgesturerecognizer.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>(QGesture *gesture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::GestureType</type>
            <name>registerRecognizer</name>
            <anchorfile>qgesturerecognizer.html</anchorfile>
            <anchor>registerRecognizer</anchor>
            <arglist>(QGestureRecognizer *recognizer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>unregisterRecognizer</name>
            <anchorfile>qgesturerecognizer.html</anchorfile>
            <anchor>unregisterRecognizer</anchor>
            <arglist>(Qt::GestureType type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGridLayout</name>
        <filename>qgridlayout.html</filename>
        <base>QLayout</base>
        <member kind="property" type="int">
            <name>horizontalSpacing</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>horizontalSpacing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>verticalSpacing</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>verticalSpacing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGridLayout</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>QGridLayout</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGridLayout</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>QGridLayout-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGridLayout</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>dtor.QGridLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSize</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>maximumSize</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalSpacing</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>horizontalSpacing-prop</anchor>
            <arglist>(int spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>horizontalSpacing</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>horizontalSpacing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalSpacing</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>verticalSpacing-prop</anchor>
            <arglist>(int spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verticalSpacing</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>verticalSpacing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>setSpacing</anchor>
            <arglist>(int spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>spacing</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>spacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowStretch</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>setRowStretch</anchor>
            <arglist>(int row, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnStretch</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>setColumnStretch</anchor>
            <arglist>(int column, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowStretch</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>rowStretch</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnStretch</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>columnStretch</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowMinimumHeight</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>setRowMinimumHeight</anchor>
            <arglist>(int row, int minSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnMinimumWidth</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>setColumnMinimumWidth</anchor>
            <arglist>(int column, int minSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowMinimumHeight</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>rowMinimumHeight</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnMinimumWidth</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>columnMinimumWidth</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowCount</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>cellRect</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>cellRect</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>minimumHeightForWidth</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>minimumHeightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::Orientations</type>
            <name>expandingDirections</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>expandingDirections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addWidget</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *widget, int row, int column, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addWidget</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>addWidget-2</anchor>
            <arglist>(QWidget *widget, int fromRow, int fromColumn, int rowSpan, int columnSpan, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addLayout</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>addLayout</anchor>
            <arglist>(QLayout *layout, int row, int column, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addLayout</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>addLayout-2</anchor>
            <arglist>(QLayout *layout, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOriginCorner</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>setOriginCorner</anchor>
            <arglist>(Qt::Corner corner)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Corner</type>
            <name>originCorner</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>originCorner</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLayoutItem *</type>
            <name>itemAtPosition</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>itemAtPosition</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayoutItem *</type>
            <name>takeAt</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QLayoutItem *item, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getItemPosition</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>getItemPosition</anchor>
            <arglist>(int index, int *row, int *column, int *rowSpan, int *columnSpan) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addItem</name>
            <anchorfile>qgridlayout.html</anchorfile>
            <anchor>addItem-2</anchor>
            <arglist>(QLayoutItem *item)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLayout</name>
        <filename>qlayout.html</filename>
        <base>QObject</base>
        <base>QLayoutItem</base>
        <member kind="property" type="int">
            <name>margin</name>
            <anchorfile>qlayout-obsolete.html</anchorfile>
            <anchor>margin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>spacing</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SizeConstraint">
            <name>sizeConstraint</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>sizeConstraint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SizeConstraint</name>
            <anchor>SizeConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SetDefaultConstraint">
            <anchor>SizeConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SetNoConstraint">
            <anchor>SizeConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SetMinimumSize">
            <anchor>SizeConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SetFixedSize">
            <anchor>SizeConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SetMaximumSize">
            <anchor>SizeConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SetMinAndMaxSize">
            <anchor>SizeConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayout</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>QLayout</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayout</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>QLayout-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>margin</name>
            <anchorfile>qlayout-obsolete.html</anchorfile>
            <anchor>margin-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>spacing</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMargin</name>
            <anchorfile>qlayout-obsolete.html</anchorfile>
            <anchor>margin-prop</anchor>
            <arglist>(int margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpacing</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>spacing-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsMargins</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>setContentsMargins</anchor>
            <arglist>(int left, int top, int right, int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsMargins</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>setContentsMargins-2</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getContentsMargins</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>getContentsMargins</anchor>
            <arglist>(int *left, int *top, int *right, int *bottom) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>contentsMargins</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>contentsMargins</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>contentsRect</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>contentsRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setAlignment</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(QWidget *w, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setAlignment</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>setAlignment-2</anchor>
            <arglist>(QLayout *l, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeConstraint</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>sizeConstraint-prop</anchor>
            <arglist>(SizeConstraint )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SizeConstraint</type>
            <name>sizeConstraint</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>sizeConstraint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMenuBar</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>setMenuBar</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>menuBar</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>menuBar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>parentWidget</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>parentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>geometry</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>activate</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>activate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addWidget</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *w)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>addItem</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QLayoutItem *item) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeWidget</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>removeWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItem</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(QLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::Orientations</type>
            <name>expandingDirections</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>expandingDirections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSize</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>maximumSize</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QLayoutItem *</type>
            <name>takeAt</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(int index) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>indexOf</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isEmpty</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSizePolicy::ControlTypes</type>
            <name>controlTypes</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>controlTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLayoutItem *</type>
            <name>replaceWidget</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>replaceWidget</anchor>
            <arglist>(QWidget *from, QWidget *to, Qt::FindChildOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayout *</type>
            <name>layout</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>layout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSize</type>
            <name>closestAcceptableSize</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>closestAcceptableSize</anchor>
            <arglist>(const QWidget *widget, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>childEvent</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>childEvent</anchor>
            <arglist>(QChildEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addChildLayout</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>addChildLayout</anchor>
            <arglist>(QLayout *l)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addChildWidget</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>addChildWidget</anchor>
            <arglist>(QWidget *w)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QRect</type>
            <name>alignmentRect</name>
            <anchorfile>qlayout.html</anchorfile>
            <anchor>alignmentRect</anchor>
            <arglist>(const QRect &amp;r) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLayoutItem</name>
        <filename>qlayoutitem.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayoutItem</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>QLayoutItem</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLayoutItem</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>dtor.QLayoutItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>minimumSize</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>maximumSize</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Qt::Orientations</type>
            <name>expandingDirections</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>expandingDirections</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;r) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRect</type>
            <name>geometry</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isEmpty</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>minimumHeightForWidth</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>minimumHeightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>invalidate</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>widget</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayout *</type>
            <name>layout</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>layout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSpacerItem *</type>
            <name>spacerItem</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>spacerItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSizePolicy::ControlTypes</type>
            <name>controlTypes</name>
            <anchorfile>qlayoutitem.html</anchorfile>
            <anchor>controlTypes</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSpacerItem</name>
        <filename>qspaceritem.html</filename>
        <base>QLayoutItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpacerItem</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>QSpacerItem</anchor>
            <arglist>(int w, int h, QSizePolicy::Policy hPolicy, QSizePolicy::Policy vPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSpacerItem</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>dtor.QSpacerItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>changeSize</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>changeSize</anchor>
            <arglist>(int w, int h, QSizePolicy::Policy hPolicy, QSizePolicy::Policy vPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSize</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>maximumSize</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::Orientations</type>
            <name>expandingDirections</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>expandingDirections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isEmpty</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>geometry</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSpacerItem *</type>
            <name>spacerItem</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>spacerItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizePolicy</type>
            <name>sizePolicy</name>
            <anchorfile>qspaceritem.html</anchorfile>
            <anchor>sizePolicy</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWidgetItem</name>
        <filename>qwidgetitem.html</filename>
        <base>QLayoutItem</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWidgetItem</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>QWidgetItem</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWidgetItem</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>dtor.QWidgetItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSize</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>maximumSize</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::Orientations</type>
            <name>expandingDirections</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>expandingDirections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isEmpty</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>geometry</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>widget</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSizePolicy::ControlTypes</type>
            <name>controlTypes</name>
            <anchorfile>qwidgetitem.html</anchorfile>
            <anchor>controlTypes</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLWidget</name>
        <filename>qopenglwidget.html</filename>
        <base>QWidget</base>
        <member kind="enum">
            <name>UpdateBehavior</name>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoPartialUpdate">
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PartialUpdate">
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLWidget</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>QOpenGLWidget</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLWidget</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>dtor.QOpenGLWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpdateBehavior</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>setUpdateBehavior</anchor>
            <arglist>(UpdateBehavior updateBehavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>UpdateBehavior</type>
            <name>updateBehavior</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>updateBehavior</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>makeCurrent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doneCurrent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>defaultFramebufferObject</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>defaultFramebufferObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabFramebuffer</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>grabFramebuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToCompose</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>aboutToCompose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameSwapped</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>frameSwapped</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToResize</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>aboutToResize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resized</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>resized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializeGL</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>initializeGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeGL</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>resizeGL</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintGL</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>paintGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShortcut</name>
        <filename>qshortcut.html</filename>
        <base>QObject</base>
        <member kind="property" type="QKeySequence">
            <name>key</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>whatsThis</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoRepeat</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ShortcutContext">
            <name>context</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>context-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShortcut</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>QShortcut</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShortcut</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>QShortcut-2</anchor>
            <arglist>(const QKeySequence &amp;key, QWidget *parent, const char *member, const char *ambiguousMember, Qt::ShortcutContext context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QShortcut</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>dtor.QShortcut</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKey</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist>(const QKeySequence &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeySequence</type>
            <name>key</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContext</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>context-prop</anchor>
            <arglist>(Qt::ShortcutContext context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ShortcutContext</type>
            <name>context</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>context-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhatsThis</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>whatsThis</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRepeat</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRepeat</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>id</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>parentWidget</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>parentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activatedAmbiguously</name>
            <anchorfile>qshortcut.html</anchorfile>
            <anchor>activatedAmbiguously</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSizePolicy</name>
        <filename>qsizepolicy.html</filename>
        <member kind="enum">
            <name>PolicyFlag</name>
            <anchor>PolicyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GrowFlag">
            <anchor>PolicyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExpandFlag">
            <anchor>PolicyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShrinkFlag">
            <anchor>PolicyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IgnoreFlag">
            <anchor>PolicyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Policy</name>
            <anchor>Policy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fixed">
            <anchor>Policy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Minimum">
            <anchor>Policy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Maximum">
            <anchor>Policy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Preferred">
            <anchor>Policy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinimumExpanding">
            <anchor>Policy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Expanding">
            <anchor>Policy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ignored">
            <anchor>Policy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ControlType</name>
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultType">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ButtonBox">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CheckBox">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComboBox">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Frame">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GroupBox">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Label">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Line">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineEdit">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PushButton">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RadioButton">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Slider">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SpinBox">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabWidget">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolButton">
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSizePolicy::ControlType">
            <name>ControlTypes</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>ControlType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizePolicy</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>QSizePolicy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizePolicy</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>QSizePolicy-2</anchor>
            <arglist>(Policy horizontal, Policy vertical, ControlType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Policy</type>
            <name>horizontalPolicy</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>horizontalPolicy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Policy</type>
            <name>verticalPolicy</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>verticalPolicy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ControlType</type>
            <name>controlType</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>controlType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalPolicy</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>setHorizontalPolicy</anchor>
            <arglist>(Policy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalPolicy</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>setVerticalPolicy</anchor>
            <arglist>(Policy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setControlType</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>setControlType</anchor>
            <arglist>(ControlType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientations</type>
            <name>expandingDirections</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>expandingDirections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeightForWidth</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>setHeightForWidth</anchor>
            <arglist>(bool dependent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidthForHeight</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>setWidthForHeight</anchor>
            <arglist>(bool dependent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasWidthForHeight</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>hasWidthForHeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSizePolicy &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSizePolicy &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>horizontalStretch</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>horizontalStretch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verticalStretch</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>verticalStretch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalStretch</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>setHorizontalStretch</anchor>
            <arglist>(int stretchFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalStretch</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>setVerticalStretch</anchor>
            <arglist>(int stretchFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>retainSizeWhenHidden</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>retainSizeWhenHidden</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRetainSizeWhenHidden</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>setRetainSizeWhenHidden</anchor>
            <arglist>(bool retainSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>transpose</name>
            <anchorfile>qsizepolicy.html</anchorfile>
            <anchor>transpose</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStackedLayout</name>
        <filename>qstackedlayout.html</filename>
        <base>QLayout</base>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StackingMode">
            <name>stackingMode</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>stackingMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StackingMode</name>
            <anchor>StackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StackOne">
            <anchor>StackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StackAll">
            <anchor>StackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStackedLayout</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>QStackedLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStackedLayout</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>QStackedLayout-2</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStackedLayout</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>QStackedLayout-3</anchor>
            <arglist>(QLayout *parentLayout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStackedLayout</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>dtor.QStackedLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addWidget</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertWidget</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>insertWidget</anchor>
            <arglist>(int index, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>currentWidget</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>currentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StackingMode</type>
            <name>stackingMode</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>stackingMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStackingMode</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>stackingMode-prop</anchor>
            <arglist>(StackingMode stackingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addItem</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QLayoutItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSize</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayoutItem *</type>
            <name>itemAt</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLayoutItem *</type>
            <name>takeAt</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setGeometry</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int width) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widgetRemoved</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>widgetRemoved</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentChanged</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentWidget</name>
            <anchorfile>qstackedlayout.html</anchorfile>
            <anchor>setCurrentWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QToolTip</name>
        <filename>qtooltip.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>showText</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>showText-3</anchor>
            <arglist>(const QPoint &amp;pos, const QString &amp;text, QWidget *w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>showText</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>showText</anchor>
            <arglist>(const QPoint &amp;pos, const QString &amp;text, QWidget *w, const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>showText</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>showText-2</anchor>
            <arglist>(const QPoint &amp;pos, const QString &amp;text, QWidget *w, const QRect &amp;rect, int msecDisplayTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>hideText</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>hideText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>isVisible</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>text</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPalette</type>
            <name>palette</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>palette</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPalette</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>setPalette</anchor>
            <arglist>(const QPalette &amp;palette)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>font</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qtooltip.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWhatsThis</name>
        <filename>qwhatsthis.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>enterWhatsThisMode</name>
            <anchorfile>qwhatsthis.html</anchorfile>
            <anchor>enterWhatsThisMode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>inWhatsThisMode</name>
            <anchorfile>qwhatsthis.html</anchorfile>
            <anchor>inWhatsThisMode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>leaveWhatsThisMode</name>
            <anchorfile>qwhatsthis.html</anchorfile>
            <anchor>leaveWhatsThisMode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>showText</name>
            <anchorfile>qwhatsthis.html</anchorfile>
            <anchor>showText</anchor>
            <arglist>(const QPoint &amp;pos, const QString &amp;text, QWidget *w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>hideText</name>
            <anchorfile>qwhatsthis.html</anchorfile>
            <anchor>hideText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAction *</type>
            <name>createAction</name>
            <anchorfile>qwhatsthis.html</anchorfile>
            <anchor>createAction</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWidget</name>
        <filename>qwidget.html</filename>
        <base>QObject</base>
        <base>QPaintDevice</base>
        <member kind="property" type="bool">
            <name>modal</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>modal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::WindowModality">
            <name>windowModality</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowModality-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>geometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>frameGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>frameGeometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>normalGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>normalGeometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPoint">
            <name>pos</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>pos-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>frameSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>frameSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>size</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>rect</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>rect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>childrenRect</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>childrenRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRegion">
            <name>childrenRegion</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>childrenRegion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizePolicy">
            <name>sizePolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizePolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>minimumSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>maximumSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumHeight</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumHeight</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>sizeIncrement</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizeIncrement-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>baseSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>baseSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPalette">
            <name>palette</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QCursor">
            <name>cursor</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>cursor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mouseTracking</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mouseTracking-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isActiveWindow</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>isActiveWindow-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::FocusPolicy">
            <name>focusPolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>focus</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ContextMenuPolicy">
            <name>contextMenuPolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>contextMenuPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>updatesEnabled</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>updatesEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>minimized</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimized-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>maximized</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximized-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>fullScreen</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>fullScreen-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>sizeHint</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizeHint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>minimumSizeHint</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumSizeHint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>acceptDrops</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>acceptDrops-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>windowTitle</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowTitle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QIcon">
            <name>windowIcon</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>windowIconText</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowIconText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>windowOpacity</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowOpacity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>windowModified</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowModified-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>toolTip</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>toolTipDuration</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>toolTipDuration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>statusTip</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>statusTip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>whatsThis</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>accessibleName</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>accessibleName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>accessibleDescription</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>accessibleDescription-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::LayoutDirection">
            <name>layoutDirection</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::WindowFlags">
            <name>windowFlags</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoFillBackground</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>autoFillBackground-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>styleSheet</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>styleSheet-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QLocale">
            <name>locale</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>windowFilePath</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowFilePath-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::InputMethodHints">
            <name>inputMethodHints</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>inputMethodHints-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RenderFlag</name>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DrawWindowBackground">
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DrawChildren">
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IgnoreMask">
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QWidget::RenderFlag">
            <name>RenderFlags</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWidget</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>QWidget</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWidget</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>dtor.QWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WId</type>
            <name>winId</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>winId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WId</type>
            <name>effectiveWinId</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>effectiveWinId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStyle *</type>
            <name>style</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(QStyle *style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTopLevel</name>
            <anchorfile>qwidget-obsolete.html</anchorfile>
            <anchor>isTopLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWindow</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>isWindow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isModal</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>modal-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowModality</type>
            <name>windowModality</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowModality-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowModality</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowModality-prop</anchor>
            <arglist>(Qt::WindowModality windowModality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabledTo</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>isEnabledTo</anchor>
            <arglist>(const QWidget *ancestor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabledToTLW</name>
            <anchorfile>qwidget-obsolete.html</anchorfile>
            <anchor>isEnabledToTLW</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDisabled</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setDisabled</anchor>
            <arglist>(bool disable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowModified</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowModified-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>frameGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>frameGeometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect &amp;</type>
            <name>geometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>normalGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>normalGeometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>pos-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>frameSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>frameSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>rect</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>rect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>childrenRect</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>childrenRect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>childrenRegion</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>childrenRegion-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>minimumSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>maximumSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumHeight</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumHeight</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumSize-prop</anchor>
            <arglist>(const QSize &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumSize-prop</anchor>
            <arglist>(int minw, int minh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumSize-prop</anchor>
            <arglist>(const QSize &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumSize-prop</anchor>
            <arglist>(int maxw, int maxh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist>(int minw)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumHeight</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist>(int minh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist>(int maxw)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumHeight</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist>(int maxh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setupUi</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setupUi</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeIncrement</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizeIncrement-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeIncrement</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizeIncrement-prop</anchor>
            <arglist>(const QSize &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeIncrement</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizeIncrement-prop</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>baseSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>baseSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>baseSize-prop</anchor>
            <arglist>(const QSize &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>baseSize-prop</anchor>
            <arglist>(int basew, int baseh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFixedSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setFixedSize</anchor>
            <arglist>(const QSize &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFixedSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setFixedSize-2</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFixedWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setFixedWidth</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFixedHeight</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setFixedHeight</anchor>
            <arglist>(int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapToGlobal</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mapToGlobal</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapFromGlobal</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mapFromGlobal</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapToParent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mapToParent</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapFromParent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mapFromParent</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapTo</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mapTo</anchor>
            <arglist>(const QWidget *parent, const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapFrom</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mapFrom</anchor>
            <arglist>(const QWidget *parent, const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>window</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>nativeParentWidget</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>nativeParentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>topLevelWidget</name>
            <anchorfile>qwidget-obsolete.html</anchorfile>
            <anchor>topLevelWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPalette &amp;</type>
            <name>palette</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPalette</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>palette-prop</anchor>
            <arglist>(const QPalette &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundRole</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setBackgroundRole</anchor>
            <arglist>(QPalette::ColorRole role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette::ColorRole</type>
            <name>backgroundRole</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>backgroundRole</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForegroundRole</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setForegroundRole</anchor>
            <arglist>(QPalette::ColorRole role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette::ColorRole</type>
            <name>foregroundRole</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>foregroundRole</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QFont &amp;</type>
            <name>font</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetrics</type>
            <name>fontMetrics</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>fontMetrics</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontInfo</type>
            <name>fontInfo</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>fontInfo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor</type>
            <name>cursor</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>cursor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursor</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>cursor-prop</anchor>
            <arglist>(const QCursor &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetCursor</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>cursor-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMouseTracking</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mouseTracking-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasMouseTracking</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mouseTracking-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>underMouse</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>underMouse</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMask</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setMask</anchor>
            <arglist>(const QBitmap &amp;bitmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMask</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setMask-2</anchor>
            <arglist>(const QRegion &amp;region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>mask</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mask</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMask</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>clearMask</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>render</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>render</anchor>
            <arglist>(QPaintDevice *target, const QPoint &amp;targetOffset, const QRegion &amp;sourceRegion, RenderFlags renderFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>render</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>render-2</anchor>
            <arglist>(QPainter *painter, const QPoint &amp;targetOffset, const QRegion &amp;sourceRegion, RenderFlags renderFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>grab</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>grab</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsEffect *</type>
            <name>graphicsEffect</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>graphicsEffect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGraphicsEffect</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setGraphicsEffect</anchor>
            <arglist>(QGraphicsEffect *effect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabGesture</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>grabGesture</anchor>
            <arglist>(Qt::GestureType gesture, Qt::GestureFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungrabGesture</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>ungrabGesture</anchor>
            <arglist>(Qt::GestureType gesture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowTitle</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowTitle-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyleSheet</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>styleSheet-prop</anchor>
            <arglist>(const QString &amp;styleSheet)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleSheet</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>styleSheet-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>windowTitle</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowTitle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowIcon</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>windowIcon</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowIconText</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowIconText-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>windowIconText</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowIconText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowRole</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setWindowRole</anchor>
            <arglist>(const QString &amp;role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>windowRole</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowRole</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowFilePath</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowFilePath-prop</anchor>
            <arglist>(const QString &amp;filePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>windowFilePath</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowFilePath-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowOpacity</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowOpacity-prop</anchor>
            <arglist>(qreal level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>windowOpacity</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowOpacity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWindowModified</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowModified-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTipDuration</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>toolTipDuration-prop</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toolTipDuration</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>toolTipDuration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatusTip</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>statusTip-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>statusTip</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>statusTip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhatsThis</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>whatsThis</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>whatsThis-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>accessibleName</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>accessibleName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessibleName</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>accessibleName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>accessibleDescription</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>accessibleDescription-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessibleDescription</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>accessibleDescription-prop</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayoutDirection</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>layoutDirection</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetLayoutDirection</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetLocale</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setFocus-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActiveWindow</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>isActiveWindow-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activateWindow</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>activateWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearFocus</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>clearFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setFocus</anchor>
            <arglist>(Qt::FocusReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::FocusPolicy</type>
            <name>focusPolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocusPolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusPolicy-prop</anchor>
            <arglist>(Qt::FocusPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFocus</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setTabOrder</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setTabOrder</anchor>
            <arglist>(QWidget *first, QWidget *second)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocusProxy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setFocusProxy</anchor>
            <arglist>(QWidget *w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>focusProxy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusProxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ContextMenuPolicy</type>
            <name>contextMenuPolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>contextMenuPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContextMenuPolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>contextMenuPolicy-prop</anchor>
            <arglist>(Qt::ContextMenuPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabMouse</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>grabMouse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabMouse</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>grabMouse-2</anchor>
            <arglist>(const QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseMouse</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>releaseMouse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabKeyboard</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>grabKeyboard</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseKeyboard</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>releaseKeyboard</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>grabShortcut</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>grabShortcut</anchor>
            <arglist>(const QKeySequence &amp;key, Qt::ShortcutContext context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseShortcut</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>releaseShortcut</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcutEnabled</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setShortcutEnabled</anchor>
            <arglist>(int id, bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcutAutoRepeat</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setShortcutAutoRepeat</anchor>
            <arglist>(int id, bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>mouseGrabber</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mouseGrabber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>keyboardGrabber</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>keyboardGrabber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>updatesEnabled</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>updatesEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpdatesEnabled</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>updatesEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGraphicsProxyWidget *</type>
            <name>graphicsProxyWidget</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>graphicsProxyWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>repaint</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>repaint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>update-2</anchor>
            <arglist>(int x, int y, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>update-3</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>update-4</anchor>
            <arglist>(const QRegion &amp;rgn)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>repaint</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>repaint-2</anchor>
            <arglist>(int x, int y, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>repaint</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>repaint-3</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>repaint</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>repaint-4</anchor>
            <arglist>(const QRegion &amp;rgn)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHidden</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setHidden</anchor>
            <arglist>(bool hidden)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>show</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>show</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hide</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>hide</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMinimized</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>showMinimized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMaximized</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>showMaximized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showFullScreen</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>showFullScreen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showNormal</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>showNormal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>close</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>raise</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>raise</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lower</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>lower</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stackUnder</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>stackUnder</anchor>
            <arglist>(QWidget *w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>move</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>pos-prop</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>move</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>pos-prop</anchor>
            <arglist>(const QPoint &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>(const QSize &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(int x, int y, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(const QRect &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>saveGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>saveGeometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>restoreGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>restoreGeometry</anchor>
            <arglist>(const QByteArray &amp;geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjustSize</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>adjustSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisibleTo</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>isVisibleTo</anchor>
            <arglist>(const QWidget *ancestor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHidden</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>isHidden</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMinimized</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimized-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMaximized</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>maximized-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFullScreen</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>fullScreen-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowStates</type>
            <name>windowState</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowState</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setWindowState</anchor>
            <arglist>(Qt::WindowStates windowState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizeHint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>minimumSizeHint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizePolicy</type>
            <name>sizePolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizePolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizePolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizePolicy-prop</anchor>
            <arglist>(QSizePolicy )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizePolicy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>sizePolicy-prop</anchor>
            <arglist>(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>visibleRegion</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>visibleRegion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsMargins</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setContentsMargins</anchor>
            <arglist>(int left, int top, int right, int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsMargins</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setContentsMargins-2</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getContentsMargins</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>getContentsMargins</anchor>
            <arglist>(int *left, int *top, int *right, int *bottom) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>contentsMargins</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>contentsMargins</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>contentsRect</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>contentsRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLayout *</type>
            <name>layout</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>layout</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayout</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setLayout</anchor>
            <arglist>(QLayout *layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateGeometry</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>updateGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setParent</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setParent-2</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scroll</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>scroll</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scroll</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>scroll-2</anchor>
            <arglist>(int dx, int dy, const QRect &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>focusWidget</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>nextInFocusChain</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>nextInFocusChain</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>previousInFocusChain</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>previousInFocusChain</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptDrops</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>acceptDrops-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptDrops</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>acceptDrops-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAction</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addActions</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>addActions</anchor>
            <arglist>(const QList&lt;QAction *&gt; &amp;actions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAction</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>insertAction</anchor>
            <arglist>(QAction *before, QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertActions</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>insertActions</anchor>
            <arglist>(QAction *before, QList&lt;QAction *&gt; actions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAction</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>removeAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAction *&gt;</type>
            <name>actions</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>actions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>parentWidget</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>parentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowFlags</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowFlags-prop</anchor>
            <arglist>(Qt::WindowFlags type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowFlags</type>
            <name>windowFlags</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>overrideWindowFlags</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>overrideWindowFlags</anchor>
            <arglist>(Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowType</type>
            <name>windowType</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>find</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(WId id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>childAt</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>childAt</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>childAt</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>childAt-2</anchor>
            <arglist>(const QPoint &amp;p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(Qt::WidgetAttribute attribute, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAttribute</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>testAttribute</anchor>
            <arglist>(Qt::WidgetAttribute attribute) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensurePolished</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>ensurePolished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAncestorOf</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>isAncestorOf</anchor>
            <arglist>(const QWidget *child) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasEditFocus</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>hasEditFocus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEditFocus</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>setEditFocus</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoFillBackground</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>autoFillBackground-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoFillBackground</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>autoFillBackground-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackingStore *</type>
            <name>backingStore</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>backingStore</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>windowHandle</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowHandle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWidget *</type>
            <name>createWindowContainer</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>createWindowContainer</anchor>
            <arglist>(QWindow *window, QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowTitleChanged</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowTitle-prop</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowIconChanged</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowIconTextChanged</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>windowIconText-prop</anchor>
            <arglist>(const QString &amp;iconText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>customContextMenuRequested</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>customContextMenuRequested</anchor>
            <arglist>(const QPoint &amp;pos)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>enterEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>enterEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>leaveEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>leaveEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>moveEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>moveEvent</anchor>
            <arglist>(QMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>closeEvent</anchor>
            <arglist>(QCloseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabletEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>tabletEvent</anchor>
            <arglist>(QTabletEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>actionEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>actionEvent</anchor>
            <arglist>(QActionEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>nativeEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>nativeEvent</anchor>
            <arglist>(const QByteArray &amp;eventType, void *message, long *result)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(PaintDeviceMetric m) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initPainter</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>initPainter</anchor>
            <arglist>(QPainter *painter) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::InputMethodHints</type>
            <name>inputMethodHints</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>inputMethodHints-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputMethodHints</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>inputMethodHints-prop</anchor>
            <arglist>(Qt::InputMethodHints hints)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>updateMicroFocus</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>updateMicroFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>create</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(WId window, bool initializeWindow, bool destroyOldWindow)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(bool destroyWindow, bool destroySubWindows)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>focusNextChild</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusNextChild</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>focusPreviousChild</name>
            <anchorfile>qwidget.html</anchorfile>
            <anchor>focusPreviousChild</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWidgetAction</name>
        <filename>qwidgetaction.html</filename>
        <base>QAction</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWidgetAction</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>QWidgetAction</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QWidgetAction</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>dtor.QWidgetAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultWidget</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>setDefaultWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>defaultWidget</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>defaultWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>requestWidget</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>requestWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseWidget</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>releaseWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *obj, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QWidget *</type>
            <name>createWidget</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>createWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>deleteWidget</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>deleteWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QList&lt;QWidget *&gt;</type>
            <name>createdWidgets</name>
            <anchorfile>qwidgetaction.html</anchorfile>
            <anchor>createdWidgets</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QKeyEventTransition</name>
        <filename>qkeyeventtransition.html</filename>
        <base>QEventTransition</base>
        <member kind="property" type="int">
            <name>key</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::KeyboardModifiers">
            <name>modifierMask</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>modifierMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEventTransition</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>QKeyEventTransition</anchor>
            <arglist>(QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEventTransition</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>QKeyEventTransition-2</anchor>
            <arglist>(QObject *object, QEvent::Type type, int key, QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QKeyEventTransition</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>dtor.QKeyEventTransition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKey</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist>(int key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifierMask</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>modifierMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModifierMask</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>modifierMask-prop</anchor>
            <arglist>(Qt::KeyboardModifiers modifierMask)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onTransition</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>onTransition</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventTest</name>
            <anchorfile>qkeyeventtransition.html</anchorfile>
            <anchor>eventTest</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMouseEventTransition</name>
        <filename>qmouseeventtransition.html</filename>
        <base>QEventTransition</base>
        <member kind="property" type="Qt::MouseButton">
            <name>button</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::KeyboardModifiers">
            <name>modifierMask</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>modifierMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEventTransition</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>QMouseEventTransition</anchor>
            <arglist>(QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEventTransition</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>QMouseEventTransition-2</anchor>
            <arglist>(QObject *object, QEvent::Type type, Qt::MouseButton button, QState *sourceState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMouseEventTransition</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>dtor.QMouseEventTransition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButton</type>
            <name>button</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButton</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist>(Qt::MouseButton button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifierMask</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>modifierMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModifierMask</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>modifierMask-prop</anchor>
            <arglist>(Qt::KeyboardModifiers modifierMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>hitTestPath</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>hitTestPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHitTestPath</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>setHitTestPath</anchor>
            <arglist>(const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>onTransition</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>onTransition</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventTest</name>
            <anchorfile>qmouseeventtransition.html</anchorfile>
            <anchor>eventTest</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCommonStyle</name>
        <filename>qcommonstyle.html</filename>
        <base>QStyle</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommonStyle</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>QCommonStyle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCommonStyle</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>dtor.QCommonStyle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPrimitive</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>drawPrimitive</anchor>
            <arglist>(PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawControl</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>drawControl</anchor>
            <arglist>(ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>subElementRect</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>subElementRect</anchor>
            <arglist>(SubElement sr, const QStyleOption *opt, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawComplexControl</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>drawComplexControl</anchor>
            <arglist>(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual SubControl</type>
            <name>hitTestComplexControl</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>hitTestComplexControl</anchor>
            <arglist>(ComplexControl cc, const QStyleOptionComplex *opt, const QPoint &amp;pt, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>subControlRect</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>subControlRect</anchor>
            <arglist>(ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeFromContents</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>sizeFromContents</anchor>
            <arglist>(ContentsType ct, const QStyleOption *opt, const QSize &amp;csz, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>pixelMetric</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>pixelMetric</anchor>
            <arglist>(PixelMetric m, const QStyleOption *opt, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>styleHint</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>styleHint</anchor>
            <arglist>(StyleHint sh, const QStyleOption *opt, const QWidget *widget, QStyleHintReturn *hret) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPixmap</type>
            <name>standardPixmap</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>standardPixmap</anchor>
            <arglist>(StandardPixmap sp, const QStyleOption *option, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPixmap</type>
            <name>generatedIconPixmap</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>generatedIconPixmap</anchor>
            <arglist>(QIcon::Mode iconMode, const QPixmap &amp;pixmap, const QStyleOption *opt) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>layoutSpacing</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>layoutSpacing</anchor>
            <arglist>(QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation, const QStyleOption *option, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>polish</anchor>
            <arglist>(QPalette &amp;pal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>polish-2</anchor>
            <arglist>(QApplication *app)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>polish-3</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>unpolish</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>unpolish</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>unpolish</name>
            <anchorfile>qcommonstyle.html</anchorfile>
            <anchor>unpolish-2</anchor>
            <arglist>(QApplication *application)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTileRules</name>
        <filename>qtilerules.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTileRules</name>
            <anchorfile>qtilerules.html</anchorfile>
            <anchor>QTileRules</anchor>
            <arglist>(Qt::TileRule horizontalRule, Qt::TileRule verticalRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTileRules</name>
            <anchorfile>qtilerules.html</anchorfile>
            <anchor>QTileRules-2</anchor>
            <arglist>(Qt::TileRule rule)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProxyStyle</name>
        <filename>qproxystyle.html</filename>
        <base>QCommonStyle</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProxyStyle</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>QProxyStyle</anchor>
            <arglist>(QStyle *style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProxyStyle</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>QProxyStyle-2</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QProxyStyle</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>dtor.QProxyStyle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStyle *</type>
            <name>baseStyle</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>baseStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseStyle</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>setBaseStyle</anchor>
            <arglist>(QStyle *style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPrimitive</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>drawPrimitive</anchor>
            <arglist>(PrimitiveElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawControl</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>drawControl</anchor>
            <arglist>(ControlElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawComplexControl</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>drawComplexControl</anchor>
            <arglist>(ComplexControl control, const QStyleOptionComplex *option, QPainter *painter, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawItemText</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>drawItemText</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rect, int flags, const QPalette &amp;pal, bool enabled, const QString &amp;text, QPalette::ColorRole textRole) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawItemPixmap</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>drawItemPixmap</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rect, int alignment, const QPixmap &amp;pixmap) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeFromContents</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>sizeFromContents</anchor>
            <arglist>(ContentsType type, const QStyleOption *option, const QSize &amp;size, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>subElementRect</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>subElementRect</anchor>
            <arglist>(SubElement element, const QStyleOption *option, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>subControlRect</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>subControlRect</anchor>
            <arglist>(ComplexControl cc, const QStyleOptionComplex *option, SubControl sc, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>itemTextRect</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>itemTextRect</anchor>
            <arglist>(const QFontMetrics &amp;fm, const QRect &amp;r, int flags, bool enabled, const QString &amp;text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>itemPixmapRect</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>itemPixmapRect</anchor>
            <arglist>(const QRect &amp;r, int flags, const QPixmap &amp;pixmap) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual SubControl</type>
            <name>hitTestComplexControl</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>hitTestComplexControl</anchor>
            <arglist>(ComplexControl control, const QStyleOptionComplex *option, const QPoint &amp;pos, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>styleHint</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>styleHint</anchor>
            <arglist>(StyleHint hint, const QStyleOption *option, const QWidget *widget, QStyleHintReturn *returnData) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>pixelMetric</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>pixelMetric</anchor>
            <arglist>(PixelMetric metric, const QStyleOption *option, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>layoutSpacing</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>layoutSpacing</anchor>
            <arglist>(QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation, const QStyleOption *option, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QIcon</type>
            <name>standardIcon</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>standardIcon</anchor>
            <arglist>(StandardPixmap standardIcon, const QStyleOption *option, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPixmap</type>
            <name>standardPixmap</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>standardPixmap</anchor>
            <arglist>(StandardPixmap standardPixmap, const QStyleOption *opt, const QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPixmap</type>
            <name>generatedIconPixmap</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>generatedIconPixmap</anchor>
            <arglist>(QIcon::Mode iconMode, const QPixmap &amp;pixmap, const QStyleOption *opt) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPalette</type>
            <name>standardPalette</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>standardPalette</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>polish</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>polish-2</anchor>
            <arglist>(QPalette &amp;pal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>polish-3</anchor>
            <arglist>(QApplication *app)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>unpolish</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>unpolish</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>unpolish</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>unpolish-2</anchor>
            <arglist>(QApplication *app)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qproxystyle.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyle</name>
        <filename>qstyle.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyle</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>QStyle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QStyle</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>dtor.QStyle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>polish</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>unpolish</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>unpolish</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>polish-2</anchor>
            <arglist>(QApplication *application)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>unpolish</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>unpolish-2</anchor>
            <arglist>(QApplication *application)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>polish</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>polish-3</anchor>
            <arglist>(QPalette &amp;palette)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>itemTextRect</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>itemTextRect</anchor>
            <arglist>(const QFontMetrics &amp;metrics, const QRect &amp;rectangle, int alignment, bool enabled, const QString &amp;text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>itemPixmapRect</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>itemPixmapRect</anchor>
            <arglist>(const QRect &amp;rectangle, int alignment, const QPixmap &amp;pixmap) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawItemText</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>drawItemText</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rectangle, int alignment, const QPalette &amp;palette, bool enabled, const QString &amp;text, QPalette::ColorRole textRole) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawItemPixmap</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>drawItemPixmap</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rectangle, int alignment, const QPixmap &amp;pixmap) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPalette</type>
            <name>standardPalette</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>standardPalette</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>StateFlag</name>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_None">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Enabled">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Raised">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Sunken">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Off">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_NoChange">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_On">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_DownArrow">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Horizontal">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_HasFocus">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Top">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Bottom">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_FocusAtBorder">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_AutoRaise">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_MouseOver">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_UpArrow">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Selected">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Active">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Window">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Open">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Children">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Item">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Sibling">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Editing">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_KeyboardFocusChange">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_HasEditFocus">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_ReadOnly">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Small">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State_Mini">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyle::StateFlag">
            <name>State</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PrimitiveElement</name>
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_Frame">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameDefaultButton">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameDockWidget">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameFocusRect">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameGroupBox">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameLineEdit">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameMenu">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameStatusBar">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameStatusBarItem">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameTabWidget">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameWindow">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameButtonBevel">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameButtonTool">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_FrameTabBarBase">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelButtonCommand">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelButtonBevel">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelButtonTool">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelMenuBar">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelToolBar">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelLineEdit">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorArrowDown">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorArrowLeft">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorArrowRight">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorArrowUp">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorBranch">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorButtonDropDown">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorViewItemCheck">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorItemViewItemCheck">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorCheckBox">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorDockWidgetResizeHandle">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorHeaderArrow">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorMenuCheckMark">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorProgressChunk">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorRadioButton">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorSpinDown">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorSpinMinus">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorSpinPlus">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorSpinUp">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorToolBarHandle">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorToolBarSeparator">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelTipLabel">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorTabTear">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelScrollAreaCorner">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_Widget">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorColumnViewArrow">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorItemViewItemDrop">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelItemViewItem">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelItemViewRow">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelStatusBar">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_IndicatorTabClose">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_PanelMenu">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PE_CustomBase">
            <anchor>PrimitiveElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>drawPrimitive</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>drawPrimitive</anchor>
            <arglist>(PrimitiveElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="enum">
            <name>ControlElement</name>
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_PushButton">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_PushButtonBevel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_PushButtonLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_CheckBox">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_CheckBoxLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_RadioButton">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_RadioButtonLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_TabBarTab">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_TabBarTabShape">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_TabBarTabLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ProgressBar">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ProgressBarGroove">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ProgressBarContents">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ProgressBarLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_MenuItem">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_MenuScroller">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_MenuVMargin">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_MenuHMargin">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_MenuTearoff">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_MenuEmptyArea">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_MenuBarItem">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_MenuBarEmptyArea">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ToolButtonLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_Header">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_HeaderSection">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_HeaderLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ToolBoxTab">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_SizeGrip">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_Splitter">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_RubberBand">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_DockWidgetTitle">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ScrollBarAddLine">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ScrollBarSubLine">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ScrollBarAddPage">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ScrollBarSubPage">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ScrollBarSlider">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ScrollBarFirst">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ScrollBarLast">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_FocusFrame">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ComboBoxLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ToolBar">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ToolBoxTabShape">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ToolBoxTabLabel">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_HeaderEmptyArea">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ColumnViewGrip">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ItemViewItem">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_ShapedFrame">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CE_CustomBase">
            <anchor>ControlElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>drawControl</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>drawControl</anchor>
            <arglist>(ControlElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="enum">
            <name>SubElement</name>
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_PushButtonContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_PushButtonFocusRect">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_CheckBoxIndicator">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_CheckBoxContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_CheckBoxFocusRect">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_CheckBoxClickRect">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_RadioButtonIndicator">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_RadioButtonContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_RadioButtonFocusRect">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_RadioButtonClickRect">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ComboBoxFocusRect">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_SliderFocusRect">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ProgressBarGroove">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ProgressBarContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ProgressBarLabel">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ToolBoxTabContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_HeaderLabel">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_HeaderArrow">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabWidgetTabBar">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabWidgetTabPane">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabWidgetTabContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabWidgetLeftCorner">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabWidgetRightCorner">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ViewItemCheckIndicator">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ItemViewItemCheckIndicator">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabBarTearIndicator">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TreeViewDisclosureItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_LineEditContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_FrameContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_DockWidgetCloseButton">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_DockWidgetFloatButton">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_DockWidgetTitleBarText">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_DockWidgetIcon">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_CheckBoxLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ComboBoxLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_DateTimeEditLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_DialogButtonBoxLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_LabelLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ProgressBarLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_PushButtonLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_RadioButtonLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_SliderLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_SpinBoxLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ToolButtonLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_FrameLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_GroupBoxLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabWidgetLayoutItem">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ItemViewItemDecoration">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ItemViewItemText">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ItemViewItemFocusRect">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabBarTabLeftButton">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabBarTabRightButton">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_TabBarTabText">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ShapedFrameContents">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_ToolBarHandle">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SE_CustomBase">
            <anchor>SubElement-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRect</type>
            <name>subElementRect</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>subElementRect</anchor>
            <arglist>(SubElement element, const QStyleOption *option, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="enum">
            <name>ComplexControl</name>
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_SpinBox">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_ComboBox">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_ScrollBar">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_Slider">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_ToolButton">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_TitleBar">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_Dial">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_GroupBox">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_MdiControls">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CC_CustomBase">
            <anchor>ComplexControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SubControl</name>
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_None">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ScrollBarAddLine">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ScrollBarSubLine">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ScrollBarAddPage">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ScrollBarSubPage">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ScrollBarFirst">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ScrollBarLast">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ScrollBarSlider">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ScrollBarGroove">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_SpinBoxUp">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_SpinBoxDown">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_SpinBoxFrame">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_SpinBoxEditField">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ComboBoxFrame">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ComboBoxEditField">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ComboBoxArrow">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ComboBoxListBoxPopup">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_SliderGroove">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_SliderHandle">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_SliderTickmarks">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ToolButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_ToolButtonMenu">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarSysMenu">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarMinButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarMaxButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarCloseButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarNormalButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarShadeButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarUnshadeButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarContextHelpButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_TitleBarLabel">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_DialGroove">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_DialHandle">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_DialTickmarks">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_GroupBoxCheckBox">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_GroupBoxLabel">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_GroupBoxContents">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_GroupBoxFrame">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_MdiMinButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_MdiNormalButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_MdiCloseButton">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_CustomBase">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SC_All">
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyle::SubControl">
            <name>SubControls</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>SubControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>drawComplexControl</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>drawComplexControl</anchor>
            <arglist>(ComplexControl control, const QStyleOptionComplex *option, QPainter *painter, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual SubControl</type>
            <name>hitTestComplexControl</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>hitTestComplexControl</anchor>
            <arglist>(ComplexControl control, const QStyleOptionComplex *option, const QPoint &amp;position, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRect</type>
            <name>subControlRect</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>subControlRect</anchor>
            <arglist>(ComplexControl control, const QStyleOptionComplex *option, SubControl subControl, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="enum">
            <name>PixelMetric</name>
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ButtonMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ButtonDefaultIndicator">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuButtonIndicator">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ButtonShiftHorizontal">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ButtonShiftVertical">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DefaultFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SpinBoxFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ComboBoxFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MaximumDragDistance">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ScrollBarExtent">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ScrollBarSliderMin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SliderThickness">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SliderControlThickness">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SliderLength">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SliderTickmarkOffset">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SliderSpaceAvailable">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DockWidgetSeparatorExtent">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DockWidgetHandleExtent">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DockWidgetFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarTabOverlap">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarTabHSpace">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarTabVSpace">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarBaseHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarBaseOverlap">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ProgressBarChunkWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SplitterWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TitleBarHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuScrollerHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuHMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuVMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuPanelWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuTearoffHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuDesktopFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuBarPanelWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuBarItemSpacing">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuBarVMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MenuBarHMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_IndicatorWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_IndicatorHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ExclusiveIndicatorWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ExclusiveIndicatorHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DialogButtonsSeparator">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DialogButtonsButtonWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DialogButtonsButtonHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MdiSubWindowFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MDIFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MdiSubWindowMinimizedWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MDIMinimizedWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_HeaderMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_HeaderMarkSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_HeaderGripMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarTabShiftHorizontal">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarTabShiftVertical">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarScrollButtonWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ToolBarFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ToolBarHandleExtent">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ToolBarItemSpacing">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ToolBarItemMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ToolBarSeparatorExtent">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ToolBarExtensionExtent">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SpinBoxSliderHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DefaultTopLevelMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DefaultChildMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DefaultLayoutSpacing">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ToolBarIconSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ListViewIconSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_IconViewIconSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SmallIconSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_LargeIconSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_FocusFrameVMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_FocusFrameHMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ToolTipLabelFrameWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_CheckBoxLabelSpacing">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBarIconSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SizeGripSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DockWidgetTitleMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_MessageBoxIconSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ButtonIconSize">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_DockWidgetTitleBarButtonMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_RadioButtonLabelSpacing">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_LayoutLeftMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_LayoutTopMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_LayoutRightMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_LayoutBottomMargin">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_LayoutHorizontalSpacing">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_LayoutVerticalSpacing">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabBar_ScrollButtonOverlap">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TextCursorWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabCloseIndicatorWidth">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TabCloseIndicatorHeight">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ScrollView_ScrollBarSpacing">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_ScrollView_ScrollBarOverlap">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_SubMenuOverlap">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_TreeViewIndentation">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_HeaderDefaultSectionSizeHorizontal">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_HeaderDefaultSectionSizeVertical">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PM_CustomBase">
            <anchor>PixelMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>pixelMetric</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>pixelMetric</anchor>
            <arglist>(PixelMetric metric, const QStyleOption *option, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="enum">
            <name>ContentsType</name>
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_PushButton">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_CheckBox">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_RadioButton">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_ToolButton">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_ComboBox">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_Splitter">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_ProgressBar">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_MenuItem">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_MenuBarItem">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_MenuBar">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_Menu">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_TabBarTab">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_Slider">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_ScrollBar">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_LineEdit">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_SpinBox">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_SizeGrip">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_TabWidget">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_DialogButtons">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_HeaderSection">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_GroupBox">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_MdiControls">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_ItemViewItem">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CT_CustomBase">
            <anchor>ContentsType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>sizeFromContents</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>sizeFromContents</anchor>
            <arglist>(ContentsType type, const QStyleOption *option, const QSize &amp;contentsSize, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="enum">
            <name>RequestSoftwareInputPanel</name>
            <anchor>RequestSoftwareInputPanel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RSIP_OnMouseClickAndAlreadyFocused">
            <anchor>RequestSoftwareInputPanel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RSIP_OnMouseClick">
            <anchor>RequestSoftwareInputPanel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleHint</name>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_EtchDisabledText">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_DitherDisabledText">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ScrollBar_MiddleClickAbsolutePosition">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ScrollBar_ScrollWhenPointerLeavesControl">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TabBar_SelectMouseType">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TabBar_Alignment">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Header_ArrowAlignment">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Slider_SnapToValue">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Slider_SloppyKeyEvents">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ProgressDialog_CenterCancelButton">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ProgressDialog_TextLabelAlignment">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_PrintDialog_RightAlignButtons">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_MainWindow_SpaceBelowMenuBar">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_FontDialog_SelectAssociatedText">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_AllowActiveAndDisabled">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SpaceActivatesItem">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SubMenuPopupDelay">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ScrollView_FrameOnlyAroundContents">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_MenuBar_AltKeyNavigation">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ComboBox_ListMouseTracking">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_MouseTracking">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_MenuBar_MouseTracking">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ItemView_ChangeHighlightOnFocus">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Widget_ShareActivation">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Workspace_FillSpaceOnMaximize">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ComboBox_Popup">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TitleBar_NoBorder">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Slider_StopMouseOverSlider">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ScrollBar_StopMouseOverSlider">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_BlinkCursorWhenTextSelected">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_RichText_FullWidthSelection">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_Scrollable">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_GroupBox_TextLabelVerticalAlignment">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_GroupBox_TextLabelColor">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SloppySubMenus">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Table_GridLineColor">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_LineEdit_PasswordCharacter">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_DialogButtons_DefaultButton">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ToolBox_SelectedPageTitleBold">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TabBar_PreferNoArrows">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ScrollBar_LeftClickAbsolutePosition">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ListViewExpand_SelectMouseType">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_UnderlineShortcut">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_SpinBox_AnimateButton">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_SpinBox_KeyPressAutoRepeatRate">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_SpinBox_ClickAutoRepeatRate">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_FillScreenWithScroll">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ToolTipLabel_Opacity">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_DrawMenuBarSeparator">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TitleBar_ModifyNotification">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Button_FocusPolicy">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_MessageBox_UseBorderForButtonSpacing">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TitleBar_AutoRaise">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ToolButton_PopupDelay">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_FocusFrame_Mask">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_RubberBand_Mask">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_WindowFrame_Mask">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_SpinControls_DisableOnBounds">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Dial_BackgroundRole">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ComboBox_LayoutDirection">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ItemView_EllipsisLocation">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ItemView_ShowDecorationSelected">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ItemView_ActivateItemOnSingleClick">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ScrollBar_ContextMenu">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ScrollBar_RollBetweenButtons">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Slider_AbsoluteSetButtons">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Slider_PageSetButtons">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_KeyboardSearch">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TabBar_ElideMode">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_DialogButtonLayout">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ComboBox_PopupFrameStyle">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_MessageBox_TextInteractionFlags">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_DialogButtonBox_ButtonsHaveIcons">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_SpellCheckUnderlineStyle">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_MessageBox_CenterButtons">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SelectionWrap">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ItemView_MovementWithoutUpdatingSelection">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ToolTip_Mask">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_FocusFrame_AboveWidget">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TextControl_FocusIndicatorTextCharFormat">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_WizardStyle">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ItemView_ArrowKeysNavigateIntoChildren">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_Mask">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_FlashTriggeredItem">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_FadeOutOnHide">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_SpinBox_ClickAutoRepeatThreshold">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ItemView_PaintAlternatingRowColorsForEmptyArea">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_FormLayoutWrapPolicy">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TabWidget_DefaultTabPosition">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ToolBar_Movable">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_FormLayoutFieldGrowthPolicy">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_FormLayoutFormAlignment">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_FormLayoutLabelAlignment">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ItemView_DrawDelegateFrame">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TabBar_CloseButtonPosition">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_DockWidget_ButtonsHaveFrame">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ToolButtonStyle">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_RequestSoftwareInputPanel">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ScrollBar_Transient">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SupportsSections">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ToolTip_WakeUpDelay">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ToolTip_FallAsleepDelay">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Widget_Animate">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Splitter_OpaqueResize">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_ComboBox_UseNativePopup">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_LineEdit_PasswordMaskDelay">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_TabBar_ChangeCurrentDelay">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SubMenuUniDirection">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SubMenuUniDirectionFailCount">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SubMenuSloppySelectOtherActions">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SubMenuSloppyCloseTimeout">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SubMenuResetWhenReenteringParent">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Menu_SubMenuDontStartSloppyOnLeave">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_CustomBase">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>styleHint</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>styleHint</anchor>
            <arglist>(StyleHint hint, const QStyleOption *option, const QWidget *widget, QStyleHintReturn *returnData) const = 0</arglist>
        </member>
        <member kind="enum">
            <name>StandardPixmap</name>
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TitleBarMenuButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TitleBarMinButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TitleBarMaxButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TitleBarCloseButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TitleBarNormalButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TitleBarShadeButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TitleBarUnshadeButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TitleBarContextHelpButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DockWidgetCloseButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MessageBoxInformation">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MessageBoxWarning">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MessageBoxCritical">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MessageBoxQuestion">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DesktopIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_TrashIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ComputerIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DriveFDIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DriveHDIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DriveCDIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DriveDVDIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DriveNetIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DirOpenIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DirClosedIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DirLinkIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DirLinkOpenIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileLinkIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ToolBarHorizontalExtensionButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ToolBarVerticalExtensionButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogStart">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogEnd">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogToParent">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogNewFolder">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogDetailedView">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogInfoView">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogContentsView">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogListView">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_FileDialogBack">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DirIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogOkButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogCancelButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogHelpButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogOpenButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogSaveButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogCloseButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogApplyButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogResetButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogDiscardButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogYesButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DialogNoButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ArrowUp">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ArrowDown">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ArrowLeft">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ArrowRight">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ArrowBack">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_ArrowForward">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_DirHomeIcon">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_CommandLink">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_VistaShield">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_BrowserReload">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_BrowserStop">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaPlay">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaStop">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaPause">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaSkipForward">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaSkipBackward">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaSeekForward">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaSeekBackward">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaVolume">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_MediaVolumeMuted">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_LineEditClearButton">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SP_CustomBase">
            <anchor>StandardPixmap-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QPixmap</type>
            <name>standardPixmap</name>
            <anchorfile>qstyle-obsolete.html</anchorfile>
            <anchor>standardPixmap</anchor>
            <arglist>(StandardPixmap standardPixmap, const QStyleOption *option, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QIcon</type>
            <name>standardIcon</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>standardIcon</anchor>
            <arglist>(StandardPixmap standardIcon, const QStyleOption *option, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QPixmap</type>
            <name>generatedIconPixmap</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>generatedIconPixmap</anchor>
            <arglist>(QIcon::Mode iconMode, const QPixmap &amp;pixmap, const QStyleOption *option) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRect</type>
            <name>visualRect</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>visualRect</anchor>
            <arglist>(Qt::LayoutDirection direction, const QRect &amp;boundingRectangle, const QRect &amp;logicalRectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPoint</type>
            <name>visualPos</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>visualPos</anchor>
            <arglist>(Qt::LayoutDirection direction, const QRect &amp;boundingRectangle, const QPoint &amp;logicalPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>sliderPositionFromValue</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>sliderPositionFromValue</anchor>
            <arglist>(int min, int max, int logicalValue, int span, bool upsideDown)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>sliderValueFromPosition</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>sliderValueFromPosition</anchor>
            <arglist>(int min, int max, int position, int span, bool upsideDown)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::Alignment</type>
            <name>visualAlignment</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>visualAlignment</anchor>
            <arglist>(Qt::LayoutDirection direction, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRect</type>
            <name>alignedRect</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>alignedRect</anchor>
            <arglist>(Qt::LayoutDirection direction, Qt::Alignment alignment, const QSize &amp;size, const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>layoutSpacing</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>layoutSpacing</anchor>
            <arglist>(QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation, const QStyleOption *option, const QWidget *widget) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>combinedLayoutSpacing</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>combinedLayoutSpacing</anchor>
            <arglist>(QSizePolicy::ControlTypes controls1, QSizePolicy::ControlTypes controls2, Qt::Orientation orientation, QStyleOption *option, QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QStyle *</type>
            <name>proxy</name>
            <anchorfile>qstyle.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleFactory</name>
        <filename>qstylefactory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>keys</name>
            <anchorfile>qstylefactory.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStyle *</type>
            <name>create</name>
            <anchorfile>qstylefactory.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOption</name>
        <filename>qstyleoption.html</filename>
        <member kind="enum">
            <name>OptionType</name>
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_Default">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_FocusRect">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_Button">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_Tab">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_MenuItem">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_Frame">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_ProgressBar">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_ToolBox">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_Header">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_DockWidget">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_ViewItem">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_TabWidgetFrame">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_TabBarBase">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_RubberBand">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_ToolBar">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_GraphicsItem">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_Complex">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_Slider">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_SpinBox">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_ToolButton">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_ComboBox">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_TitleBar">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_GroupBox">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_SizeGrip">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_CustomBase">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SO_ComplexCustomBase">
            <anchor>OptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOption</name>
            <anchorfile>qstyleoption.html</anchorfile>
            <anchor>QStyleOption</anchor>
            <arglist>(int version, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOption</name>
            <anchorfile>qstyleoption.html</anchorfile>
            <anchor>QStyleOption-2</anchor>
            <arglist>(const QStyleOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStyleOption</name>
            <anchorfile>qstyleoption.html</anchorfile>
            <anchor>dtor.QStyleOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>init</name>
            <anchorfile>qstyleoption-obsolete.html</anchorfile>
            <anchor>init</anchor>
            <arglist>(const QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initFrom</name>
            <anchorfile>qstyleoption.html</anchorfile>
            <anchor>initFrom</anchor>
            <arglist>(const QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStyleOption &amp;</type>
            <name>operator=</name>
            <anchorfile>qstyleoption.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QStyleOption &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionFocusRect</name>
        <filename>qstyleoptionfocusrect.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionFocusRect</name>
            <anchorfile>qstyleoptionfocusrect.html</anchorfile>
            <anchor>QStyleOptionFocusRect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionFocusRect</name>
            <anchorfile>qstyleoptionfocusrect.html</anchorfile>
            <anchor>QStyleOptionFocusRect-2</anchor>
            <arglist>(const QStyleOptionFocusRect &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionFrame</name>
        <filename>qstyleoptionframe.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FrameFeature</name>
            <anchor>FrameFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>FrameFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Flat">
            <anchor>FrameFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rounded">
            <anchor>FrameFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyleOptionFrame::FrameFeature">
            <name>FrameFeatures</name>
            <anchorfile>qstyleoptionframe.html</anchorfile>
            <anchor>FrameFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionFrame</name>
            <anchorfile>qstyleoptionframe.html</anchorfile>
            <anchor>QStyleOptionFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionFrame</name>
            <anchorfile>qstyleoptionframe.html</anchorfile>
            <anchor>QStyleOptionFrame-2</anchor>
            <arglist>(const QStyleOptionFrame &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionTabWidgetFrame</name>
        <filename>qstyleoptiontabwidgetframe.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionTabWidgetFrame</name>
            <anchorfile>qstyleoptiontabwidgetframe.html</anchorfile>
            <anchor>QStyleOptionTabWidgetFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionTabWidgetFrame</name>
            <anchorfile>qstyleoptiontabwidgetframe.html</anchorfile>
            <anchor>QStyleOptionTabWidgetFrame-2</anchor>
            <arglist>(const QStyleOptionTabWidgetFrame &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionTabBarBase</name>
        <filename>qstyleoptiontabbarbase.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionTabBarBase</name>
            <anchorfile>qstyleoptiontabbarbase.html</anchorfile>
            <anchor>QStyleOptionTabBarBase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionTabBarBase</name>
            <anchorfile>qstyleoptiontabbarbase.html</anchorfile>
            <anchor>QStyleOptionTabBarBase-2</anchor>
            <arglist>(const QStyleOptionTabBarBase &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionHeader</name>
        <filename>qstyleoptionheader.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SectionPosition</name>
            <anchor>SectionPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Beginning">
            <anchor>SectionPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Middle">
            <anchor>SectionPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="End">
            <anchor>SectionPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlyOneSection">
            <anchor>SectionPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SelectedPosition</name>
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotAdjacent">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextIsSelected">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousIsSelected">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextAndPreviousAreSelected">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SortIndicator</name>
            <anchor>SortIndicator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>SortIndicator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SortUp">
            <anchor>SortIndicator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SortDown">
            <anchor>SortIndicator-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionHeader</name>
            <anchorfile>qstyleoptionheader.html</anchorfile>
            <anchor>QStyleOptionHeader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionHeader</name>
            <anchorfile>qstyleoptionheader.html</anchorfile>
            <anchor>QStyleOptionHeader-2</anchor>
            <arglist>(const QStyleOptionHeader &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionButton</name>
        <filename>qstyleoptionbutton.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ButtonFeature</name>
            <anchor>ButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>ButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Flat">
            <anchor>ButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HasMenu">
            <anchor>ButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultButton">
            <anchor>ButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoDefaultButton">
            <anchor>ButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommandLinkButton">
            <anchor>ButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyleOptionButton::ButtonFeature">
            <name>ButtonFeatures</name>
            <anchorfile>qstyleoptionbutton.html</anchorfile>
            <anchor>ButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionButton</name>
            <anchorfile>qstyleoptionbutton.html</anchorfile>
            <anchor>QStyleOptionButton</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionButton</name>
            <anchorfile>qstyleoptionbutton.html</anchorfile>
            <anchor>QStyleOptionButton-2</anchor>
            <arglist>(const QStyleOptionButton &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionTab</name>
        <filename>qstyleoptiontab.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TabPosition</name>
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Beginning">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Middle">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="End">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlyOneTab">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SelectedPosition</name>
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotAdjacent">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextIsSelected">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousIsSelected">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CornerWidget</name>
            <anchor>CornerWidget-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoCornerWidgets">
            <anchor>CornerWidget-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftCornerWidget">
            <anchor>CornerWidget-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightCornerWidget">
            <anchor>CornerWidget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TabFeature</name>
            <anchor>TabFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>TabFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HasFrame">
            <anchor>TabFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyleOptionTab::CornerWidget">
            <name>CornerWidgets</name>
            <anchorfile>qstyleoptiontab.html</anchorfile>
            <anchor>CornerWidget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyleOptionTab::TabFeature">
            <name>TabFeatures</name>
            <anchorfile>qstyleoptiontab.html</anchorfile>
            <anchor>TabFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionTab</name>
            <anchorfile>qstyleoptiontab.html</anchorfile>
            <anchor>QStyleOptionTab</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionTab</name>
            <anchorfile>qstyleoptiontab.html</anchorfile>
            <anchor>QStyleOptionTab-2</anchor>
            <arglist>(const QStyleOptionTab &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionToolBar</name>
        <filename>qstyleoptiontoolbar.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ToolBarPosition</name>
            <anchor>ToolBarPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Beginning">
            <anchor>ToolBarPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Middle">
            <anchor>ToolBarPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="End">
            <anchor>ToolBarPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlyOne">
            <anchor>ToolBarPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ToolBarFeature</name>
            <anchor>ToolBarFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>ToolBarFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Movable">
            <anchor>ToolBarFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyleOptionToolBar::ToolBarFeature">
            <name>ToolBarFeatures</name>
            <anchorfile>qstyleoptiontoolbar.html</anchorfile>
            <anchor>ToolBarFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionToolBar</name>
            <anchorfile>qstyleoptiontoolbar.html</anchorfile>
            <anchor>QStyleOptionToolBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionToolBar</name>
            <anchorfile>qstyleoptiontoolbar.html</anchorfile>
            <anchor>QStyleOptionToolBar-2</anchor>
            <arglist>(const QStyleOptionToolBar &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionProgressBar</name>
        <filename>qstyleoptionprogressbar.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionProgressBar</name>
            <anchorfile>qstyleoptionprogressbar.html</anchorfile>
            <anchor>QStyleOptionProgressBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionProgressBar</name>
            <anchorfile>qstyleoptionprogressbar.html</anchorfile>
            <anchor>QStyleOptionProgressBar-2</anchor>
            <arglist>(const QStyleOptionProgressBar &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionMenuItem</name>
        <filename>qstyleoptionmenuitem.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MenuItemType</name>
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Normal">
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultItem">
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Separator">
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubMenu">
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Scroller">
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TearOff">
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Margin">
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmptyArea">
            <anchor>MenuItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CheckType</name>
            <anchor>CheckType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotCheckable">
            <anchor>CheckType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Exclusive">
            <anchor>CheckType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonExclusive">
            <anchor>CheckType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionMenuItem</name>
            <anchorfile>qstyleoptionmenuitem.html</anchorfile>
            <anchor>QStyleOptionMenuItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionMenuItem</name>
            <anchorfile>qstyleoptionmenuitem.html</anchorfile>
            <anchor>QStyleOptionMenuItem-2</anchor>
            <arglist>(const QStyleOptionMenuItem &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionDockWidget</name>
        <filename>qstyleoptiondockwidget.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionDockWidget</name>
            <anchorfile>qstyleoptiondockwidget.html</anchorfile>
            <anchor>QStyleOptionDockWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionDockWidget</name>
            <anchorfile>qstyleoptiondockwidget.html</anchorfile>
            <anchor>QStyleOptionDockWidget-2</anchor>
            <arglist>(const QStyleOptionDockWidget &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionViewItem</name>
        <filename>qstyleoptionviewitem.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Position</name>
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Left">
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Right">
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Top">
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bottom">
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ViewItemFeature</name>
            <anchor>ViewItemFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>ViewItemFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WrapText">
            <anchor>ViewItemFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Alternate">
            <anchor>ViewItemFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HasCheckIndicator">
            <anchor>ViewItemFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HasDisplay">
            <anchor>ViewItemFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HasDecoration">
            <anchor>ViewItemFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyleOptionViewItem::ViewItemFeature">
            <name>ViewItemFeatures</name>
            <anchorfile>qstyleoptionviewitem.html</anchorfile>
            <anchor>ViewItemFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ViewItemPosition</name>
            <anchor>ViewItemPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>ViewItemPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Beginning">
            <anchor>ViewItemPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Middle">
            <anchor>ViewItemPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="End">
            <anchor>ViewItemPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlyOne">
            <anchor>ViewItemPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionViewItem</name>
            <anchorfile>qstyleoptionviewitem.html</anchorfile>
            <anchor>QStyleOptionViewItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionViewItem</name>
            <anchorfile>qstyleoptionviewitem.html</anchorfile>
            <anchor>QStyleOptionViewItem-2</anchor>
            <arglist>(const QStyleOptionViewItem &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionToolBox</name>
        <filename>qstyleoptiontoolbox.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TabPosition</name>
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Beginning">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Middle">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="End">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlyOneTab">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SelectedPosition</name>
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotAdjacent">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextIsSelected">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousIsSelected">
            <anchor>SelectedPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionToolBox</name>
            <anchorfile>qstyleoptiontoolbox.html</anchorfile>
            <anchor>QStyleOptionToolBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionToolBox</name>
            <anchorfile>qstyleoptiontoolbox.html</anchorfile>
            <anchor>QStyleOptionToolBox-2</anchor>
            <arglist>(const QStyleOptionToolBox &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionRubberBand</name>
        <filename>qstyleoptionrubberband.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionRubberBand</name>
            <anchorfile>qstyleoptionrubberband.html</anchorfile>
            <anchor>QStyleOptionRubberBand</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionRubberBand</name>
            <anchorfile>qstyleoptionrubberband.html</anchorfile>
            <anchor>QStyleOptionRubberBand-2</anchor>
            <arglist>(const QStyleOptionRubberBand &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionComplex</name>
        <filename>qstyleoptioncomplex.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionComplex</name>
            <anchorfile>qstyleoptioncomplex.html</anchorfile>
            <anchor>QStyleOptionComplex</anchor>
            <arglist>(int version, int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionComplex</name>
            <anchorfile>qstyleoptioncomplex.html</anchorfile>
            <anchor>QStyleOptionComplex-2</anchor>
            <arglist>(const QStyleOptionComplex &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionSlider</name>
        <filename>qstyleoptionslider.html</filename>
        <base>QStyleOptionComplex</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionSlider</name>
            <anchorfile>qstyleoptionslider.html</anchorfile>
            <anchor>QStyleOptionSlider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionSlider</name>
            <anchorfile>qstyleoptionslider.html</anchorfile>
            <anchor>QStyleOptionSlider-2</anchor>
            <arglist>(const QStyleOptionSlider &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionSpinBox</name>
        <filename>qstyleoptionspinbox.html</filename>
        <base>QStyleOptionComplex</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionSpinBox</name>
            <anchorfile>qstyleoptionspinbox.html</anchorfile>
            <anchor>QStyleOptionSpinBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionSpinBox</name>
            <anchorfile>qstyleoptionspinbox.html</anchorfile>
            <anchor>QStyleOptionSpinBox-2</anchor>
            <arglist>(const QStyleOptionSpinBox &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionToolButton</name>
        <filename>qstyleoptiontoolbutton.html</filename>
        <base>QStyleOptionComplex</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ToolButtonFeature</name>
            <anchor>ToolButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>ToolButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Arrow">
            <anchor>ToolButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Menu">
            <anchor>ToolButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MenuButtonPopup">
            <anchor>ToolButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PopupDelay">
            <anchor>ToolButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HasMenu">
            <anchor>ToolButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QStyleOptionToolButton::ToolButtonFeature">
            <name>ToolButtonFeatures</name>
            <anchorfile>qstyleoptiontoolbutton.html</anchorfile>
            <anchor>ToolButtonFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionToolButton</name>
            <anchorfile>qstyleoptiontoolbutton.html</anchorfile>
            <anchor>QStyleOptionToolButton</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionToolButton</name>
            <anchorfile>qstyleoptiontoolbutton.html</anchorfile>
            <anchor>QStyleOptionToolButton-2</anchor>
            <arglist>(const QStyleOptionToolButton &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionComboBox</name>
        <filename>qstyleoptioncombobox.html</filename>
        <base>QStyleOptionComplex</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionComboBox</name>
            <anchorfile>qstyleoptioncombobox.html</anchorfile>
            <anchor>QStyleOptionComboBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionComboBox</name>
            <anchorfile>qstyleoptioncombobox.html</anchorfile>
            <anchor>QStyleOptionComboBox-2</anchor>
            <arglist>(const QStyleOptionComboBox &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionTitleBar</name>
        <filename>qstyleoptiontitlebar.html</filename>
        <base>QStyleOptionComplex</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionTitleBar</name>
            <anchorfile>qstyleoptiontitlebar.html</anchorfile>
            <anchor>QStyleOptionTitleBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionTitleBar</name>
            <anchorfile>qstyleoptiontitlebar.html</anchorfile>
            <anchor>QStyleOptionTitleBar-2</anchor>
            <arglist>(const QStyleOptionTitleBar &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionGroupBox</name>
        <filename>qstyleoptiongroupbox.html</filename>
        <base>QStyleOptionComplex</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionGroupBox</name>
            <anchorfile>qstyleoptiongroupbox.html</anchorfile>
            <anchor>QStyleOptionGroupBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionGroupBox</name>
            <anchorfile>qstyleoptiongroupbox.html</anchorfile>
            <anchor>QStyleOptionGroupBox-2</anchor>
            <arglist>(const QStyleOptionGroupBox &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionSizeGrip</name>
        <filename>qstyleoptionsizegrip.html</filename>
        <base>QStyleOptionComplex</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionSizeGrip</name>
            <anchorfile>qstyleoptionsizegrip.html</anchorfile>
            <anchor>QStyleOptionSizeGrip</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionSizeGrip</name>
            <anchorfile>qstyleoptionsizegrip.html</anchorfile>
            <anchor>QStyleOptionSizeGrip-2</anchor>
            <arglist>(const QStyleOptionSizeGrip &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleOptionGraphicsItem</name>
        <filename>qstyleoptiongraphicsitem.html</filename>
        <base>QStyleOption</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionGraphicsItem</name>
            <anchorfile>qstyleoptiongraphicsitem.html</anchorfile>
            <anchor>QStyleOptionGraphicsItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleOptionGraphicsItem</name>
            <anchorfile>qstyleoptiongraphicsitem.html</anchorfile>
            <anchor>QStyleOptionGraphicsItem-2</anchor>
            <arglist>(const QStyleOptionGraphicsItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qreal</type>
            <name>levelOfDetailFromTransform</name>
            <anchorfile>qstyleoptiongraphicsitem.html</anchorfile>
            <anchor>levelOfDetailFromTransform</anchor>
            <arglist>(const QTransform &amp;worldTransform)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleHintReturn</name>
        <filename>qstylehintreturn.html</filename>
        <member kind="enum">
            <name>HintReturnType</name>
            <anchor>HintReturnType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Default">
            <anchor>HintReturnType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Mask">
            <anchor>HintReturnType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SH_Variant">
            <anchor>HintReturnType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleHintReturn</name>
            <anchorfile>qstylehintreturn.html</anchorfile>
            <anchor>QStyleHintReturn</anchor>
            <arglist>(int version, int type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleHintReturnMask</name>
        <filename>qstylehintreturnmask.html</filename>
        <base>QStyleHintReturn</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleHintReturnMask</name>
            <anchorfile>qstylehintreturnmask.html</anchorfile>
            <anchor>QStyleHintReturnMask</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStyleHintReturnMask</name>
            <anchorfile>qstylehintreturnmask.html</anchorfile>
            <anchor>dtor.QStyleHintReturnMask</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleHintReturnVariant</name>
        <filename>qstylehintreturnvariant.html</filename>
        <base>QStyleHintReturn</base>
        <member kind="enum">
            <name>StyleOptionType</name>
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>StyleOptionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleOptionVersion</name>
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version">
            <anchor>StyleOptionVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStyleHintReturnVariant</name>
            <anchorfile>qstylehintreturnvariant.html</anchorfile>
            <anchor>QStyleHintReturnVariant</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStyleHintReturnVariant</name>
            <anchorfile>qstylehintreturnvariant.html</anchorfile>
            <anchor>dtor.QStyleHintReturnVariant</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStylePainter</name>
        <filename>qstylepainter.html</filename>
        <base>QPainter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStylePainter</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>QStylePainter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStylePainter</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>QStylePainter-2</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStylePainter</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>QStylePainter-3</anchor>
            <arglist>(QPaintDevice *pd, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>begin</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>begin</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>(QPaintDevice *pd, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPrimitive</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>drawPrimitive</anchor>
            <arglist>(QStyle::PrimitiveElement pe, const QStyleOption &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawControl</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>drawControl</anchor>
            <arglist>(QStyle::ControlElement ce, const QStyleOption &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawComplexControl</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>drawComplexControl</anchor>
            <arglist>(QStyle::ComplexControl cc, const QStyleOptionComplex &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawItemText</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>drawItemText</anchor>
            <arglist>(const QRect &amp;rect, int flags, const QPalette &amp;pal, bool enabled, const QString &amp;text, QPalette::ColorRole textRole)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawItemPixmap</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>drawItemPixmap</anchor>
            <arglist>(const QRect &amp;rect, int flags, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStyle *</type>
            <name>style</name>
            <anchorfile>qstylepainter.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStylePlugin</name>
        <filename>qstyleplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStylePlugin</name>
            <anchorfile>qstyleplugin.html</anchorfile>
            <anchor>QStylePlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStylePlugin</name>
            <anchorfile>qstyleplugin.html</anchorfile>
            <anchor>dtor.QStylePlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStyle *</type>
            <name>create</name>
            <anchorfile>qstyleplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp;key) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QColormap</name>
        <filename>qcolormap.html</filename>
        <member kind="enum">
            <name>Mode</name>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Direct">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Indexed">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gray">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColormap</type>
            <name>instance</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColormap</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>QColormap</anchor>
            <arglist>(const QColormap &amp;colormap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QColormap</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>dtor.QColormap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColormap &amp;</type>
            <name>operator=</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QColormap &amp;colormap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Mode</type>
            <name>mode</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>mode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>pixel</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>pixel</anchor>
            <arglist>(const QColor &amp;color) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor</type>
            <name>colorAt</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>colorAt</anchor>
            <arglist>(uint pixel) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector&lt;QColor&gt;</type>
            <name>colormap</name>
            <anchorfile>qcolormap.html</anchorfile>
            <anchor>colormap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCompleter</name>
        <filename>qcompleter.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>completionPrefix</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionPrefix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ModelSorting">
            <name>modelSorting</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>modelSorting-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::MatchFlags">
            <name>filterMode</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="CompletionMode">
            <name>completionMode</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>completionColumn</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionColumn-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>completionRole</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionRole-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxVisibleItems</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>maxVisibleItems-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::CaseSensitivity">
            <name>caseSensitivity</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>caseSensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wrapAround</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>wrapAround-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CompletionMode</name>
            <anchor>CompletionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PopupCompletion">
            <anchor>CompletionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnfilteredPopupCompletion">
            <anchor>CompletionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InlineCompletion">
            <anchor>CompletionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ModelSorting</name>
            <anchor>ModelSorting-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsortedModel">
            <anchor>ModelSorting-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaseSensitivelySortedModel">
            <anchor>ModelSorting-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaseInsensitivelySortedModel">
            <anchor>ModelSorting-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCompleter</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>QCompleter</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCompleter</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>QCompleter-2</anchor>
            <arglist>(QAbstractItemModel *model, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCompleter</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>QCompleter-3</anchor>
            <arglist>(const QStringList &amp;list, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCompleter</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>dtor.QCompleter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidget</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>setWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModel</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompletionMode</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionMode-prop</anchor>
            <arglist>(CompletionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CompletionMode</type>
            <name>completionMode</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterMode</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist>(Qt::MatchFlags filterMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MatchFlags</type>
            <name>filterMode</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemView *</type>
            <name>popup</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>popup</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPopup</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>setPopup</anchor>
            <arglist>(QAbstractItemView *popup)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>caseSensitivity-prop</anchor>
            <arglist>(Qt::CaseSensitivity caseSensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>caseSensitivity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModelSorting</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>modelSorting-prop</anchor>
            <arglist>(ModelSorting sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ModelSorting</type>
            <name>modelSorting</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>modelSorting-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompletionColumn</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionColumn-prop</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>completionColumn</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionColumn-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompletionRole</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionRole-prop</anchor>
            <arglist>(int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>completionRole</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionRole-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wrapAround</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>wrapAround-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxVisibleItems</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>maxVisibleItems-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxVisibleItems</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>maxVisibleItems-prop</anchor>
            <arglist>(int maxItems)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>completionCount</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setCurrentRow</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>setCurrentRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentRow</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>currentRow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>currentIndex</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>currentIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currentCompletion</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>currentCompletion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>completionModel</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionModel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>completionPrefix</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionPrefix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompletionPrefix</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>completionPrefix-prop</anchor>
            <arglist>(const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>complete</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>complete</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapAround</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>wrapAround-prop</anchor>
            <arglist>(bool wrap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>pathFromIndex</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>pathFromIndex</anchor>
            <arglist>(const QModelIndex &amp;index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>splitPath</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>splitPath</anchor>
            <arglist>(const QString &amp;path) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *o, QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>activated-2</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>highlighted</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>highlighted</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>highlighted</name>
            <anchorfile>qcompleter.html</anchorfile>
            <anchor>highlighted-2</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScroller</name>
        <filename>qscroller.html</filename>
        <base>QObject</base>
        <member kind="property" type="State">
            <name>state</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QScrollerProperties">
            <name>scrollerProperties</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>scrollerProperties-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Inactive">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pressed">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dragging">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Scrolling">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ScrollerGestureType</name>
            <anchor>ScrollerGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchGesture">
            <anchor>ScrollerGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftMouseButtonGesture">
            <anchor>ScrollerGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightMouseButtonGesture">
            <anchor>ScrollerGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleMouseButtonGesture">
            <anchor>ScrollerGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Input</name>
            <anchor>Input-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InputPress">
            <anchor>Input-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InputMove">
            <anchor>Input-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InputRelease">
            <anchor>Input-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasScroller</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>hasScroller</anchor>
            <arglist>(QObject *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QScroller *</type>
            <name>scroller</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>scroller</anchor>
            <arglist>(QObject *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QScroller *</type>
            <name>scroller</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>scroller-2</anchor>
            <arglist>(const QObject *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::GestureType</type>
            <name>grabGesture</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>grabGesture</anchor>
            <arglist>(QObject *target, ScrollerGestureType scrollGestureType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::GestureType</type>
            <name>grabbedGesture</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>grabbedGesture</anchor>
            <arglist>(QObject *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>ungrabGesture</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>ungrabGesture</anchor>
            <arglist>(QObject *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QScroller *&gt;</type>
            <name>activeScrollers</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>activeScrollers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>target</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>handleInput</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>handleInput</anchor>
            <arglist>(Input input, const QPointF &amp;position, qint64 timestamp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>velocity</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>velocity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>finalPosition</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>finalPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pixelPerMeter</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>pixelPerMeter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScrollerProperties</type>
            <name>scrollerProperties</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>scrollerProperties-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSnapPositionsX</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>setSnapPositionsX</anchor>
            <arglist>(const QList&lt;qreal&gt; &amp;positions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSnapPositionsX</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>setSnapPositionsX-2</anchor>
            <arglist>(qreal first, qreal interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSnapPositionsY</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>setSnapPositionsY</anchor>
            <arglist>(const QList&lt;qreal&gt; &amp;positions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSnapPositionsY</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>setSnapPositionsY-2</anchor>
            <arglist>(qreal first, qreal interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScrollerProperties</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>scrollerProperties-prop</anchor>
            <arglist>(const QScrollerProperties &amp;prop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollTo</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>scrollTo</anchor>
            <arglist>(const QPointF &amp;pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollTo</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>scrollTo-2</anchor>
            <arglist>(const QPointF &amp;pos, int scrollTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureVisible</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>ensureVisible</anchor>
            <arglist>(const QRectF &amp;rect, qreal xmargin, qreal ymargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureVisible</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>ensureVisible-2</anchor>
            <arglist>(const QRectF &amp;rect, qreal xmargin, qreal ymargin, int scrollTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resendPrepareEvent</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>resendPrepareEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>(QScroller::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollerPropertiesChanged</name>
            <anchorfile>qscroller.html</anchorfile>
            <anchor>scrollerProperties-prop</anchor>
            <arglist>(const QScrollerProperties &amp;newProperties)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScrollerProperties</name>
        <filename>qscrollerproperties.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollerProperties</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>QScrollerProperties</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollerProperties</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>QScrollerProperties-2</anchor>
            <arglist>(const QScrollerProperties &amp;sp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScrollerProperties &amp;</type>
            <name>operator=</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QScrollerProperties &amp;sp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScrollerProperties</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>dtor.QScrollerProperties</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QScrollerProperties &amp;sp) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QScrollerProperties &amp;sp) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultScrollerProperties</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>setDefaultScrollerProperties</anchor>
            <arglist>(const QScrollerProperties &amp;sp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>unsetDefaultScrollerProperties</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>unsetDefaultScrollerProperties</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>OvershootPolicy</name>
            <anchor>OvershootPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OvershootWhenScrollable">
            <anchor>OvershootPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OvershootAlwaysOff">
            <anchor>OvershootPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OvershootAlwaysOn">
            <anchor>OvershootPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FrameRates</name>
            <anchor>FrameRates-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Standard">
            <anchor>FrameRates-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fps60">
            <anchor>FrameRates-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fps30">
            <anchor>FrameRates-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fps20">
            <anchor>FrameRates-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ScrollMetric</name>
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MousePressEventDelay">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragStartDistance">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DragVelocitySmoothingFactor">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AxisLockThreshold">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollingCurve">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecelerationFactor">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinimumVelocity">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaximumVelocity">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaximumClickThroughVelocity">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AcceleratingFlickMaximumTime">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AcceleratingFlickSpeedupFactor">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SnapPositionRatio">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SnapTime">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OvershootDragResistanceFactor">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OvershootDragDistanceFactor">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OvershootScrollDistanceFactor">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OvershootScrollTime">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HorizontalOvershootPolicy">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerticalOvershootPolicy">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameRate">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollMetricCount">
            <anchor>ScrollMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>scrollMetric</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>scrollMetric</anchor>
            <arglist>(ScrollMetric metric) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScrollMetric</name>
            <anchorfile>qscrollerproperties.html</anchorfile>
            <anchor>setScrollMetric</anchor>
            <arglist>(ScrollMetric metric, const QVariant &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemTrayIcon</name>
        <filename>qsystemtrayicon.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>toolTip</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QIcon">
            <name>icon</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemTrayIcon</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>QSystemTrayIcon</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemTrayIcon</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>QSystemTrayIcon-2</anchor>
            <arglist>(const QIcon &amp;icon, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSystemTrayIcon</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>dtor.QSystemTrayIcon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ActivationReason</name>
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unknown">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Context">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoubleClick">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Trigger">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleClick">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContextMenu</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>setContextMenu</anchor>
            <arglist>(QMenu *menu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>contextMenu</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>contextMenu</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>toolTip-prop</anchor>
            <arglist>(const QString &amp;tip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSystemTrayAvailable</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>isSystemTrayAvailable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsMessages</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>supportsMessages</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>MessageIcon</name>
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoIcon">
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Information">
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Warning">
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Critical">
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>geometry</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>show</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>show</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hide</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>hide</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMessage</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>showMessage</anchor>
            <arglist>(const QString &amp;title, const QString &amp;message, QSystemTrayIcon::MessageIcon icon, int millisecondsTimeoutHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(QSystemTrayIcon::ActivationReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageClicked</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>messageClicked</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsystemtrayicon.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUndoGroup</name>
        <filename>qundogroup.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUndoGroup</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>QUndoGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QUndoGroup</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>dtor.QUndoGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addStack</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>addStack</anchor>
            <arglist>(QUndoStack *stack)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeStack</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>removeStack</anchor>
            <arglist>(QUndoStack *stack)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QUndoStack *&gt;</type>
            <name>stacks</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>stacks</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUndoStack *</type>
            <name>activeStack</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>activeStack</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>createUndoAction</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>createUndoAction</anchor>
            <arglist>(QObject *parent, const QString &amp;prefix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>createRedoAction</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>createRedoAction</anchor>
            <arglist>(QObject *parent, const QString &amp;prefix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canUndo</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>canUndo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canRedo</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>canRedo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>undoText</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>undoText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>redoText</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>redoText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClean</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>isClean</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>undo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>redo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveStack</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>setActiveStack</anchor>
            <arglist>(QUndoStack *stack)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeStackChanged</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>activeStackChanged</anchor>
            <arglist>(QUndoStack *stack)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>indexChanged</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>indexChanged</anchor>
            <arglist>(int idx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cleanChanged</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>cleanChanged</anchor>
            <arglist>(bool clean)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>canUndoChanged</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>canUndoChanged</anchor>
            <arglist>(bool canUndo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>canRedoChanged</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>canRedoChanged</anchor>
            <arglist>(bool canRedo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undoTextChanged</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>undoTextChanged</anchor>
            <arglist>(const QString &amp;undoText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redoTextChanged</name>
            <anchorfile>qundogroup.html</anchorfile>
            <anchor>redoTextChanged</anchor>
            <arglist>(const QString &amp;redoText)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUndoCommand</name>
        <filename>qundocommand.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUndoCommand</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>QUndoCommand</anchor>
            <arglist>(QUndoCommand *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUndoCommand</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>QUndoCommand-2</anchor>
            <arglist>(const QString &amp;text, QUndoCommand *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QUndoCommand</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>dtor.QUndoCommand</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>undo</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>undo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>redo</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>redo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>actionText</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>actionText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>id</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>mergeWith</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>mergeWith</anchor>
            <arglist>(const QUndoCommand *command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>childCount</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>childCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QUndoCommand *</type>
            <name>child</name>
            <anchorfile>qundocommand.html</anchorfile>
            <anchor>child</anchor>
            <arglist>(int index) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUndoStack</name>
        <filename>qundostack.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>undoLimit</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>undoLimit-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUndoStack</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>QUndoStack</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QUndoStack</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>dtor.QUndoStack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>push</anchor>
            <arglist>(QUndoCommand *cmd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canUndo</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>canUndo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canRedo</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>canRedo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>undoText</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>undoText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>redoText</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>redoText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>index</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>index</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(int idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>createUndoAction</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>createUndoAction</anchor>
            <arglist>(QObject *parent, const QString &amp;prefix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>createRedoAction</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>createRedoAction</anchor>
            <arglist>(QObject *parent, const QString &amp;prefix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClean</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>isClean</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cleanIndex</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>cleanIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginMacro</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>beginMacro</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endMacro</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>endMacro</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUndoLimit</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>undoLimit-prop</anchor>
            <arglist>(int limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>undoLimit</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>undoLimit-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QUndoCommand *</type>
            <name>command</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>command</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClean</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>setClean</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndex</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>setIndex</anchor>
            <arglist>(int idx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>undo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>redo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActive</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>(bool active)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>indexChanged</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>indexChanged</anchor>
            <arglist>(int idx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cleanChanged</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>cleanChanged</anchor>
            <arglist>(bool clean)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>canUndoChanged</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>canUndoChanged</anchor>
            <arglist>(bool canUndo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>canRedoChanged</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>canRedoChanged</anchor>
            <arglist>(bool canRedo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undoTextChanged</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>undoTextChanged</anchor>
            <arglist>(const QString &amp;undoText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redoTextChanged</name>
            <anchorfile>qundostack.html</anchorfile>
            <anchor>redoTextChanged</anchor>
            <arglist>(const QString &amp;redoText)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUndoView</name>
        <filename>qundoview.html</filename>
        <base>QListView</base>
        <member kind="property" type="QString">
            <name>emptyLabel</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>emptyLabel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QIcon">
            <name>cleanIcon</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>cleanIcon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUndoView</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>QUndoView</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUndoView</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>QUndoView-2</anchor>
            <arglist>(QUndoStack *stack, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUndoView</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>QUndoView-3</anchor>
            <arglist>(QUndoGroup *group, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QUndoView</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>dtor.QUndoView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUndoStack *</type>
            <name>stack</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>stack</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUndoGroup *</type>
            <name>group</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEmptyLabel</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>emptyLabel-prop</anchor>
            <arglist>(const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>emptyLabel</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>emptyLabel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCleanIcon</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>cleanIcon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>cleanIcon</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>cleanIcon-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStack</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>setStack</anchor>
            <arglist>(QUndoStack *stack)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGroup</name>
            <anchorfile>qundoview.html</anchorfile>
            <anchor>setGroup</anchor>
            <arglist>(QUndoGroup *group)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractButton</name>
        <filename>qabstractbutton.html</filename>
        <base>QWidget</base>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QIcon">
            <name>icon</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>iconSize</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QKeySequence">
            <name>shortcut</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>shortcut-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>checkable</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>checked</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoRepeat</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoExclusive</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoExclusive-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>autoRepeatDelay</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeatDelay-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>autoRepeatInterval</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeatInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>down</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>down-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractButton</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>QAbstractButton</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractButton</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>dtor.QAbstractButton</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>iconSize</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShortcut</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>shortcut-prop</anchor>
            <arglist>(const QKeySequence &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeySequence</type>
            <name>shortcut</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>shortcut-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckable</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCheckable</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isChecked</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDown</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>down-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDown</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>down-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRepeat</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRepeat</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRepeatDelay</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeatDelay-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>autoRepeatDelay</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeatDelay-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRepeatInterval</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeatInterval-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>autoRepeatInterval</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoRepeatInterval-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoExclusive</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoExclusive-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoExclusive</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>autoExclusive-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QButtonGroup *</type>
            <name>group</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconSize</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>animateClick</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>animateClick</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>click</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>click</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggle</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>toggle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChecked</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>released</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(bool checked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggled</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>(bool checked)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hitButton</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>hitButton</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>checkStateSet</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>checkStateSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>nextCheckState</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>nextCheckState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qabstractbutton.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractScrollArea</name>
        <filename>qabstractscrollarea.html</filename>
        <base>QFrame</base>
        <member kind="property" type="Qt::ScrollBarPolicy">
            <name>verticalScrollBarPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>verticalScrollBarPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ScrollBarPolicy">
            <name>horizontalScrollBarPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>horizontalScrollBarPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SizeAdjustPolicy">
            <name>sizeAdjustPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>sizeAdjustPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractScrollArea</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>QAbstractScrollArea</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractScrollArea</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>dtor.QAbstractScrollArea</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>SizeAdjustPolicy</name>
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AdjustIgnored">
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AdjustToContentsOnFirstShow">
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AdjustToContents">
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScrollBarPolicy</type>
            <name>verticalScrollBarPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>verticalScrollBarPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalScrollBarPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>verticalScrollBarPolicy-prop</anchor>
            <arglist>(Qt::ScrollBarPolicy )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScrollBar *</type>
            <name>verticalScrollBar</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>verticalScrollBar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalScrollBar</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>setVerticalScrollBar</anchor>
            <arglist>(QScrollBar *scrollBar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScrollBarPolicy</type>
            <name>horizontalScrollBarPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>horizontalScrollBarPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalScrollBarPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>horizontalScrollBarPolicy-prop</anchor>
            <arglist>(Qt::ScrollBarPolicy )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScrollBar *</type>
            <name>horizontalScrollBar</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>horizontalScrollBar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalScrollBar</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>setHorizontalScrollBar</anchor>
            <arglist>(QScrollBar *scrollBar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>cornerWidget</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>cornerWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCornerWidget</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>setCornerWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addScrollBarWidget</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>addScrollBarWidget</anchor>
            <arglist>(QWidget *widget, Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidgetList</type>
            <name>scrollBarWidgets</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>scrollBarWidgets</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>viewport</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>viewport</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>setViewport</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>maximumViewportSize</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>maximumViewportSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setupViewport</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>setupViewport</anchor>
            <arglist>(QWidget *viewport)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SizeAdjustPolicy</type>
            <name>sizeAdjustPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>sizeAdjustPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeAdjustPolicy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>sizeAdjustPolicy-prop</anchor>
            <arglist>(SizeAdjustPolicy policy)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportMargins</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>setViewportMargins</anchor>
            <arglist>(int left, int top, int right, int bottom)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportMargins</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>setViewportMargins-2</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QMargins</type>
            <name>viewportMargins</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>viewportMargins</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>viewportEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>viewportEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollContentsBy</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>scrollContentsBy</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>viewportSizeHint</name>
            <anchorfile>qabstractscrollarea.html</anchorfile>
            <anchor>viewportSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractSlider</name>
        <filename>qabstractslider.html</filename>
        <base>QWidget</base>
        <member kind="property" type="int">
            <name>minimum</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximum</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>singleStep</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>pageStep</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>pageStep-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>value</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>sliderPosition</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderPosition-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>tracking</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>tracking-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Orientation">
            <name>orientation</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>invertedAppearance</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>invertedAppearance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>invertedControls</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>invertedControls-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>sliderDown</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderDown-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractSlider</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>QAbstractSlider</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractSlider</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>dtor.QAbstractSlider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimum</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimum</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximum</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximum</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSingleStep</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>singleStep</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPageStep</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>pageStep-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pageStep</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>pageStep-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTracking</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>tracking-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasTracking</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>tracking-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSliderDown</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderDown-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSliderDown</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderDown-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSliderPosition</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderPosition-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sliderPosition</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderPosition-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInvertedAppearance</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>invertedAppearance-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invertedAppearance</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>invertedAppearance-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInvertedControls</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>invertedControls-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invertedControls</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>invertedControls-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>SliderAction</name>
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderNoAction">
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderSingleStepAdd">
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderSingleStepSub">
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderPageStepAdd">
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderPageStepSub">
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderToMinimum">
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderToMaximum">
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderMove">
            <anchor>SliderAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>value</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggerAction</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>triggerAction</anchor>
            <arglist>(SliderAction action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>(Qt::Orientation )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRange</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(int min, int max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sliderPressed</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderPressed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sliderMoved</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderPosition-prop</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sliderReleased</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderReleased</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rangeChanged</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>rangeChanged</anchor>
            <arglist>(int min, int max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>actionTriggered</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>actionTriggered</anchor>
            <arglist>(int action)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRepeatAction</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>setRepeatAction</anchor>
            <arglist>(SliderAction action, int thresholdTime, int repeatTime)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>SliderAction</type>
            <name>repeatAction</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>repeatAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>SliderChange</name>
            <anchor>SliderChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderRangeChange">
            <anchor>SliderChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderOrientationChange">
            <anchor>SliderChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderStepsChange">
            <anchor>SliderChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SliderValueChange">
            <anchor>SliderChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sliderChange</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>sliderChange</anchor>
            <arglist>(SliderChange change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qabstractslider.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractSpinBox</name>
        <filename>qabstractspinbox.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>wrapping</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>wrapping-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>frame</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>alignment</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>readOnly</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ButtonSymbols">
            <name>buttonSymbols</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>buttonSymbols-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>specialValueText</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>specialValueText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accelerated</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>accelerated-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="CorrectionMode">
            <name>correctionMode</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>correctionMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>acceptableInput</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>acceptableInput-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>keyboardTracking</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>keyboardTracking-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>showGroupSeparator</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>showGroupSeparator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractSpinBox</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>QAbstractSpinBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractSpinBox</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>dtor.QAbstractSpinBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>StepEnabledFlag</name>
            <anchor>StepEnabledFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StepNone">
            <anchor>StepEnabledFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StepUpEnabled">
            <anchor>StepEnabledFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StepDownEnabled">
            <anchor>StepEnabledFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QAbstractSpinBox::StepEnabledFlag">
            <name>StepEnabled</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>StepEnabledFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ButtonSymbols</name>
            <anchor>ButtonSymbols-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UpDownArrows">
            <anchor>ButtonSymbols-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlusMinus">
            <anchor>ButtonSymbols-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButtons">
            <anchor>ButtonSymbols-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ButtonSymbols</type>
            <name>buttonSymbols</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>buttonSymbols-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtonSymbols</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>buttonSymbols-prop</anchor>
            <arglist>(ButtonSymbols bs)</arglist>
        </member>
        <member kind="enum">
            <name>CorrectionMode</name>
            <anchor>CorrectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CorrectToPreviousValue">
            <anchor>CorrectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CorrectToNearestValue">
            <anchor>CorrectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCorrectionMode</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>correctionMode-prop</anchor>
            <arglist>(CorrectionMode cm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CorrectionMode</type>
            <name>correctionMode</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>correctionMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAcceptableInput</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>acceptableInput-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>specialValueText</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>specialValueText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecialValueText</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>specialValueText-prop</anchor>
            <arglist>(const QString &amp;txt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wrapping</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>wrapping-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapping</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>wrapping-prop</anchor>
            <arglist>(bool w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadOnly</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>(bool r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyboardTracking</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>keyboardTracking-prop</anchor>
            <arglist>(bool kt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keyboardTracking</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>keyboardTracking-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>(Qt::Alignment flag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrame</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFrame</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccelerated</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>accelerated-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccelerated</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>accelerated-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGroupSeparatorShown</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>showGroupSeparator-prop</anchor>
            <arglist>(bool shown)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGroupSeparatorShown</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>showGroupSeparator-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interpretText</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>interpretText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;input, int &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fixup</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>fixup</anchor>
            <arglist>(QString &amp;input) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>stepBy</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>stepBy</anchor>
            <arglist>(int steps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stepUp</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>stepUp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stepDown</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>stepDown</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectAll</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>selectAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>closeEvent</anchor>
            <arglist>(QCloseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionSpinBox *option) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QLineEdit *</type>
            <name>lineEdit</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>lineEdit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setLineEdit</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>setLineEdit</anchor>
            <arglist>(QLineEdit *lineEdit)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual StepEnabled</type>
            <name>stepEnabled</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>stepEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>editingFinished</name>
            <anchorfile>qabstractspinbox.html</anchorfile>
            <anchor>editingFinished</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QButtonGroup</name>
        <filename>qbuttongroup.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>exclusive</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>exclusive-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QButtonGroup</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>QButtonGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QButtonGroup</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>dtor.QButtonGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExclusive</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>exclusive-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exclusive</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>exclusive-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addButton</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>addButton</anchor>
            <arglist>(QAbstractButton *button, int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeButton</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>removeButton</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractButton *&gt;</type>
            <name>buttons</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractButton *</type>
            <name>checkedButton</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>checkedButton</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractButton *</type>
            <name>button</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>button</anchor>
            <arglist>(int id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setId</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>setId</anchor>
            <arglist>(QAbstractButton *button, int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>id</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>id</anchor>
            <arglist>(QAbstractButton *button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>checkedId</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>checkedId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonClicked</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttonClicked</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonClicked</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttonClicked-2</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonPressed</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttonPressed</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonPressed</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttonPressed-2</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonReleased</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttonReleased</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonReleased</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttonReleased-2</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonToggled</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttonToggled</anchor>
            <arglist>(QAbstractButton *button, bool checked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonToggled</name>
            <anchorfile>qbuttongroup.html</anchorfile>
            <anchor>buttonToggled-2</anchor>
            <arglist>(int id, bool checked)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCalendarWidget</name>
        <filename>qcalendarwidget.html</filename>
        <base>QWidget</base>
        <member kind="property" type="QDate">
            <name>selectedDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>selectedDate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDate">
            <name>minimumDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>minimumDate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDate">
            <name>maximumDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>maximumDate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::DayOfWeek">
            <name>firstDayOfWeek</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>firstDayOfWeek-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>gridVisible</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>gridVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SelectionMode">
            <name>selectionMode</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>selectionMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="HorizontalHeaderFormat">
            <name>horizontalHeaderFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>horizontalHeaderFormat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="VerticalHeaderFormat">
            <name>verticalHeaderFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>verticalHeaderFormat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>navigationBarVisible</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>navigationBarVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dateEditEnabled</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dateEditEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>dateEditAcceptDelay</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dateEditAcceptDelay-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>HorizontalHeaderFormat</name>
            <anchor>HorizontalHeaderFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoHorizontalHeader">
            <anchor>HorizontalHeaderFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleLetterDayNames">
            <anchor>HorizontalHeaderFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShortDayNames">
            <anchor>HorizontalHeaderFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LongDayNames">
            <anchor>HorizontalHeaderFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>VerticalHeaderFormat</name>
            <anchor>VerticalHeaderFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoVerticalHeader">
            <anchor>VerticalHeaderFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ISOWeekNumbers">
            <anchor>VerticalHeaderFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SelectionMode</name>
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSelection">
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleSelection">
            <anchor>SelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCalendarWidget</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>QCalendarWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCalendarWidget</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dtor.QCalendarWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>selectedDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>selectedDate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>yearShown</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>yearShown</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>monthShown</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>monthShown</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>minimumDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>minimumDate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>minimumDate-prop</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>maximumDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>maximumDate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>maximumDate-prop</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DayOfWeek</type>
            <name>firstDayOfWeek</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>firstDayOfWeek-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstDayOfWeek</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>firstDayOfWeek-prop</anchor>
            <arglist>(Qt::DayOfWeek dayOfWeek)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNavigationBarVisible</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>navigationBarVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGridVisible</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>gridVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SelectionMode</type>
            <name>selectionMode</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>selectionMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionMode</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>selectionMode-prop</anchor>
            <arglist>(SelectionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>HorizontalHeaderFormat</type>
            <name>horizontalHeaderFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>horizontalHeaderFormat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalHeaderFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>horizontalHeaderFormat-prop</anchor>
            <arglist>(HorizontalHeaderFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VerticalHeaderFormat</type>
            <name>verticalHeaderFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>verticalHeaderFormat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalHeaderFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>verticalHeaderFormat-prop</anchor>
            <arglist>(VerticalHeaderFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>headerTextFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>headerTextFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeaderTextFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>setHeaderTextFormat</anchor>
            <arglist>(const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>weekdayTextFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>weekdayTextFormat</anchor>
            <arglist>(Qt::DayOfWeek dayOfWeek) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWeekdayTextFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>setWeekdayTextFormat</anchor>
            <arglist>(Qt::DayOfWeek dayOfWeek, const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QDate, QTextCharFormat&gt;</type>
            <name>dateTextFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dateTextFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>dateTextFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dateTextFormat-2</anchor>
            <arglist>(const QDate &amp;date) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDateTextFormat</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>setDateTextFormat</anchor>
            <arglist>(const QDate &amp;date, const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDateEditEnabled</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dateEditEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDateEditEnabled</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dateEditEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dateEditAcceptDelay</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dateEditAcceptDelay-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDateEditAcceptDelay</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>dateEditAcceptDelay-prop</anchor>
            <arglist>(int delay)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *watched, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintCell</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>paintCell</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rect, const QDate &amp;date) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>updateCell</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>updateCell</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>updateCells</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>updateCells</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectedDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>selectedDate-prop</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDateRange</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>setDateRange</anchor>
            <arglist>(const QDate &amp;min, const QDate &amp;max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentPage</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>setCurrentPage</anchor>
            <arglist>(int year, int month)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGridVisible</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>gridVisible-prop</anchor>
            <arglist>(bool show)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNavigationBarVisible</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>navigationBarVisible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showNextMonth</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>showNextMonth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showPreviousMonth</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>showPreviousMonth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showNextYear</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>showNextYear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showPreviousYear</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>showPreviousYear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showSelectedDate</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>showSelectedDate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showToday</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>showToday</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentPageChanged</name>
            <anchorfile>qcalendarwidget.html</anchorfile>
            <anchor>currentPageChanged</anchor>
            <arglist>(int year, int month)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCheckBox</name>
        <filename>qcheckbox.html</filename>
        <base>QAbstractButton</base>
        <member kind="property" type="bool">
            <name>tristate</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>tristate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCheckBox</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>QCheckBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCheckBox</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>QCheckBox-2</anchor>
            <arglist>(const QString &amp;text, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCheckBox</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>dtor.QCheckBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTristate</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>tristate-prop</anchor>
            <arglist>(bool y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTristate</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>tristate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CheckState</type>
            <name>checkState</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>checkState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckState</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>setCheckState</anchor>
            <arglist>(Qt::CheckState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(int state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hitButton</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>hitButton</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>checkStateSet</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>checkStateSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>nextCheckState</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>nextCheckState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qcheckbox.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionButton *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QComboBox</name>
        <filename>qcombobox.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>editable</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>editable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>currentText</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>currentData</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentData-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxVisibleItems</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>maxVisibleItems-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxCount</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>maxCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="InsertPolicy">
            <name>insertPolicy</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>insertPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SizeAdjustPolicy">
            <name>sizeAdjustPolicy</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>sizeAdjustPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumContentsLength</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>minimumContentsLength-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>iconSize</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoCompletion</name>
            <anchorfile>qcombobox-obsolete.html</anchorfile>
            <anchor>autoCompletion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::CaseSensitivity">
            <name>autoCompletionCaseSensitivity</name>
            <anchorfile>qcombobox-obsolete.html</anchorfile>
            <anchor>autoCompletionCaseSensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>duplicatesEnabled</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>duplicatesEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>frame</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>modelColumn</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>modelColumn-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComboBox</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>QComboBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QComboBox</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>dtor.QComboBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxVisibleItems</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>maxVisibleItems-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxVisibleItems</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>maxVisibleItems-prop</anchor>
            <arglist>(int maxItems)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxCount</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>maxCount-prop</anchor>
            <arglist>(int max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxCount</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>maxCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoCompletion</name>
            <anchorfile>qcombobox-obsolete.html</anchorfile>
            <anchor>autoCompletion-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoCompletion</name>
            <anchorfile>qcombobox-obsolete.html</anchorfile>
            <anchor>autoCompletion-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>autoCompletionCaseSensitivity</name>
            <anchorfile>qcombobox-obsolete.html</anchorfile>
            <anchor>autoCompletionCaseSensitivity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoCompletionCaseSensitivity</name>
            <anchorfile>qcombobox-obsolete.html</anchorfile>
            <anchor>autoCompletionCaseSensitivity-prop</anchor>
            <arglist>(Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>duplicatesEnabled</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>duplicatesEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDuplicatesEnabled</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>duplicatesEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrame</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFrame</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>findText</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>findText</anchor>
            <arglist>(const QString &amp;text, Qt::MatchFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>findData</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>findData</anchor>
            <arglist>(const QVariant &amp;data, int role, Qt::MatchFlags flags) const</arglist>
        </member>
        <member kind="enum">
            <name>InsertPolicy</name>
            <anchor>InsertPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoInsert">
            <anchor>InsertPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InsertAtTop">
            <anchor>InsertPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InsertAtCurrent">
            <anchor>InsertPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InsertAtBottom">
            <anchor>InsertPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InsertAfterCurrent">
            <anchor>InsertPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InsertBeforeCurrent">
            <anchor>InsertPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InsertAlphabetically">
            <anchor>InsertPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InsertPolicy</type>
            <name>insertPolicy</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>insertPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInsertPolicy</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>insertPolicy-prop</anchor>
            <arglist>(InsertPolicy policy)</arglist>
        </member>
        <member kind="enum">
            <name>SizeAdjustPolicy</name>
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AdjustToContents">
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AdjustToContentsOnFirstShow">
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AdjustToMinimumContentsLength">
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AdjustToMinimumContentsLengthWithIcon">
            <anchor>SizeAdjustPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SizeAdjustPolicy</type>
            <name>sizeAdjustPolicy</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>sizeAdjustPolicy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeAdjustPolicy</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>sizeAdjustPolicy-prop</anchor>
            <arglist>(SizeAdjustPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumContentsLength</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>minimumContentsLength-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumContentsLength</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>minimumContentsLength-prop</anchor>
            <arglist>(int characters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>iconSize</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconSize</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEditable</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>editable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEditable</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>editable-prop</anchor>
            <arglist>(bool editable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineEdit</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setLineEdit</anchor>
            <arglist>(QLineEdit *edit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineEdit *</type>
            <name>lineEdit</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>lineEdit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValidator</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setValidator</anchor>
            <arglist>(const QValidator *validator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QValidator *</type>
            <name>validator</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>validator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompleter</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setCompleter</anchor>
            <arglist>(QCompleter *completer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCompleter *</type>
            <name>completer</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>completer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemDelegate *</type>
            <name>itemDelegate</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>itemDelegate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemDelegate</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setItemDelegate</anchor>
            <arglist>(QAbstractItemDelegate *delegate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModel</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>rootModelIndex</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>rootModelIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootModelIndex</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setRootModelIndex</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>modelColumn</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>modelColumn-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModelColumn</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>modelColumn-prop</anchor>
            <arglist>(int visibleColumn)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currentText</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>currentData</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentData-prop</anchor>
            <arglist>(int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemText</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>itemText</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>itemIcon</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>itemIcon</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>itemData</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(int index, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(const QString &amp;text, const QVariant &amp;userData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItem</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>addItem-2</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text, const QVariant &amp;userData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addItems</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>addItems</anchor>
            <arglist>(const QStringList &amp;texts)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertItem</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>insertItem</anchor>
            <arglist>(int index, const QString &amp;text, const QVariant &amp;userData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertItem</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>insertItem-2</anchor>
            <arglist>(int index, const QIcon &amp;icon, const QString &amp;text, const QVariant &amp;userData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertItems</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>insertItems</anchor>
            <arglist>(int index, const QStringList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertSeparator</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>insertSeparator</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItem</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemText</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setItemText</anchor>
            <arglist>(int index, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemIcon</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setItemIcon</anchor>
            <arglist>(int index, const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemData</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(int index, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemView *</type>
            <name>view</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>view</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setView</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setView</anchor>
            <arglist>(QAbstractItemView *itemView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showPopup</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>showPopup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hidePopup</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>hidePopup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearEditText</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>clearEditText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEditText</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>setEditText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentText</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>editTextChanged</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>editTextChanged</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>activated-2</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>highlighted</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>highlighted</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>highlighted</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>highlighted-2</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIndexChanged</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIndexChanged</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentTextChanged</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>currentText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qcombobox.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionComboBox *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCommandLinkButton</name>
        <filename>qcommandlinkbutton.html</filename>
        <base>QPushButton</base>
        <member kind="property" type="QString">
            <name>description</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>description-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>flat</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>flat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLinkButton</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>QCommandLinkButton</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLinkButton</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>QCommandLinkButton-2</anchor>
            <arglist>(const QString &amp;text, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLinkButton</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>QCommandLinkButton-3</anchor>
            <arglist>(const QString &amp;text, const QString &amp;description, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCommandLinkButton</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>dtor.QCommandLinkButton</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>description-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>description-prop</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int width) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qcommandlinkbutton.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDateTimeEdit</name>
        <filename>qdatetimeedit.html</filename>
        <base>QAbstractSpinBox</base>
        <member kind="property" type="QDateTime">
            <name>dateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>dateTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDate">
            <name>date</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>date-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTime">
            <name>time</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>time-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDateTime">
            <name>maximumDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumDateTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDateTime">
            <name>minimumDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumDateTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDate">
            <name>maximumDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumDate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDate">
            <name>minimumDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumDate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTime">
            <name>maximumTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTime">
            <name>minimumTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Section">
            <name>currentSection</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>currentSection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Sections">
            <name>displayedSections</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>displayedSections-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>displayFormat</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>displayFormat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>calendarPopup</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>calendarPopup-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentSectionIndex</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>currentSectionIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>sectionCount</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>sectionCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TimeSpec">
            <name>timeSpec</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>timeSpec-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Section</name>
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AmPmSection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MSecSection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SecondSection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinuteSection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HourSection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DaySection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MonthSection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YearSection">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TimeSections_Mask">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DateSections_Mask">
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDateTimeEdit::Section">
            <name>Sections</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>Section-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTimeEdit</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>QDateTimeEdit</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTimeEdit</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>QDateTimeEdit-2</anchor>
            <arglist>(const QDateTime &amp;datetime, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTimeEdit</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>QDateTimeEdit-3</anchor>
            <arglist>(const QDate &amp;date, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTimeEdit</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>QDateTimeEdit-4</anchor>
            <arglist>(const QTime &amp;time, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDateTimeEdit</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>dtor.QDateTimeEdit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>dateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>dateTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>date</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>date-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>time</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>time-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>minimumDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumDateTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMinimumDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumDateTime-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumDateTime-prop</anchor>
            <arglist>(const QDateTime &amp;dt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>maximumDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumDateTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMaximumDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumDateTime-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumDateTime-prop</anchor>
            <arglist>(const QDateTime &amp;dt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDateTimeRange</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>setDateTimeRange</anchor>
            <arglist>(const QDateTime &amp;min, const QDateTime &amp;max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>minimumDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumDate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumDate-prop</anchor>
            <arglist>(const QDate &amp;min)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMinimumDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumDate-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>maximumDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumDate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumDate-prop</anchor>
            <arglist>(const QDate &amp;max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMaximumDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumDate-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDateRange</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>setDateRange</anchor>
            <arglist>(const QDate &amp;min, const QDate &amp;max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>minimumTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumTime-prop</anchor>
            <arglist>(const QTime &amp;min)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMinimumTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>minimumTime-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>maximumTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumTime-prop</anchor>
            <arglist>(const QTime &amp;max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMaximumTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>maximumTime-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeRange</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>setTimeRange</anchor>
            <arglist>(const QTime &amp;min, const QTime &amp;max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Sections</type>
            <name>displayedSections</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>displayedSections-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Section</type>
            <name>currentSection</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>currentSection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Section</type>
            <name>sectionAt</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>sectionAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentSection</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>currentSection-prop</anchor>
            <arglist>(Section section)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentSectionIndex</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>currentSectionIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentSectionIndex</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>currentSectionIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCalendarWidget *</type>
            <name>calendarWidget</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>calendarWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCalendarWidget</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>setCalendarWidget</anchor>
            <arglist>(QCalendarWidget *calendarWidget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sectionCount</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>sectionCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectedSection</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>setSelectedSection</anchor>
            <arglist>(Section section)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sectionText</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>sectionText</anchor>
            <arglist>(Section section) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayFormat</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>displayFormat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDisplayFormat</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>displayFormat-prop</anchor>
            <arglist>(const QString &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>calendarPopup</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>calendarPopup-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCalendarPopup</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>calendarPopup-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimeSpec</type>
            <name>timeSpec</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>timeSpec-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeSpec</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>timeSpec-prop</anchor>
            <arglist>(Qt::TimeSpec spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>stepBy</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>stepBy</anchor>
            <arglist>(int steps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dateTimeChanged</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>dateTime-prop</anchor>
            <arglist>(const QDateTime &amp;datetime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeChanged</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>time-prop</anchor>
            <arglist>(const QTime &amp;time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dateChanged</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>date-prop</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>dateTime-prop</anchor>
            <arglist>(const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>date-prop</anchor>
            <arglist>(const QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>time-prop</anchor>
            <arglist>(const QTime &amp;time)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;text, int &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fixup</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>fixup</anchor>
            <arglist>(QString &amp;input) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QDateTime</type>
            <name>dateTimeFromText</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>dateTimeFromText</anchor>
            <arglist>(const QString &amp;text) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>textFromDateTime</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>textFromDateTime</anchor>
            <arglist>(const QDateTime &amp;dateTime) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual StepEnabled</type>
            <name>stepEnabled</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>stepEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qdatetimeedit.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionSpinBox *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimeEdit</name>
        <filename>qtimeedit.html</filename>
        <base>QDateTimeEdit</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeEdit</name>
            <anchorfile>qtimeedit.html</anchorfile>
            <anchor>QTimeEdit</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeEdit</name>
            <anchorfile>qtimeedit.html</anchorfile>
            <anchor>QTimeEdit-2</anchor>
            <arglist>(const QTime &amp;time, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTimeEdit</name>
            <anchorfile>qtimeedit.html</anchorfile>
            <anchor>dtor.QTimeEdit</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDateEdit</name>
        <filename>qdateedit.html</filename>
        <base>QDateTimeEdit</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateEdit</name>
            <anchorfile>qdateedit.html</anchorfile>
            <anchor>QDateEdit</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateEdit</name>
            <anchorfile>qdateedit.html</anchorfile>
            <anchor>QDateEdit-2</anchor>
            <arglist>(const QDate &amp;date, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDateEdit</name>
            <anchorfile>qdateedit.html</anchorfile>
            <anchor>dtor.QDateEdit</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDial</name>
        <filename>qdial.html</filename>
        <base>QAbstractSlider</base>
        <member kind="property" type="bool">
            <name>wrapping</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>wrapping-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>notchSize</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>notchSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>notchTarget</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>notchTarget-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>notchesVisible</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>notchesVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDial</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>QDial</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDial</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>dtor.QDial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wrapping</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>wrapping-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>notchSize</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>notchSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotchTarget</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>notchTarget-prop</anchor>
            <arglist>(double target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>notchTarget</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>notchTarget-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>notchesVisible</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>notchesVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotchesVisible</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>notchesVisible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapping</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>wrapping-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *pe)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sliderChange</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>sliderChange</anchor>
            <arglist>(SliderChange change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qdial.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionSlider *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDialogButtonBox</name>
        <filename>qdialogbuttonbox.html</filename>
        <base>QWidget</base>
        <member kind="property" type="Qt::Orientation">
            <name>orientation</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StandardButtons">
            <name>standardButtons</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>standardButtons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>centerButtons</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>centerButtons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ButtonRole</name>
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AcceptRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RejectRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DestructiveRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HelpRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YesRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResetRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplyRole">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NRoles">
            <anchor>ButtonRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StandardButton</name>
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ok">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Save">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaveAll">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Open">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Yes">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YesToAll">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="No">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoToAll">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Abort">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Retry">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ignore">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Close">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cancel">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Discard">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Help">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Apply">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reset">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RestoreDefaults">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FirstButton">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastButton">
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDialogButtonBox::StandardButton">
            <name>StandardButtons</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>StandardButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ButtonLayout</name>
            <anchor>ButtonLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WinLayout">
            <anchor>ButtonLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MacLayout">
            <anchor>ButtonLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KdeLayout">
            <anchor>ButtonLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GnomeLayout">
            <anchor>ButtonLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDialogButtonBox</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>QDialogButtonBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDialogButtonBox</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>QDialogButtonBox-2</anchor>
            <arglist>(Qt::Orientation orientation, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDialogButtonBox</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>QDialogButtonBox-3</anchor>
            <arglist>(StandardButtons buttons, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDialogButtonBox</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>QDialogButtonBox-4</anchor>
            <arglist>(StandardButtons buttons, Qt::Orientation orientation, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDialogButtonBox</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>dtor.QDialogButtonBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>(Qt::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addButton</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>addButton</anchor>
            <arglist>(QAbstractButton *button, ButtonRole role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPushButton *</type>
            <name>addButton</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>addButton-2</anchor>
            <arglist>(const QString &amp;text, ButtonRole role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPushButton *</type>
            <name>addButton</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>addButton-3</anchor>
            <arglist>(StandardButton button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeButton</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>removeButton</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractButton *&gt;</type>
            <name>buttons</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ButtonRole</type>
            <name>buttonRole</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>buttonRole</anchor>
            <arglist>(QAbstractButton *button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardButtons</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>standardButtons-prop</anchor>
            <arglist>(StandardButtons buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StandardButtons</type>
            <name>standardButtons</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>standardButtons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StandardButton</type>
            <name>standardButton</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>standardButton</anchor>
            <arglist>(QAbstractButton *button) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPushButton *</type>
            <name>button</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>button</anchor>
            <arglist>(StandardButton which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenterButtons</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>centerButtons-prop</anchor>
            <arglist>(bool center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>centerButtons</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>centerButtons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(QAbstractButton *button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accepted</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>accepted</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>helpRequested</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>helpRequested</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rejected</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>rejected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qdialogbuttonbox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDockWidget</name>
        <filename>qdockwidget.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>floating</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>floating-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="DockWidgetFeatures">
            <name>features</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>features-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::DockWidgetAreas">
            <name>allowedAreas</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>allowedAreas-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>windowTitle</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>windowTitle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDockWidget</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>QDockWidget</anchor>
            <arglist>(const QString &amp;title, QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDockWidget</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>QDockWidget-2</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDockWidget</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>dtor.QDockWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidget</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>setWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="enum">
            <name>DockWidgetFeature</name>
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DockWidgetClosable">
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DockWidgetMovable">
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DockWidgetFloatable">
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DockWidgetVerticalTitleBar">
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DockWidgetFeatureMask">
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllDockWidgetFeatures">
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDockWidgetFeatures">
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reserved">
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDockWidget::DockWidgetFeature">
            <name>DockWidgetFeatures</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>DockWidgetFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFeatures</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>features-prop</anchor>
            <arglist>(DockWidgetFeatures features)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DockWidgetFeatures</type>
            <name>features</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>features-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFloating</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>floating-prop</anchor>
            <arglist>(bool floating)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFloating</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>floating-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllowedAreas</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>allowedAreas-prop</anchor>
            <arglist>(Qt::DockWidgetAreas areas)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DockWidgetAreas</type>
            <name>allowedAreas</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>allowedAreas-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitleBarWidget</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>setTitleBarWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>titleBarWidget</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>titleBarWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAreaAllowed</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>isAreaAllowed</anchor>
            <arglist>(Qt::DockWidgetArea area) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>toggleViewAction</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>toggleViewAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>featuresChanged</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>features-prop</anchor>
            <arglist>(QDockWidget::DockWidgetFeatures features)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topLevelChanged</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>topLevelChanged</anchor>
            <arglist>(bool topLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allowedAreasChanged</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>allowedAreas-prop</anchor>
            <arglist>(Qt::DockWidgetAreas allowedAreas)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibilityChanged</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>visibilityChanged</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dockLocationChanged</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>dockLocationChanged</anchor>
            <arglist>(Qt::DockWidgetArea area)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEvent</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>closeEvent</anchor>
            <arglist>(QCloseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qdockwidget.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionDockWidget *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFocusFrame</name>
        <filename>qfocusframe.html</filename>
        <base>QWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFocusFrame</name>
            <anchorfile>qfocusframe.html</anchorfile>
            <anchor>QFocusFrame</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFocusFrame</name>
            <anchorfile>qfocusframe.html</anchorfile>
            <anchor>dtor.QFocusFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidget</name>
            <anchorfile>qfocusframe.html</anchorfile>
            <anchor>setWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qfocusframe.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qfocusframe.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qfocusframe.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *o, QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qfocusframe.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qfocusframe.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOption *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontComboBox</name>
        <filename>qfontcombobox.html</filename>
        <base>QComboBox</base>
        <member kind="property" type="QFontDatabase::WritingSystem">
            <name>writingSystem</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>writingSystem-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="FontFilters">
            <name>fontFilters</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>fontFilters-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>currentFont</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>currentFont-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontComboBox</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>QFontComboBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFontComboBox</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>dtor.QFontComboBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWritingSystem</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>writingSystem-prop</anchor>
            <arglist>(QFontDatabase::WritingSystem script)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontDatabase::WritingSystem</type>
            <name>writingSystem</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>writingSystem-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>FontFilter</name>
            <anchor>FontFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllFonts">
            <anchor>FontFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScalableFonts">
            <anchor>FontFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonScalableFonts">
            <anchor>FontFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MonospacedFonts">
            <anchor>FontFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProportionalFonts">
            <anchor>FontFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QFontComboBox::FontFilter">
            <name>FontFilters</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>FontFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontFilters</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>fontFilters-prop</anchor>
            <arglist>(FontFilters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FontFilters</type>
            <name>fontFilters</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>fontFilters-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>currentFont</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>currentFont-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentFont</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>currentFont-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentFontChanged</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>currentFont-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qfontcombobox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFrame</name>
        <filename>qframe.html</filename>
        <base>QWidget</base>
        <member kind="property" type="Shape">
            <name>frameShape</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameShape-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Shadow">
            <name>frameShadow</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameShadow-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>lineWidth</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>lineWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>midLineWidth</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>midLineWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>frameWidth</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>frameRect</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrame</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>QFrame</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFrame</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>dtor.QFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameStyle</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameStyle</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>setFrameStyle</anchor>
            <arglist>(int style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameWidth</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Shape</name>
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFrame">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Box">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Panel">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WinPanel">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HLine">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VLine">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StyledPanel">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Shadow</name>
            <anchor>Shadow-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Plain">
            <anchor>Shadow-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Raised">
            <anchor>Shadow-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sunken">
            <anchor>Shadow-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleMask</name>
            <anchor>StyleMask-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Shadow_Mask">
            <anchor>StyleMask-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Shape_Mask">
            <anchor>StyleMask-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Shape</type>
            <name>frameShape</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameShape-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameShape</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameShape-prop</anchor>
            <arglist>(Shape )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Shadow</type>
            <name>frameShadow</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameShadow-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameShadow</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameShadow-prop</anchor>
            <arglist>(Shadow )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineWidth</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>lineWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineWidth</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>lineWidth-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>midLineWidth</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>midLineWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMidLineWidth</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>midLineWidth-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>frameRect</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameRect-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameRect</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>frameRect-prop</anchor>
            <arglist>(const QRect &amp;)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qframe.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionFrame *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGroupBox</name>
        <filename>qgroupbox.html</filename>
        <base>QWidget</base>
        <member kind="property" type="QString">
            <name>title</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>alignment</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>flat</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>flat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>checkable</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>checked</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGroupBox</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>QGroupBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGroupBox</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>QGroupBox-2</anchor>
            <arglist>(const QString &amp;title, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGroupBox</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>dtor.QGroupBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>(int alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFlat</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>flat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlat</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>flat-prop</anchor>
            <arglist>(bool flat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCheckable</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckable</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>checkable-prop</anchor>
            <arglist>(bool checkable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isChecked</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChecked</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>(bool checked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(bool checked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggled</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>checked-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>childEvent</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>childEvent</anchor>
            <arglist>(QChildEvent *c)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *fe)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qgroupbox.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionGroupBox *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QKeySequenceEdit</name>
        <filename>qkeysequenceedit.html</filename>
        <base>QWidget</base>
        <member kind="property" type="QKeySequence">
            <name>keySequence</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>keySequence-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequenceEdit</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>QKeySequenceEdit</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequenceEdit</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>QKeySequenceEdit-2</anchor>
            <arglist>(const QKeySequence &amp;keySequence, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QKeySequenceEdit</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>dtor.QKeySequenceEdit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeySequence</type>
            <name>keySequence</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>keySequence-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeySequence</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>keySequence-prop</anchor>
            <arglist>(const QKeySequence &amp;keySequence)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>editingFinished</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>editingFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>keySequenceChanged</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>keySequence-prop</anchor>
            <arglist>(const QKeySequence &amp;keySequence)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qkeysequenceedit.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLabel</name>
        <filename>qlabel.html</filename>
        <base>QFrame</base>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextFormat">
            <name>textFormat</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>textFormat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPixmap">
            <name>pixmap</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>pixmap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>scaledContents</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>scaledContents-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>alignment</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wordWrap</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>margin</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>margin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>indent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>indent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>openExternalLinks</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextInteractionFlags">
            <name>textInteractionFlags</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasSelectedText</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>hasSelectedText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>selectedText</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>selectedText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLabel</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>QLabel</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLabel</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>QLabel-2</anchor>
            <arglist>(const QString &amp;text, QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLabel</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>dtor.QLabel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPixmap *</type>
            <name>pixmap</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>pixmap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPicture *</type>
            <name>picture</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>picture</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMovie *</type>
            <name>movie</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>movie</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextFormat</type>
            <name>textFormat</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>textFormat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextFormat</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>textFormat-prop</anchor>
            <arglist>(Qt::TextFormat )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>(Qt::Alignment )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWordWrap</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wordWrap</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>wordWrap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>indent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>indent-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>margin</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>margin-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMargin</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>margin-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasScaledContents</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>scaledContents-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaledContents</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>scaledContents-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuddy</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>setBuddy</anchor>
            <arglist>(QWidget *buddy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>buddy</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>buddy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>openExternalLinks</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpenExternalLinks</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist>(bool open)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextInteractionFlags</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist>(Qt::TextInteractionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextInteractionFlags</type>
            <name>textInteractionFlags</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelection</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(int start, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSelectedText</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>hasSelectedText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>selectedText</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>selectedText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>selectionStart</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>selectionStart</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>pixmap-prop</anchor>
            <arglist>(const QPixmap &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPicture</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>setPicture</anchor>
            <arglist>(const QPicture &amp;picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMovie</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>setMovie</anchor>
            <arglist>(QMovie *movie)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNum</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>setNum</anchor>
            <arglist>(int num)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNum</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>setNum-2</anchor>
            <arglist>(double num)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linkActivated</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>linkActivated</anchor>
            <arglist>(const QString &amp;link)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linkHovered</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>linkHovered</anchor>
            <arglist>(const QString &amp;link)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qlabel.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLCDNumber</name>
        <filename>qlcdnumber.html</filename>
        <base>QFrame</base>
        <member kind="property" type="bool">
            <name>smallDecimalPoint</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>smallDecimalPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>digitCount</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>digitCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Mode">
            <name>mode</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SegmentStyle">
            <name>segmentStyle</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>segmentStyle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>value</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>intValue</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>intValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLCDNumber</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>QLCDNumber</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLCDNumber</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>QLCDNumber-2</anchor>
            <arglist>(uint numDigits, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLCDNumber</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>dtor.QLCDNumber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Mode</name>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hex">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dec">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Oct">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bin">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SegmentStyle</name>
            <anchor>SegmentStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Outline">
            <anchor>SegmentStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Filled">
            <anchor>SegmentStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Flat">
            <anchor>SegmentStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>smallDecimalPoint</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>smallDecimalPoint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>digitCount</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>digitCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDigitCount</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>digitCount-prop</anchor>
            <arglist>(int numDigits)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>checkOverflow</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>checkOverflow</anchor>
            <arglist>(double num) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>checkOverflow</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>checkOverflow-2</anchor>
            <arglist>(int num) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Mode</type>
            <name>mode</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMode</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(Mode )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SegmentStyle</type>
            <name>segmentStyle</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>segmentStyle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSegmentStyle</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>segmentStyle-prop</anchor>
            <arglist>(SegmentStyle )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>value</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>intValue</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>intValue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>display</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QString &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>display</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(int num)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>display</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(double num)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHexMode</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>setHexMode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDecMode</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>setDecMode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOctMode</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>setOctMode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBinMode</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>setBinMode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSmallDecimalPoint</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>smallDecimalPoint-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>overflow</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>overflow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qlcdnumber.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLineEdit</name>
        <filename>qlineedit.html</filename>
        <base>QWidget</base>
        <member kind="property" type="QString">
            <name>inputMask</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>inputMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxLength</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>maxLength-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>frame</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="EchoMode">
            <name>echoMode</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>echoMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>displayText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>displayText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>cursorPosition</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorPosition-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>alignment</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>modified</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasSelectedText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>hasSelectedText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>selectedText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>selectedText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dragEnabled</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>readOnly</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>undoAvailable</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>undoAvailable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>redoAvailable</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>redoAvailable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>acceptableInput</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>acceptableInput-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>placeholderText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::CursorMoveStyle">
            <name>cursorMoveStyle</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorMoveStyle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>clearButtonEnabled</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>clearButtonEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ActionPosition</name>
            <anchor>ActionPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeadingPosition">
            <anchor>ActionPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrailingPosition">
            <anchor>ActionPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineEdit</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>QLineEdit</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineEdit</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>QLineEdit-2</anchor>
            <arglist>(const QString &amp;contents, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLineEdit</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>dtor.QLineEdit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>displayText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>placeholderText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaceholderText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxLength</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>maxLength-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxLength</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>maxLength-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrame</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFrame</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>frame-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearButtonEnabled</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>clearButtonEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClearButtonEnabled</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>clearButtonEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>EchoMode</name>
            <anchor>EchoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Normal">
            <anchor>EchoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoEcho">
            <anchor>EchoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Password">
            <anchor>EchoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PasswordEchoOnEdit">
            <anchor>EchoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>EchoMode</type>
            <name>echoMode</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>echoMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEchoMode</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>echoMode-prop</anchor>
            <arglist>(EchoMode )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadOnly</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValidator</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>setValidator</anchor>
            <arglist>(const QValidator *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QValidator *</type>
            <name>validator</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>validator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompleter</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>setCompleter</anchor>
            <arglist>(QCompleter *c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCompleter *</type>
            <name>completer</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>completer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorPosition</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorPosition-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursorPosition</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorPosition-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorPositionAt</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorPositionAt</anchor>
            <arglist>(const QPoint &amp;pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>(Qt::Alignment flag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorForward</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorForward</anchor>
            <arglist>(bool mark, int steps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorBackward</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorBackward</anchor>
            <arglist>(bool mark, int steps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorWordForward</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorWordForward</anchor>
            <arglist>(bool mark)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorWordBackward</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorWordBackward</anchor>
            <arglist>(bool mark)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backspace</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>backspace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>del</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>del</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>home</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>home</anchor>
            <arglist>(bool mark)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>end</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>end</anchor>
            <arglist>(bool mark)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isModified</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModified</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelection</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(int start, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSelectedText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>hasSelectedText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>selectedText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>selectedText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>selectionStart</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>selectionStart</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndoAvailable</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>undoAvailable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRedoAvailable</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>redoAvailable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragEnabled</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>dragEnabled</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursorMoveStyle</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorMoveStyle-prop</anchor>
            <arglist>(Qt::CursorMoveStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CursorMoveStyle</type>
            <name>cursorMoveStyle</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorMoveStyle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>inputMask</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>inputMask-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputMask</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>inputMask-prop</anchor>
            <arglist>(const QString &amp;inputMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAcceptableInput</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>acceptableInput-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextMargins</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>setTextMargins</anchor>
            <arglist>(int left, int top, int right, int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextMargins</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>setTextMargins-2</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getTextMargins</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>getTextMargins</anchor>
            <arglist>(int *left, int *top, int *right, int *bottom) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>textMargins</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>textMargins</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAction</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(QAction *action, ActionPosition position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>addAction-2</anchor>
            <arglist>(const QIcon &amp;icon, ActionPosition position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectAll</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>selectAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>undo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>redo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cut</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cut</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paste</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>paste</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deselect</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>deselect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp;newText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>createStandardContextMenu</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>createStandardContextMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textEdited</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>textEdited</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorPositionChanged</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorPositionChanged</anchor>
            <arglist>(int old, int new)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>returnPressed</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>returnPressed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>editingFinished</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>editingFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionFrame *option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery property) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QRect</type>
            <name>cursorRect</name>
            <anchorfile>qlineedit.html</anchorfile>
            <anchor>cursorRect</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMacCocoaViewContainer</name>
        <filename>qmaccocoaviewcontainer.html</filename>
        <base>QWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMacCocoaViewContainer</name>
            <anchorfile>qmaccocoaviewcontainer.html</anchorfile>
            <anchor>QMacCocoaViewContainer</anchor>
            <arglist>(NSView *cocoaViewToWrap, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMacCocoaViewContainer</name>
            <anchorfile>qmaccocoaviewcontainer.html</anchorfile>
            <anchor>dtor.QMacCocoaViewContainer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCocoaView</name>
            <anchorfile>qmaccocoaviewcontainer.html</anchorfile>
            <anchor>setCocoaView</anchor>
            <arglist>(NSView *view)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSView *</type>
            <name>cocoaView</name>
            <anchorfile>qmaccocoaviewcontainer.html</anchorfile>
            <anchor>cocoaView</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMacNativeWidget</name>
        <filename>qmacnativewidget.html</filename>
        <base>QWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMacNativeWidget</name>
            <anchorfile>qmacnativewidget.html</anchorfile>
            <anchor>QMacNativeWidget</anchor>
            <arglist>(NSView *parentView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMacNativeWidget</name>
            <anchorfile>qmacnativewidget.html</anchorfile>
            <anchor>dtor.QMacNativeWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qmacnativewidget.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSView *</type>
            <name>nativeView</name>
            <anchorfile>qmacnativewidget.html</anchorfile>
            <anchor>nativeView</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qmacnativewidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMainWindow</name>
        <filename>qmainwindow.html</filename>
        <base>QWidget</base>
        <member kind="property" type="QSize">
            <name>iconSize</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ToolButtonStyle">
            <name>toolButtonStyle</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>animated</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>documentMode</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTabWidget::TabShape">
            <name>tabShape</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dockNestingEnabled</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>dockNestingEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="DockOptions">
            <name>dockOptions</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>dockOptions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>unifiedTitleAndToolBarOnMac</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>unifiedTitleAndToolBarOnMac-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DockOption</name>
            <anchor>DockOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnimatedDocks">
            <anchor>DockOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllowNestedDocks">
            <anchor>DockOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllowTabbedDocks">
            <anchor>DockOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForceTabbedDocks">
            <anchor>DockOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerticalTabs">
            <anchor>DockOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMainWindow::DockOption">
            <name>DockOptions</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>DockOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMainWindow</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>QMainWindow</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMainWindow</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>dtor.QMainWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>iconSize</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconSize</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;iconSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ToolButtonStyle</type>
            <name>toolButtonStyle</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolButtonStyle</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist>(Qt::ToolButtonStyle toolButtonStyle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnimated</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDockNestingEnabled</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>dockNestingEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>documentMode</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentMode</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTabWidget::TabShape</type>
            <name>tabShape</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabShape</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist>(QTabWidget::TabShape tabShape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTabWidget::TabPosition</type>
            <name>tabPosition</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>tabPosition</anchor>
            <arglist>(Qt::DockWidgetArea area) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabPosition</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>setTabPosition</anchor>
            <arglist>(Qt::DockWidgetAreas areas, QTabWidget::TabPosition tabPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDockOptions</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>dockOptions-prop</anchor>
            <arglist>(DockOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DockOptions</type>
            <name>dockOptions</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>dockOptions-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenuBar *</type>
            <name>menuBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>menuBar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMenuBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>setMenuBar</anchor>
            <arglist>(QMenuBar *menuBar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>menuWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>menuWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMenuWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>setMenuWidget</anchor>
            <arglist>(QWidget *menuBar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStatusBar *</type>
            <name>statusBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>statusBar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatusBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>setStatusBar</anchor>
            <arglist>(QStatusBar *statusbar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>centralWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>centralWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCentralWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>setCentralWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>takeCentralWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>takeCentralWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCorner</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>setCorner</anchor>
            <arglist>(Qt::Corner corner, Qt::DockWidgetArea area)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DockWidgetArea</type>
            <name>corner</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>corner</anchor>
            <arglist>(Qt::Corner corner) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addToolBarBreak</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>addToolBarBreak</anchor>
            <arglist>(Qt::ToolBarArea area)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertToolBarBreak</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>insertToolBarBreak</anchor>
            <arglist>(QToolBar *before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addToolBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>addToolBar</anchor>
            <arglist>(Qt::ToolBarArea area, QToolBar *toolbar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addToolBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>addToolBar-2</anchor>
            <arglist>(QToolBar *toolbar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QToolBar *</type>
            <name>addToolBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>addToolBar-3</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertToolBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>insertToolBar</anchor>
            <arglist>(QToolBar *before, QToolBar *toolbar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeToolBar</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>removeToolBar</anchor>
            <arglist>(QToolBar *toolbar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeToolBarBreak</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>removeToolBarBreak</anchor>
            <arglist>(QToolBar *before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unifiedTitleAndToolBarOnMac</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>unifiedTitleAndToolBarOnMac-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ToolBarArea</type>
            <name>toolBarArea</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>toolBarArea</anchor>
            <arglist>(QToolBar *toolbar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toolBarBreak</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>toolBarBreak</anchor>
            <arglist>(QToolBar *toolbar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDockWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>addDockWidget</anchor>
            <arglist>(Qt::DockWidgetArea area, QDockWidget *dockwidget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDockWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>addDockWidget-2</anchor>
            <arglist>(Qt::DockWidgetArea area, QDockWidget *dockwidget, Qt::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>splitDockWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>splitDockWidget</anchor>
            <arglist>(QDockWidget *first, QDockWidget *second, Qt::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabifyDockWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>tabifyDockWidget</anchor>
            <arglist>(QDockWidget *first, QDockWidget *second)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDockWidget *&gt;</type>
            <name>tabifiedDockWidgets</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>tabifiedDockWidgets</anchor>
            <arglist>(QDockWidget *dockwidget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeDockWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>removeDockWidget</anchor>
            <arglist>(QDockWidget *dockwidget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>restoreDockWidget</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>restoreDockWidget</anchor>
            <arglist>(QDockWidget *dockwidget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DockWidgetArea</type>
            <name>dockWidgetArea</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>dockWidgetArea</anchor>
            <arglist>(QDockWidget *dockwidget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>saveState</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>saveState</anchor>
            <arglist>(int version) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>restoreState</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>restoreState</anchor>
            <arglist>(const QByteArray &amp;state, int version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMenu *</type>
            <name>createPopupMenu</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>createPopupMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimated</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>animated-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDockNestingEnabled</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>dockNestingEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnifiedTitleAndToolBarOnMac</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>unifiedTitleAndToolBarOnMac-prop</anchor>
            <arglist>(bool set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>iconSizeChanged</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>iconSizeChanged</anchor>
            <arglist>(const QSize &amp;iconSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toolButtonStyleChanged</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>toolButtonStyleChanged</anchor>
            <arglist>(Qt::ToolButtonStyle toolButtonStyle)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qmainwindow.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMdiArea</name>
        <filename>qmdiarea.html</filename>
        <base>QAbstractScrollArea</base>
        <member kind="property" type="QBrush">
            <name>background</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>background-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WindowOrder">
            <name>activationOrder</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>activationOrder-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ViewMode">
            <name>viewMode</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>documentMode</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>tabsClosable</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>tabsMovable</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabsMovable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTabWidget::TabShape">
            <name>tabShape</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTabWidget::TabPosition">
            <name>tabPosition</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabPosition-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AreaOption</name>
            <anchor>AreaOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontMaximizeSubWindowOnActivation">
            <anchor>AreaOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMdiArea::AreaOption">
            <name>AreaOptions</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>AreaOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>WindowOrder</name>
            <anchor>WindowOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CreationOrder">
            <anchor>WindowOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StackingOrder">
            <anchor>WindowOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActivationHistoryOrder">
            <anchor>WindowOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ViewMode</name>
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubWindowView">
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabbedView">
            <anchor>ViewMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMdiArea</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>QMdiArea</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMdiArea</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>dtor.QMdiArea</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMdiSubWindow *</type>
            <name>currentSubWindow</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>currentSubWindow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMdiSubWindow *</type>
            <name>activeSubWindow</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>activeSubWindow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QMdiSubWindow *&gt;</type>
            <name>subWindowList</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>subWindowList</anchor>
            <arglist>(WindowOrder order) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMdiSubWindow *</type>
            <name>addSubWindow</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>addSubWindow</anchor>
            <arglist>(QWidget *widget, Qt::WindowFlags windowFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeSubWindow</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>removeSubWindow</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>background</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>background-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>background-prop</anchor>
            <arglist>(const QBrush &amp;background)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WindowOrder</type>
            <name>activationOrder</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>activationOrder-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActivationOrder</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>activationOrder-prop</anchor>
            <arglist>(WindowOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(AreaOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(AreaOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewMode</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist>(ViewMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ViewMode</type>
            <name>viewMode</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>viewMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>documentMode</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentMode</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabsClosable</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist>(bool closable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabsClosable</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabsMovable</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabsMovable-prop</anchor>
            <arglist>(bool movable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabsMovable</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabsMovable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabShape</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist>(QTabWidget::TabShape shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTabWidget::TabShape</type>
            <name>tabShape</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabPosition</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabPosition-prop</anchor>
            <arglist>(QTabWidget::TabPosition position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTabWidget::TabPosition</type>
            <name>tabPosition</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tabPosition-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>subWindowActivated</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>subWindowActivated</anchor>
            <arglist>(QMdiSubWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveSubWindow</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>setActiveSubWindow</anchor>
            <arglist>(QMdiSubWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tileSubWindows</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>tileSubWindows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cascadeSubWindows</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>cascadeSubWindows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeActiveSubWindow</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>closeActiveSubWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeAllSubWindows</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>closeAllSubWindows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activateNextSubWindow</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>activateNextSubWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activatePreviousSubWindow</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>activatePreviousSubWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setupViewport</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>setupViewport</anchor>
            <arglist>(QWidget *viewport)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *object, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *paintEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>childEvent</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>childEvent</anchor>
            <arglist>(QChildEvent *childEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *resizeEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *timerEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *showEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>viewportEvent</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>viewportEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollContentsBy</name>
            <anchorfile>qmdiarea.html</anchorfile>
            <anchor>scrollContentsBy</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMdiSubWindow</name>
        <filename>qmdisubwindow.html</filename>
        <base>QWidget</base>
        <member kind="property" type="int">
            <name>keyboardSingleStep</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>keyboardSingleStep-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>keyboardPageStep</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>keyboardPageStep-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SubWindowOption</name>
            <anchor>SubWindowOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllowOutsideAreaHorizontally">
            <anchor>SubWindowOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllowOutsideAreaVertically">
            <anchor>SubWindowOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RubberBandResize">
            <anchor>SubWindowOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RubberBandMove">
            <anchor>SubWindowOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMdiSubWindow::SubWindowOption">
            <name>SubWindowOptions</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>SubWindowOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMdiSubWindow</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>QMdiSubWindow</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMdiSubWindow</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>dtor.QMdiSubWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidget</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>setWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isShaded</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>isShaded</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(SubWindowOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(SubWindowOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyboardSingleStep</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>keyboardSingleStep-prop</anchor>
            <arglist>(int step)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyboardSingleStep</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>keyboardSingleStep-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyboardPageStep</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>keyboardPageStep-prop</anchor>
            <arglist>(int step)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyboardPageStep</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>keyboardPageStep-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSystemMenu</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>setSystemMenu</anchor>
            <arglist>(QMenu *systemMenu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>systemMenu</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>systemMenu</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMdiArea *</type>
            <name>mdiArea</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>mdiArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowStateChanged</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>windowStateChanged</anchor>
            <arglist>(Qt::WindowStates oldState, Qt::WindowStates newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToActivate</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>aboutToActivate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showSystemMenu</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>showSystemMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showShaded</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>showShaded</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *object, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *showEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *hideEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *changeEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>closeEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>closeEvent</anchor>
            <arglist>(QCloseEvent *closeEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>leaveEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>leaveEvent</anchor>
            <arglist>(QEvent *leaveEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *resizeEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *timerEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>moveEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>moveEvent</anchor>
            <arglist>(QMoveEvent *moveEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *paintEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *keyEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *contextMenuEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *focusInEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *focusOutEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>childEvent</name>
            <anchorfile>qmdisubwindow.html</anchorfile>
            <anchor>childEvent</anchor>
            <arglist>(QChildEvent *childEvent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMenu</name>
        <filename>qmenu.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>tearOffEnabled</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>tearOffEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>title</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QIcon">
            <name>icon</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>separatorsCollapsible</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>separatorsCollapsible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>toolTipsVisible</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>toolTipsVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>QMenu</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>QMenu-2</anchor>
            <arglist>(const QString &amp;title, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>dtor.QMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addAction-2</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addAction-3</anchor>
            <arglist>(const QString &amp;text, const QObject *receiver, const char *member, const QKeySequence &amp;shortcut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addAction-4</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text, const QObject *receiver, const char *member, const QKeySequence &amp;shortcut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addMenu</anchor>
            <arglist>(QMenu *menu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>addMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addMenu-2</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>addMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addMenu-3</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addSeparator</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addSeparator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addSection</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addSection</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addSection</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>addSection-2</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>insertMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>insertMenu</anchor>
            <arglist>(QAction *before, QMenu *menu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>insertSeparator</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>insertSeparator</anchor>
            <arglist>(QAction *before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>insertSection</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>insertSection</anchor>
            <arglist>(QAction *before, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>insertSection</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>insertSection-2</anchor>
            <arglist>(QAction *before, const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTearOffEnabled</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>tearOffEnabled-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTearOffEnabled</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>tearOffEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTearOffMenuVisible</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>isTearOffMenuVisible</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hideTearOffMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>hideTearOffMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>setDefaultAction</anchor>
            <arglist>(QAction *act)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>defaultAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>defaultAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>setActiveAction</anchor>
            <arglist>(QAction *act)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>activeAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>activeAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>popup</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>popup</anchor>
            <arglist>(const QPoint &amp;p, QAction *atAction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>exec</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>exec</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>exec-2</anchor>
            <arglist>(const QPoint &amp;p, QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAction *</type>
            <name>exec</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>exec-3</anchor>
            <arglist>(const QList&lt;QAction *&gt; &amp;actions, const QPoint &amp;pos, QAction *at, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>actionGeometry</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>actionGeometry</anchor>
            <arglist>(QAction *act) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>actionAt</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>actionAt</anchor>
            <arglist>(const QPoint &amp;pt) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>menuAction</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>menuAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>icon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSMenu *</type>
            <name>toNSMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>toNSMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAsDockMenu</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>setAsDockMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>separatorsCollapsible</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>separatorsCollapsible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSeparatorsCollapsible</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>separatorsCollapsible-prop</anchor>
            <arglist>(bool collapse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toolTipsVisible</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>toolTipsVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTipsVisible</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>toolTipsVisible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToShow</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>aboutToShow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToHide</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>aboutToHide</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggered</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>triggered</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hovered</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>hovered</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>enterEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>enterEvent</anchor>
            <arglist>(QEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>leaveEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>leaveEvent</anchor>
            <arglist>(QEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>actionEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>actionEvent</anchor>
            <arglist>(QActionEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qmenu.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionMenuItem *option, const QAction *action) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMenuBar</name>
        <filename>qmenubar.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>defaultUp</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>defaultUp-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>nativeMenuBar</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>nativeMenuBar-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMenuBar</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>QMenuBar</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMenuBar</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>dtor.QMenuBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>addAction-2</anchor>
            <arglist>(const QString &amp;text, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addMenu</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>addMenu</anchor>
            <arglist>(QMenu *menu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>addMenu</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>addMenu-2</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>addMenu</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>addMenu-3</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addSeparator</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>addSeparator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>insertSeparator</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>insertSeparator</anchor>
            <arglist>(QAction *before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>insertMenu</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>insertMenu</anchor>
            <arglist>(QAction *before, QMenu *menu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>activeAction</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>activeAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveAction</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>setActiveAction</anchor>
            <arglist>(QAction *act)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultUp</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>defaultUp-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDefaultUp</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>defaultUp-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>actionGeometry</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>actionGeometry</anchor>
            <arglist>(QAction *act) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>actionAt</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>actionAt</anchor>
            <arglist>(const QPoint &amp;pt) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCornerWidget</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>setCornerWidget</anchor>
            <arglist>(QWidget *widget, Qt::Corner corner)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>cornerWidget</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>cornerWidget</anchor>
            <arglist>(Qt::Corner corner) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultAction</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>setDefaultAction</anchor>
            <arglist>(QAction *act)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>defaultAction</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>defaultAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSMenu *</type>
            <name>toNSMenu</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>toNSMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNativeMenuBar</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>nativeMenuBar-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeMenuBar</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>nativeMenuBar-prop</anchor>
            <arglist>(bool nativeMenuBar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggered</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>triggered</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hovered</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>hovered</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>leaveEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>leaveEvent</anchor>
            <arglist>(QEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>actionEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>actionEvent</anchor>
            <arglist>(QActionEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *object, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qmenubar.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionMenuItem *option, const QAction *action) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlainTextEdit</name>
        <filename>qplaintextedit.html</filename>
        <base>QAbstractScrollArea</base>
        <member kind="property" type="bool">
            <name>tabChangesFocus</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>tabChangesFocus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>documentTitle</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>documentTitle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>undoRedoEnabled</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="LineWrapMode">
            <name>lineWrapMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>lineWrapMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTextOption::WrapMode">
            <name>wordWrapMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>wordWrapMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>readOnly</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>plainText</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>plainText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>overwriteMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>overwriteMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>tabStopWidth</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>tabStopWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>cursorWidth</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextInteractionFlags">
            <name>textInteractionFlags</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>blockCount</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>blockCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumBlockCount</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>backgroundVisible</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>backgroundVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>centerOnScroll</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>centerOnScroll-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>placeholderText</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LineWrapMode</name>
            <anchor>LineWrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoWrap">
            <anchor>LineWrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WidgetWidth">
            <anchor>LineWrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlainTextEdit</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>QPlainTextEdit</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlainTextEdit</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>QPlainTextEdit-2</anchor>
            <arglist>(const QString &amp;text, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlainTextEdit</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>dtor.QPlainTextEdit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocument</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>setDocument</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaceholderText</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist>(const QString &amp;placeholderText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>placeholderText</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextCursor</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>setTextCursor</anchor>
            <arglist>(const QTextCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>textCursor</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>textCursor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadOnly</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>(bool ro)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextInteractionFlags</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist>(Qt::TextInteractionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextInteractionFlags</type>
            <name>textInteractionFlags</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeCurrentCharFormat</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>mergeCurrentCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp;modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentCharFormat</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>setCurrentCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>currentCharFormat</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>currentCharFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabChangesFocus</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>tabChangesFocus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabChangesFocus</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>tabChangesFocus-prop</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentTitle</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>documentTitle-prop</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>documentTitle</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>documentTitle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndoRedoEnabled</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUndoRedoEnabled</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumBlockCount</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist>(int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumBlockCount</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LineWrapMode</type>
            <name>lineWrapMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>lineWrapMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineWrapMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>lineWrapMode-prop</anchor>
            <arglist>(LineWrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption::WrapMode</type>
            <name>wordWrapMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>wordWrapMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWordWrapMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>wordWrapMode-prop</anchor>
            <arglist>(QTextOption::WrapMode policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundVisible</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>backgroundVisible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>backgroundVisible</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>backgroundVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenterOnScroll</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>centerOnScroll-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>centerOnScroll</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>centerOnScroll-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QString &amp;exp, QTextDocument::FindFlags options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const QRegExp &amp;exp, QTextDocument::FindFlags options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toPlainText</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>plainText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureCursorVisible</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>ensureCursorVisible</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>loadResource</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>loadResource</anchor>
            <arglist>(int type, const QUrl &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>createStandardContextMenu</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>createStandardContextMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>createStandardContextMenu</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>createStandardContextMenu-2</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>cursorForPosition</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>cursorForPosition</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>cursorRect</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>cursorRect</anchor>
            <arglist>(const QTextCursor &amp;cursor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>cursorRect</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>cursorRect-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>anchorAt</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>anchorAt</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>overwriteMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>overwriteMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOverwriteMode</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>overwriteMode-prop</anchor>
            <arglist>(bool overwrite)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>tabStopWidth</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>tabStopWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabStopWidth</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>tabStopWidth-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorWidth</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursorWidth</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtraSelections</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>setExtraSelections</anchor>
            <arglist>(const QList&lt;QTextEdit::ExtraSelection&gt; &amp;selections)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTextEdit::ExtraSelection&gt;</type>
            <name>extraSelections</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>extraSelections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveCursor</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>moveCursor</anchor>
            <arglist>(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canPaste</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>canPaste</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>print</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>print</anchor>
            <arglist>(QPagedPaintDevice *printer) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockCount</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>blockCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery property) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlainText</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>plainText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cut</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>cut</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paste</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>paste</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>undo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>redo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectAll</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>selectAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertPlainText</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>insertPlainText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendPlainText</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>appendPlainText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendHtml</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>appendHtml</anchor>
            <arglist>(const QString &amp;html)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>centerCursor</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>centerCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zoomIn</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>zoomIn</anchor>
            <arglist>(int range)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zoomOut</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>zoomOut</anchor>
            <arglist>(int range)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>plainText-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undoAvailable</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>undoAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redoAvailable</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>redoAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyAvailable</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>copyAvailable</anchor>
            <arglist>(bool yes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorPositionChanged</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>cursorPositionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateRequest</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>updateRequest</anchor>
            <arglist>(const QRect &amp;rect, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blockCountChanged</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>blockCountChanged</anchor>
            <arglist>(int newBlockCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modificationChanged</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>modificationChanged</anchor>
            <arglist>(bool changed)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>createMimeDataFromSelection</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>createMimeDataFromSelection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canInsertFromMimeData</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>canInsertFromMimeData</anchor>
            <arglist>(const QMimeData *source) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>insertFromMimeData</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>insertFromMimeData</anchor>
            <arglist>(const QMimeData *source)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollContentsBy</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>scrollContentsBy</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>firstVisibleBlock</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>firstVisibleBlock</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QPointF</type>
            <name>contentOffset</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>contentOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QRectF</type>
            <name>blockBoundingRect</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>blockBoundingRect</anchor>
            <arglist>(const QTextBlock &amp;block) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QRectF</type>
            <name>blockBoundingGeometry</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>blockBoundingGeometry</anchor>
            <arglist>(const QTextBlock &amp;block) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QAbstractTextDocumentLayout::PaintContext</type>
            <name>getPaintContext</name>
            <anchorfile>qplaintextedit.html</anchorfile>
            <anchor>getPaintContext</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlainTextDocumentLayout</name>
        <filename>qplaintextdocumentlayout.html</filename>
        <base>QAbstractTextDocumentLayout</base>
        <member kind="property" type="int">
            <name>cursorWidth</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlainTextDocumentLayout</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>QPlainTextDocumentLayout</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlainTextDocumentLayout</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>dtor.QPlainTextDocumentLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>draw</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *, const PaintContext &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>hitTest</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>hitTest</anchor>
            <arglist>(const QPointF &amp;, Qt::HitTestAccuracy ) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>pageCount</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>pageCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSizeF</type>
            <name>documentSize</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>documentSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>frameBoundingRect</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>frameBoundingRect</anchor>
            <arglist>(QTextFrame *) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>blockBoundingRect</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>blockBoundingRect</anchor>
            <arglist>(const QTextBlock &amp;block) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureBlockLayout</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>ensureBlockLayout</anchor>
            <arglist>(const QTextBlock &amp;block) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursorWidth</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorWidth</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestUpdate</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>documentChanged</name>
            <anchorfile>qplaintextdocumentlayout.html</anchorfile>
            <anchor>documentChanged</anchor>
            <arglist>(int from, int charsRemoved, int charsAdded)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProgressBar</name>
        <filename>qprogressbar.html</filename>
        <base>QWidget</base>
        <member kind="property" type="int">
            <name>minimum</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximum</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>value</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>alignment</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>textVisible</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>textVisible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Orientation">
            <name>orientation</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>invertedAppearance</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>invertedAppearance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Direction">
            <name>textDirection</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>textDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>format</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Direction</name>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopToBottom">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomToTop">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProgressBar</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>QProgressBar</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QProgressBar</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>dtor.QProgressBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimum</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximum</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>value</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>text</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextVisible</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>textVisible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTextVisible</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>textVisible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInvertedAppearance</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>invertedAppearance-prop</anchor>
            <arglist>(bool invert)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invertedAppearance</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>invertedAppearance-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextDirection</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>textDirection-prop</anchor>
            <arglist>(QProgressBar::Direction textDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProgressBar::Direction</type>
            <name>textDirection</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>textDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(const QString &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetFormat</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>format</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRange</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(int minimum, int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimum</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>(int minimum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximum</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>(int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>(Qt::Orientation )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qprogressbar.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionProgressBar *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPushButton</name>
        <filename>qpushbutton.html</filename>
        <base>QAbstractButton</base>
        <member kind="property" type="bool">
            <name>autoDefault</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>autoDefault-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>default</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>default-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>flat</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>flat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPushButton</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>QPushButton</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPushButton</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>QPushButton-2</anchor>
            <arglist>(const QString &amp;text, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPushButton</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>QPushButton-3</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPushButton</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>dtor.QPushButton</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoDefault</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>autoDefault-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoDefault</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>autoDefault-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDefault</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>default-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefault</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>default-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMenu</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>setMenu</anchor>
            <arglist>(QMenu *menu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>menu</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>menu</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlat</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>flat-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFlat</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>flat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMenu</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>showMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hitButton</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>hitButton</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qpushbutton.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionButton *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRadioButton</name>
        <filename>qradiobutton.html</filename>
        <base>QAbstractButton</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadioButton</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>QRadioButton</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadioButton</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>QRadioButton-2</anchor>
            <arglist>(const QString &amp;text, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRadioButton</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>dtor.QRadioButton</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hitButton</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>hitButton</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qradiobutton.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionButton *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRubberBand</name>
        <filename>qrubberband.html</filename>
        <base>QWidget</base>
        <member kind="enum">
            <name>Shape</name>
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Line">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rectangle">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRubberBand</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>QRubberBand</anchor>
            <arglist>(Shape s, QWidget *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRubberBand</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>dtor.QRubberBand</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Shape</type>
            <name>shape</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>setGeometry-2</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>move</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>move</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>move</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>move-2</anchor>
            <arglist>(const QPoint &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>resize-2</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>moveEvent</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>moveEvent</anchor>
            <arglist>(QMoveEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qrubberband.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionRubberBand *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScrollArea</name>
        <filename>qscrollarea.html</filename>
        <base>QAbstractScrollArea</base>
        <member kind="property" type="bool">
            <name>widgetResizable</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>widgetResizable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Alignment">
            <name>alignment</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollArea</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>QScrollArea</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScrollArea</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>dtor.QScrollArea</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidget</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>setWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>takeWidget</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>takeWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>widgetResizable</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>widgetResizable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidgetResizable</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>widgetResizable-prop</anchor>
            <arglist>(bool resizable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>alignment-prop</anchor>
            <arglist>(Qt::Alignment )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureVisible</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>ensureVisible</anchor>
            <arglist>(int x, int y, int xmargin, int ymargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureWidgetVisible</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>ensureWidgetVisible</anchor>
            <arglist>(QWidget *childWidget, int xmargin, int ymargin)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *o, QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollContentsBy</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>scrollContentsBy</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>viewportSizeHint</name>
            <anchorfile>qscrollarea.html</anchorfile>
            <anchor>viewportSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScrollBar</name>
        <filename>qscrollbar.html</filename>
        <base>QAbstractSlider</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollBar</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>QScrollBar</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollBar</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>QScrollBar-2</anchor>
            <arglist>(Qt::Orientation orientation, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScrollBar</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>dtor.QScrollBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sliderChange</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>sliderChange</anchor>
            <arglist>(SliderChange change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qscrollbar.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionSlider *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSizeGrip</name>
        <filename>qsizegrip.html</filename>
        <base>QWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizeGrip</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>QSizeGrip</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSizeGrip</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>dtor.QSizeGrip</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setVisible</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *mouseEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>moveEvent</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>moveEvent</anchor>
            <arglist>(QMoveEvent *moveEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *showEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *hideEvent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *o, QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsizegrip.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSlider</name>
        <filename>qslider.html</filename>
        <base>QAbstractSlider</base>
        <member kind="property" type="TickPosition">
            <name>tickPosition</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>tickPosition-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>tickInterval</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>tickInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TickPosition</name>
            <anchor>TickPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoTicks">
            <anchor>TickPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TicksAbove">
            <anchor>TickPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TicksLeft">
            <anchor>TickPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TicksBelow">
            <anchor>TickPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TicksRight">
            <anchor>TickPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TicksBothSides">
            <anchor>TickPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSlider</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>QSlider</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSlider</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>QSlider-2</anchor>
            <arglist>(Qt::Orientation orientation, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSlider</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>dtor.QSlider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTickPosition</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>tickPosition-prop</anchor>
            <arglist>(TickPosition position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TickPosition</type>
            <name>tickPosition</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>tickPosition-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTickInterval</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>tickInterval-prop</anchor>
            <arglist>(int ti)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>tickInterval</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>tickInterval-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qslider.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionSlider *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSpinBox</name>
        <filename>qspinbox.html</filename>
        <base>QAbstractSpinBox</base>
        <member kind="property" type="QString">
            <name>suffix</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>suffix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>prefix</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>prefix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>cleanText</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>cleanText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimum</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximum</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>singleStep</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>value</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>displayIntegerBase</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>displayIntegerBase-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpinBox</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>QSpinBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSpinBox</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>dtor.QSpinBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>value</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>prefix</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>prefix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrefix</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>prefix-prop</anchor>
            <arglist>(const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>suffix</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>suffix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSuffix</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>suffix-prop</anchor>
            <arglist>(const QString &amp;suffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>cleanText</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>cleanText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>singleStep</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSingleStep</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist>(int val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimum</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimum</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>(int min)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximum</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximum</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>(int max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRange</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(int minimum, int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>displayIntegerBase</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>displayIntegerBase-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDisplayIntegerBase</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>displayIntegerBase-prop</anchor>
            <arglist>(int base)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;text, int &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>valueFromText</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>valueFromText</anchor>
            <arglist>(const QString &amp;text) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>textFromValue</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>textFromValue</anchor>
            <arglist>(int value) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fixup</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>fixup</anchor>
            <arglist>(QString &amp;input) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(int val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qspinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDoubleSpinBox</name>
        <filename>qdoublespinbox.html</filename>
        <base>QAbstractSpinBox</base>
        <member kind="property" type="QString">
            <name>prefix</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>prefix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>suffix</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>suffix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>cleanText</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>cleanText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>decimals</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>minimum</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>maximum</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>singleStep</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>value</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDoubleSpinBox</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>QDoubleSpinBox</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDoubleSpinBox</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>dtor.QDoubleSpinBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>value</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>prefix</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>prefix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrefix</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>prefix-prop</anchor>
            <arglist>(const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>suffix</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>suffix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSuffix</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>suffix-prop</anchor>
            <arglist>(const QString &amp;suffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>cleanText</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>cleanText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>singleStep</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSingleStep</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>singleStep-prop</anchor>
            <arglist>(double val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>minimum</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimum</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>minimum-prop</anchor>
            <arglist>(double min)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>maximum</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximum</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>maximum-prop</anchor>
            <arglist>(double max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRange</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(double minimum, double maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>decimals</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDecimals</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist>(int prec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;text, int &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual double</type>
            <name>valueFromText</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>valueFromText</anchor>
            <arglist>(const QString &amp;text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>textFromValue</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>textFromValue</anchor>
            <arglist>(double value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fixup</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>fixup</anchor>
            <arglist>(QString &amp;input) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(double val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(double d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qdoublespinbox.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSplashScreen</name>
        <filename>qsplashscreen.html</filename>
        <base>QWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSplashScreen</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>QSplashScreen</anchor>
            <arglist>(const QPixmap &amp;pixmap, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSplashScreen</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>QSplashScreen-2</anchor>
            <arglist>(QWidget *parent, const QPixmap &amp;pixmap, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSplashScreen</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>dtor.QSplashScreen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>setPixmap</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finish</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>finish</anchor>
            <arglist>(QWidget *mainWin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>repaint</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>repaint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>message</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>message</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMessage</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>showMessage</anchor>
            <arglist>(const QString &amp;message, int alignment, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMessage</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>clearMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageChanged</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>messageChanged</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawContents</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>drawContents</anchor>
            <arglist>(QPainter *painter)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qsplashscreen.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSplitter</name>
        <filename>qsplitter.html</filename>
        <base>QFrame</base>
        <member kind="property" type="Qt::Orientation">
            <name>orientation</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>opaqueResize</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>opaqueResize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>handleWidth</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>handleWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>childrenCollapsible</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>childrenCollapsible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSplitter</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>QSplitter</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSplitter</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>QSplitter-2</anchor>
            <arglist>(Qt::Orientation orientation, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSplitter</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>dtor.QSplitter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addWidget</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertWidget</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>insertWidget</anchor>
            <arglist>(int index, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>(Qt::Orientation )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChildrenCollapsible</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>childrenCollapsible-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>childrenCollapsible</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>childrenCollapsible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCollapsible</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>setCollapsible</anchor>
            <arglist>(int index, bool collapse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCollapsible</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>isCollapsible</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpaqueResize</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>opaqueResize-prop</anchor>
            <arglist>(bool opaque)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>opaqueResize</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>opaqueResize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refresh</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>refresh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>sizes</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>sizes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizes</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>setSizes</anchor>
            <arglist>(const QList&lt;int&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>saveState</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>saveState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>restoreState</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>restoreState</anchor>
            <arglist>(const QByteArray &amp;state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>handleWidth</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>handleWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHandleWidth</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>handleWidth-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRange</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>getRange</anchor>
            <arglist>(int index, int *min, int *max) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSplitterHandle *</type>
            <name>handle</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStretchFactor</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>setStretchFactor</anchor>
            <arglist>(int index, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>splitterMoved</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>splitterMoved</anchor>
            <arglist>(int pos, int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSplitterHandle *</type>
            <name>createHandle</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>createHandle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>childEvent</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>childEvent</anchor>
            <arglist>(QChildEvent *c)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>moveSplitter</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>moveSplitter</anchor>
            <arglist>(int pos, int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRubberBand</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>setRubberBand</anchor>
            <arglist>(int pos)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>closestLegalPosition</name>
            <anchorfile>qsplitter.html</anchorfile>
            <anchor>closestLegalPosition</anchor>
            <arglist>(int pos, int index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSplitterHandle</name>
        <filename>qsplitterhandle.html</filename>
        <base>QWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSplitterHandle</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>QSplitterHandle</anchor>
            <arglist>(Qt::Orientation orientation, QSplitter *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSplitterHandle</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>dtor.QSplitterHandle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>setOrientation</anchor>
            <arglist>(Qt::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>opaqueResize</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>opaqueResize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSplitter *</type>
            <name>splitter</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>splitter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>moveSplitter</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>moveSplitter</anchor>
            <arglist>(int pos)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>closestLegalPosition</name>
            <anchorfile>qsplitterhandle.html</anchorfile>
            <anchor>closestLegalPosition</anchor>
            <arglist>(int pos)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStackedWidget</name>
        <filename>qstackedwidget.html</filename>
        <base>QFrame</base>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStackedWidget</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>QStackedWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStackedWidget</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>dtor.QStackedWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addWidget</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertWidget</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>insertWidget</anchor>
            <arglist>(int index, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeWidget</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>removeWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>currentWidget</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>currentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentWidget</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>setCurrentWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentChanged</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widgetRemoved</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>widgetRemoved</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qstackedwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStatusBar</name>
        <filename>qstatusbar.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>sizeGripEnabled</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>sizeGripEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStatusBar</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>QStatusBar</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QStatusBar</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>dtor.QStatusBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addWidget</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *widget, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertWidget</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>insertWidget</anchor>
            <arglist>(int index, QWidget *widget, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPermanentWidget</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>addPermanentWidget</anchor>
            <arglist>(QWidget *widget, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertPermanentWidget</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>insertPermanentWidget</anchor>
            <arglist>(int index, QWidget *widget, int stretch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeWidget</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>removeWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeGripEnabled</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>sizeGripEnabled-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSizeGripEnabled</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>sizeGripEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currentMessage</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>currentMessage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMessage</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>showMessage</anchor>
            <arglist>(const QString &amp;message, int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearMessage</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>clearMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageChanged</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>messageChanged</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>reformat</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>reformat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>hideOrShow</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>hideOrShow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qstatusbar.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTabBar</name>
        <filename>qtabbar.html</filename>
        <base>QWidget</base>
        <member kind="property" type="Shape">
            <name>shape</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>shape-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>drawBase</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>drawBase-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>iconSize</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextElideMode">
            <name>elideMode</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>elideMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>usesScrollButtons</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>usesScrollButtons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>tabsClosable</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SelectionBehavior">
            <name>selectionBehaviorOnRemove</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>selectionBehaviorOnRemove-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>expanding</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>expanding-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>movable</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>documentMode</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoHide</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>autoHide-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>changeCurrentOnDrag</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>changeCurrentOnDrag-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTabBar</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>QTabBar</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTabBar</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>dtor.QTabBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Shape</name>
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoundedNorth">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoundedSouth">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoundedWest">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoundedEast">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangularNorth">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangularSouth">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangularWest">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangularEast">
            <anchor>Shape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ButtonPosition</name>
            <anchor>ButtonPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftSide">
            <anchor>ButtonPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightSide">
            <anchor>ButtonPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SelectionBehavior</name>
            <anchor>SelectionBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectLeftTab">
            <anchor>SelectionBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectRightTab">
            <anchor>SelectionBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectPreviousTab">
            <anchor>SelectionBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Shape</type>
            <name>shape</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>shape-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShape</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>shape-prop</anchor>
            <arglist>(Shape shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addTab</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>addTab</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addTab</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>addTab-2</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertTab</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>insertTab</anchor>
            <arglist>(int index, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertTab</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>insertTab-2</anchor>
            <arglist>(int index, const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTab</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>removeTab</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTab</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>moveTab</anchor>
            <arglist>(int from, int to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTabEnabled</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>isTabEnabled</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabEnabled</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>setTabEnabled</anchor>
            <arglist>(int index, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tabText</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabText</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabText</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>setTabText</anchor>
            <arglist>(int index, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>tabTextColor</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabTextColor</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabTextColor</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>setTabTextColor</anchor>
            <arglist>(int index, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>tabIcon</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabIcon</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabIcon</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>setTabIcon</anchor>
            <arglist>(int index, const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextElideMode</type>
            <name>elideMode</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>elideMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setElideMode</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>elideMode-prop</anchor>
            <arglist>(Qt::TextElideMode )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabToolTip</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>setTabToolTip</anchor>
            <arglist>(int index, const QString &amp;tip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tabToolTip</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabToolTip</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabWhatsThis</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>setTabWhatsThis</anchor>
            <arglist>(int index, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tabWhatsThis</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabWhatsThis</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabData</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>setTabData</anchor>
            <arglist>(int index, const QVariant &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>tabData</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabData</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>tabRect</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabRect</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>tabAt</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabAt</anchor>
            <arglist>(const QPoint &amp;position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDrawBase</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>drawBase-prop</anchor>
            <arglist>(bool drawTheBase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>drawBase</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>drawBase-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>iconSize</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconSize</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>usesScrollButtons</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>usesScrollButtons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsesScrollButtons</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>usesScrollButtons-prop</anchor>
            <arglist>(bool useButtons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabsClosable</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabsClosable</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist>(bool closable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabButton</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>setTabButton</anchor>
            <arglist>(int index, ButtonPosition position, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>tabButton</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabButton</anchor>
            <arglist>(int index, ButtonPosition position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SelectionBehavior</type>
            <name>selectionBehaviorOnRemove</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>selectionBehaviorOnRemove-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectionBehaviorOnRemove</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>selectionBehaviorOnRemove-prop</anchor>
            <arglist>(SelectionBehavior behavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>expanding</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>expanding-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpanding</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>expanding-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMovable</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMovable</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist>(bool movable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>documentMode</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentMode</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist>(bool set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoHide</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>autoHide-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoHide</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>autoHide-prop</anchor>
            <arglist>(bool hide)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>changeCurrentOnDrag</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>changeCurrentOnDrag-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChangeCurrentOnDrag</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>changeCurrentOnDrag-prop</anchor>
            <arglist>(bool change)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentChanged</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabCloseRequested</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabCloseRequested</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabMoved</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabMoved</anchor>
            <arglist>(int from, int to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabBarClicked</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabBarClicked</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabBarDoubleClicked</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabBarDoubleClicked</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>tabSizeHint</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabSizeHint</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumTabSizeHint</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>minimumTabSizeHint</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabInserted</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabInserted</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabRemoved</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabRemoved</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabLayoutChange</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>tabLayoutChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qtabbar.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionTab *option, int tabIndex) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTabWidget</name>
        <filename>qtabwidget.html</filename>
        <base>QWidget</base>
        <member kind="property" type="TabPosition">
            <name>tabPosition</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabPosition-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="TabShape">
            <name>tabShape</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>iconSize</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextElideMode">
            <name>elideMode</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>elideMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>usesScrollButtons</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>usesScrollButtons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>documentMode</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>tabsClosable</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>movable</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>tabBarAutoHide</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabBarAutoHide-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTabWidget</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>QTabWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTabWidget</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>dtor.QTabWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addTab</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>addTab</anchor>
            <arglist>(QWidget *page, const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addTab</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>addTab-2</anchor>
            <arglist>(QWidget *page, const QIcon &amp;icon, const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertTab</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>insertTab</anchor>
            <arglist>(int index, QWidget *page, const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertTab</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>insertTab-2</anchor>
            <arglist>(int index, QWidget *page, const QIcon &amp;icon, const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTab</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>removeTab</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTabEnabled</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>isTabEnabled</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabEnabled</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>setTabEnabled</anchor>
            <arglist>(int index, bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tabText</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabText</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabText</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>setTabText</anchor>
            <arglist>(int index, const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>tabIcon</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabIcon</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabIcon</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>setTabIcon</anchor>
            <arglist>(int index, const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabToolTip</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>setTabToolTip</anchor>
            <arglist>(int index, const QString &amp;tip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tabToolTip</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabToolTip</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabWhatsThis</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>setTabWhatsThis</anchor>
            <arglist>(int index, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tabWhatsThis</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabWhatsThis</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>currentWidget</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>currentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QWidget *w) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>TabPosition</name>
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="North">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="South">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="West">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="East">
            <anchor>TabPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TabPosition</type>
            <name>tabPosition</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabPosition-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabPosition</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabPosition-prop</anchor>
            <arglist>(TabPosition )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabsClosable</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabsClosable</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabsClosable-prop</anchor>
            <arglist>(bool closeable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMovable</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMovable</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist>(bool movable)</arglist>
        </member>
        <member kind="enum">
            <name>TabShape</name>
            <anchor>TabShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rounded">
            <anchor>TabShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Triangular">
            <anchor>TabShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TabShape</type>
            <name>tabShape</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabShape</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabShape-prop</anchor>
            <arglist>(TabShape s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>heightForWidth</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>heightForWidth</anchor>
            <arglist>(int width) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasHeightForWidth</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>hasHeightForWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCornerWidget</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>setCornerWidget</anchor>
            <arglist>(QWidget *widget, Qt::Corner corner)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>cornerWidget</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>cornerWidget</anchor>
            <arglist>(Qt::Corner corner) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextElideMode</type>
            <name>elideMode</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>elideMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setElideMode</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>elideMode-prop</anchor>
            <arglist>(Qt::TextElideMode )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>iconSize</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconSize</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>usesScrollButtons</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>usesScrollButtons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsesScrollButtons</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>usesScrollButtons-prop</anchor>
            <arglist>(bool useButtons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>documentMode</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentMode</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>documentMode-prop</anchor>
            <arglist>(bool set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabBarAutoHide</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabBarAutoHide-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabBarAutoHide</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabBarAutoHide-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTabBar *</type>
            <name>tabBar</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabBar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentWidget</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>setCurrentWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentChanged</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabCloseRequested</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabCloseRequested</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabBarClicked</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabBarClicked</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabBarDoubleClicked</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabBarDoubleClicked</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabInserted</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabInserted</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabRemoved</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>tabRemoved</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setTabBar</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>setTabBar</anchor>
            <arglist>(QTabBar *tb)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qtabwidget.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionTabWidgetFrame *option) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBrowser</name>
        <filename>qtextbrowser.html</filename>
        <base>QTextEdit</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>modified</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>readOnly</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>undoRedoEnabled</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>searchPaths</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>searchPaths-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>openExternalLinks</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>openLinks</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>openLinks-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBrowser</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>QTextBrowser</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>searchPaths</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>searchPaths-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSearchPaths</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>searchPaths-prop</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>loadResource</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>loadResource</anchor>
            <arglist>(int type, const QUrl &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBackwardAvailable</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>isBackwardAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isForwardAvailable</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>isForwardAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearHistory</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>clearHistory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>historyTitle</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>historyTitle</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>historyUrl</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>historyUrl</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>backwardHistoryCount</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>backwardHistoryCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>forwardHistoryCount</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>forwardHistoryCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>openExternalLinks</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpenExternalLinks</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>openExternalLinks-prop</anchor>
            <arglist>(bool open)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>openLinks</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>openLinks-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpenLinks</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>openLinks-prop</anchor>
            <arglist>(bool open)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSource</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>backward</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>backward</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>forward</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>forward</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>home</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>home</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>reload</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>reload</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backwardAvailable</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>backwardAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>forwardAvailable</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>forwardAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>historyChanged</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>historyChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>sourceChanged</anchor>
            <arglist>(const QUrl &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>highlighted</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>highlighted</anchor>
            <arglist>(const QUrl &amp;link)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>highlighted</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>highlighted-2</anchor>
            <arglist>(const QString &amp;link)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>anchorClicked</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>anchorClicked</anchor>
            <arglist>(const QUrl &amp;link)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qtextbrowser.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextEdit</name>
        <filename>qtextedit.html</filename>
        <base>QAbstractScrollArea</base>
        <member kind="property" type="AutoFormatting">
            <name>autoFormatting</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>autoFormatting-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>tabChangesFocus</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>tabChangesFocus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>documentTitle</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>documentTitle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>undoRedoEnabled</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="LineWrapMode">
            <name>lineWrapMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>lineWrapMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTextOption::WrapMode">
            <name>wordWrapMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>wordWrapMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>lineWrapColumnOrWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>lineWrapColumnOrWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>readOnly</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>html</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>html-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>plainText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>plainText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>overwriteMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>overwriteMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>tabStopWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>tabStopWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>acceptRichText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>acceptRichText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>cursorWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TextInteractionFlags">
            <name>textInteractionFlags</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTextDocument *">
            <name>document</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>document-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>placeholderText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LineWrapMode</name>
            <anchor>LineWrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoWrap">
            <anchor>LineWrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WidgetWidth">
            <anchor>LineWrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FixedPixelWidth">
            <anchor>LineWrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FixedColumnWidth">
            <anchor>LineWrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AutoFormattingFlag</name>
            <anchor>AutoFormattingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoNone">
            <anchor>AutoFormattingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoBulletList">
            <anchor>AutoFormattingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoAll">
            <anchor>AutoFormattingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextEdit::AutoFormattingFlag">
            <name>AutoFormatting</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>AutoFormattingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextEdit</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>QTextEdit</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextEdit</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>QTextEdit-2</anchor>
            <arglist>(const QString &amp;text, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextEdit</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>dtor.QTextEdit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocument</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>document-prop</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>document-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaceholderText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist>(const QString &amp;placeholderText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>placeholderText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>placeholderText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextCursor</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setTextCursor</anchor>
            <arglist>(const QTextCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>textCursor</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>textCursor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadOnly</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>readOnly-prop</anchor>
            <arglist>(bool ro)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextInteractionFlags</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist>(Qt::TextInteractionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextInteractionFlags</type>
            <name>textInteractionFlags</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>textInteractionFlags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontPointSize</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>fontPointSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fontFamily</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>fontFamily</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fontWeight</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>fontWeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontUnderline</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>fontUnderline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontItalic</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>fontItalic</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>textColor</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>textColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>textBackgroundColor</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>textBackgroundColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>currentFont</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>currentFont</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeCurrentCharFormat</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>mergeCurrentCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp;modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentCharFormat</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setCurrentCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>currentCharFormat</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>currentCharFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AutoFormatting</type>
            <name>autoFormatting</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>autoFormatting-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoFormatting</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>autoFormatting-prop</anchor>
            <arglist>(AutoFormatting features)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tabChangesFocus</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>tabChangesFocus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabChangesFocus</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>tabChangesFocus-prop</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentTitle</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>documentTitle-prop</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>documentTitle</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>documentTitle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndoRedoEnabled</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUndoRedoEnabled</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LineWrapMode</type>
            <name>lineWrapMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>lineWrapMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineWrapMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>lineWrapMode-prop</anchor>
            <arglist>(LineWrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineWrapColumnOrWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>lineWrapColumnOrWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineWrapColumnOrWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>lineWrapColumnOrWidth-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption::WrapMode</type>
            <name>wordWrapMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>wordWrapMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWordWrapMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>wordWrapMode-prop</anchor>
            <arglist>(QTextOption::WrapMode policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QString &amp;exp, QTextDocument::FindFlags options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const QRegExp &amp;exp, QTextDocument::FindFlags options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toPlainText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>plainText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toHtml</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>html-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ensureCursorVisible</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>ensureCursorVisible</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>loadResource</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>loadResource</anchor>
            <arglist>(int type, const QUrl &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>createStandardContextMenu</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>createStandardContextMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>createStandardContextMenu</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>createStandardContextMenu-2</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>cursorForPosition</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>cursorForPosition</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>cursorRect</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>cursorRect</anchor>
            <arglist>(const QTextCursor &amp;cursor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>cursorRect</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>cursorRect-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>anchorAt</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>anchorAt</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>overwriteMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>overwriteMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOverwriteMode</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>overwriteMode-prop</anchor>
            <arglist>(bool overwrite)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>tabStopWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>tabStopWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabStopWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>tabStopWidth-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursorWidth</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>cursorWidth-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptRichText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>acceptRichText-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptRichText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>acceptRichText-prop</anchor>
            <arglist>(bool accept)</arglist>
        </member>
        <class>QTextEdit::ExtraSelection</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtraSelections</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setExtraSelections</anchor>
            <arglist>(const QList&lt;ExtraSelection&gt; &amp;selections)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;ExtraSelection&gt;</type>
            <name>extraSelections</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>extraSelections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveCursor</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>moveCursor</anchor>
            <arglist>(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canPaste</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>canPaste</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>print</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>print</anchor>
            <arglist>(QPagedPaintDevice *printer) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery property) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontPointSize</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setFontPointSize</anchor>
            <arglist>(qreal s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontFamily</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setFontFamily</anchor>
            <arglist>(const QString &amp;fontFamily)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontWeight</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setFontWeight</anchor>
            <arglist>(int weight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontUnderline</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setFontUnderline</anchor>
            <arglist>(bool underline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontItalic</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setFontItalic</anchor>
            <arglist>(bool italic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextColor</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setTextColor</anchor>
            <arglist>(const QColor &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextBackgroundColor</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setTextBackgroundColor</anchor>
            <arglist>(const QColor &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentFont</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setCurrentFont</anchor>
            <arglist>(const QFont &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(Qt::Alignment a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlainText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>plainText-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHtml</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>html-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cut</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>cut</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paste</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>paste</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>undo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>redo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectAll</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>selectAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertPlainText</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>insertPlainText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertHtml</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>insertHtml</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scrollToAnchor</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>scrollToAnchor</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zoomIn</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>zoomIn</anchor>
            <arglist>(int range)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zoomOut</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>zoomOut</anchor>
            <arglist>(int range)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>html-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undoAvailable</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>undoAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redoAvailable</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>redoAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentCharFormatChanged</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>currentCharFormatChanged</anchor>
            <arglist>(const QTextCharFormat &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyAvailable</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>copyAvailable</anchor>
            <arglist>(bool yes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorPositionChanged</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>cursorPositionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>contextMenuEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>contextMenuEvent</anchor>
            <arglist>(QContextMenuEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>createMimeDataFromSelection</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>createMimeDataFromSelection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canInsertFromMimeData</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>canInsertFromMimeData</anchor>
            <arglist>(const QMimeData *source) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>insertFromMimeData</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>insertFromMimeData</anchor>
            <arglist>(const QMimeData *source)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>scrollContentsBy</name>
            <anchorfile>qtextedit.html</anchorfile>
            <anchor>scrollContentsBy</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextEdit::ExtraSelection</name>
        <filename>qtextedit-extraselection.html</filename>
    </compound>
    <compound kind="class">
        <name>QToolBar</name>
        <filename>qtoolbar.html</filename>
        <base>QWidget</base>
        <member kind="property" type="bool">
            <name>movable</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ToolBarAreas">
            <name>allowedAreas</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>allowedAreas-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::Orientation">
            <name>orientation</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>iconSize</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ToolButtonStyle">
            <name>toolButtonStyle</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>floating</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>floating-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>floatable</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>floatable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QToolBar</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>QToolBar</anchor>
            <arglist>(const QString &amp;title, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QToolBar</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>QToolBar-2</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QToolBar</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>dtor.QToolBar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMovable</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist>(bool movable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMovable</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllowedAreas</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>allowedAreas-prop</anchor>
            <arglist>(Qt::ToolBarAreas areas)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ToolBarAreas</type>
            <name>allowedAreas</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>allowedAreas-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAreaAllowed</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>isAreaAllowed</anchor>
            <arglist>(Qt::ToolBarArea area) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>(Qt::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>addAction-2</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>addAction-3</anchor>
            <arglist>(const QString &amp;text, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addAction</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>addAction-4</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addSeparator</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>addSeparator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>insertSeparator</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>insertSeparator</anchor>
            <arglist>(QAction *before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>addWidget</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>addWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>insertWidget</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>insertWidget</anchor>
            <arglist>(QAction *before, QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>actionAt</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>actionAt</anchor>
            <arglist>(const QPoint &amp;p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>actionAt</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>actionAt-2</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>toggleViewAction</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>toggleViewAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>iconSize</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ToolButtonStyle</type>
            <name>toolButtonStyle</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widgetForAction</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>widgetForAction</anchor>
            <arglist>(QAction *action) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFloatable</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>floatable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFloatable</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>floatable-prop</anchor>
            <arglist>(bool floatable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFloating</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>floating-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconSize</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;iconSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolButtonStyle</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist>(Qt::ToolButtonStyle toolButtonStyle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>actionTriggered</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>actionTriggered</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>movableChanged</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>movable-prop</anchor>
            <arglist>(bool movable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allowedAreasChanged</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>allowedAreas-prop</anchor>
            <arglist>(Qt::ToolBarAreas allowedAreas)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>orientationChanged</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>(Qt::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>iconSizeChanged</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>iconSize-prop</anchor>
            <arglist>(const QSize &amp;iconSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toolButtonStyleChanged</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist>(Qt::ToolButtonStyle toolButtonStyle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topLevelChanged</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>topLevelChanged</anchor>
            <arglist>(bool topLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibilityChanged</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>visibilityChanged</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>actionEvent</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>actionEvent</anchor>
            <arglist>(QActionEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qtoolbar.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QToolBox</name>
        <filename>qtoolbox.html</filename>
        <base>QFrame</base>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QToolBox</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>QToolBox</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QToolBox</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>dtor.QToolBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addItem</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>addItem-2</anchor>
            <arglist>(QWidget *w, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>addItem</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>addItem</anchor>
            <arglist>(QWidget *widget, const QIcon &amp;iconSet, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertItem</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>insertItem-2</anchor>
            <arglist>(int index, QWidget *widget, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>insertItem</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>insertItem</anchor>
            <arglist>(int index, QWidget *widget, const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItem</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemEnabled</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>setItemEnabled</anchor>
            <arglist>(int index, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isItemEnabled</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>isItemEnabled</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemText</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>setItemText</anchor>
            <arglist>(int index, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemText</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>itemText</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemIcon</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>setItemIcon</anchor>
            <arglist>(int index, const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>itemIcon</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>itemIcon</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemToolTip</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>setItemToolTip</anchor>
            <arglist>(int index, const QString &amp;toolTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemToolTip</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>itemToolTip</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>currentWidget</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>currentWidget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWidget *</type>
            <name>widget</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QWidget *widget) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentWidget</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>setCurrentWidget</anchor>
            <arglist>(QWidget *widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentChanged</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>itemInserted</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>itemInserted</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>itemRemoved</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>itemRemoved</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qtoolbox.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QToolButton</name>
        <filename>qtoolbutton.html</filename>
        <base>QAbstractButton</base>
        <member kind="property" type="ToolButtonPopupMode">
            <name>popupMode</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>popupMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ToolButtonStyle">
            <name>toolButtonStyle</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoRaise</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>autoRaise-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ArrowType">
            <name>arrowType</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>arrowType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ToolButtonPopupMode</name>
            <anchor>ToolButtonPopupMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DelayedPopup">
            <anchor>ToolButtonPopupMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MenuButtonPopup">
            <anchor>ToolButtonPopupMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InstantPopup">
            <anchor>ToolButtonPopupMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QToolButton</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>QToolButton</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QToolButton</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>dtor.QToolButton</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>sizeHint</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>minimumSizeHint</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>minimumSizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ToolButtonStyle</type>
            <name>toolButtonStyle</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ArrowType</type>
            <name>arrowType</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>arrowType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArrowType</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>arrowType-prop</anchor>
            <arglist>(Qt::ArrowType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMenu</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>setMenu</anchor>
            <arglist>(QMenu *menu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMenu *</type>
            <name>menu</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>menu</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPopupMode</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>popupMode-prop</anchor>
            <arglist>(ToolButtonPopupMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ToolButtonPopupMode</type>
            <name>popupMode</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>popupMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>defaultAction</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>defaultAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRaise</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>autoRaise-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRaise</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>autoRaise-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMenu</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>showMenu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolButtonStyle</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>toolButtonStyle-prop</anchor>
            <arglist>(Qt::ToolButtonStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultAction</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>setDefaultAction</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggered</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>triggered</anchor>
            <arglist>(QAction *action)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>actionEvent</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>actionEvent</anchor>
            <arglist>(QActionEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>enterEvent</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>enterEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>leaveEvent</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>leaveEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>changeEvent</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>changeEvent</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hitButton</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>hitButton</anchor>
            <arglist>(const QPoint &amp;pos) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>nextCheckState</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>nextCheckState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>initStyleOption</name>
            <anchorfile>qtoolbutton.html</anchorfile>
            <anchor>initStyleOption</anchor>
            <arglist>(QStyleOptionToolButton *option) const</arglist>
        </member>
    </compound>
</tagfile>
