<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QQuickFramebufferObject</name>
        <filename>qquickframebufferobject.html</filename>
        <base>QQuickItem</base>
        <member kind="property" type="bool">
            <name>textureFollowsItemSize</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureFollowsItemSize-prop</anchor>
            <arglist></arglist>
        </member>
        <class>QQuickFramebufferObject::Renderer</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickFramebufferObject</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>QQuickFramebufferObject</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>textureFollowsItemSize</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureFollowsItemSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureFollowsItemSize</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureFollowsItemSize-prop</anchor>
            <arglist>(bool follows)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Renderer *</type>
            <name>createRenderer</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>createRenderer</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isTextureProvider</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>isTextureProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGTextureProvider *</type>
            <name>textureProvider</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseResources</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureFollowsItemSizeChanged</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureFollowsItemSize-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickFramebufferObject::Renderer</name>
        <filename>qquickframebufferobject-renderer.html</filename>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>Renderer</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>Renderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~Renderer</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>dtor.Renderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>render</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>render</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QOpenGLFramebufferObject *</type>
            <name>createFramebufferObject</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>createFramebufferObject</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>synchronize</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>synchronize</anchor>
            <arglist>(QQuickFramebufferObject *item)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject *</type>
            <name>framebufferObject</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>framebufferObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>invalidateFramebufferObject</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>invalidateFramebufferObject</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickItem</name>
        <filename>qquickitem.html</filename>
        <base>QObject</base>
        <base>QQmlParserStatus</base>
        <member kind="property" type="QQuickItem *">
            <name>parent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>width</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>height</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>opacity</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>state</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>childrenRect</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childrenRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>baselineOffset</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>baselineOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>clip</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>focus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>activeFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>activeFocusOnTab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocusOnTab-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>rotation</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>scale</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="TransformOrigin">
            <name>transformOrigin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>transformOrigin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>smooth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>antialiasing</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>implicitWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>implicitHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitHeight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemClipsChildrenToShape">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemAcceptsInputMethod">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemIsFocusScope">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemHasContents">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemAcceptsDrops">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QQuickItem::Flag">
            <name>Flags</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ItemChange</name>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemChildAddedChange">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemChildRemovedChange">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemSceneChange">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemVisibleHasChanged">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemParentHasChanged">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemOpacityHasChanged">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemActiveFocusHasChanged">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemRotationHasChanged">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemAntialiasingHasChanged">
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QQuickItem::ItemChangeData</class>
        <member kind="enum">
            <name>TransformOrigin</name>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopLeft">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Top">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopRight">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Left">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Center">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Right">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomLeft">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bottom">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomRight">
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>QQuickItem</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dtor.QQuickItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickWindow *</type>
            <name>window</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>parentItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParentItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stackBefore</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>stackBefore</anchor>
            <arglist>(const QQuickItem *sibling)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stackAfter</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>stackAfter</anchor>
            <arglist>(const QQuickItem *sibling)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>childrenRect</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childrenRect-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QQuickItem *&gt;</type>
            <name>childItems</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>clip</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClip</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>state</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>baselineOffset</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>baselineOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaselineOffset</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>baselineOffset-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImplicitWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitWidth-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>implicitWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImplicitHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitHeight-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>implicitHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitHeight-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TransformOrigin</type>
            <name>transformOrigin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>transformOrigin-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransformOrigin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>transformOrigin-prop</anchor>
            <arglist>(TransformOrigin )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>z</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rotation</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotation</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>scale</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>smooth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSmooth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>activeFocusOnTab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocusOnTab-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveFocusOnTab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocusOnTab-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>antialiasing</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAntialiasing</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetAntialiasing</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Flags</type>
            <name>flags</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(Flag flag, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasActiveFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool focus, Qt::FocusReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFocusScope</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>isFocusScope</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>scopedFocusItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scopedFocusItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>acceptedMouseButtons</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>acceptedMouseButtons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptedMouseButtons</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setAcceptedMouseButtons</anchor>
            <arglist>(Qt::MouseButtons buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptHoverEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>acceptHoverEvents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptHoverEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setAcceptHoverEvents</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor</type>
            <name>cursor</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>cursor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursor</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setCursor</anchor>
            <arglist>(const QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetCursor</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>unsetCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabMouse</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>grabMouse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungrabMouse</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ungrabMouse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keepMouseGrab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>keepMouseGrab</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeepMouseGrab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setKeepMouseGrab</anchor>
            <arglist>(bool keep)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>filtersChildMouseEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>filtersChildMouseEvents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltersChildMouseEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setFiltersChildMouseEvents</anchor>
            <arglist>(bool filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabTouchPoints</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>grabTouchPoints</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungrabTouchPoints</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ungrabTouchPoints</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keepTouchGrab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>keepTouchGrab</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeepTouchGrab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setKeepTouchGrab</anchor>
            <arglist>(bool keep)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;QQuickItemGrabResult&gt;</type>
            <name>grabToImage</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>grabToImage</anchor>
            <arglist>(const QSize &amp;targetSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapToItem</anchor>
            <arglist>(const QQuickItem *item, const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToScene</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapToScene</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapRectToItem</anchor>
            <arglist>(const QQuickItem *item, const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToScene</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapRectToScene</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapFromItem</anchor>
            <arglist>(const QQuickItem *item, const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromScene</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapFromScene</anchor>
            <arglist>(const QPointF &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapRectFromItem</anchor>
            <arglist>(const QQuickItem *item, const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromScene</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapRectFromScene</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>polish</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>polish</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>forceActiveFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>forceActiveFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>forceActiveFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>forceActiveFocus-2</anchor>
            <arglist>(Qt::FocusReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>nextItemInFocusChain</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>nextItemInFocusChain</anchor>
            <arglist>(bool forward)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>childAt</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childAt</anchor>
            <arglist>(qreal x, qreal y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
        <class>QQuickItem::UpdatePaintNodeData</class>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isTextureProvider</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>isTextureProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGTextureProvider *</type>
            <name>textureProvider</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>textureProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>windowChanged</anchor>
            <arglist>(QQuickWindow *window)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isComponentComplete</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>isComponentComplete</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>itemChange</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>itemChange</anchor>
            <arglist>(ItemChange change, const ItemChangeData &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>updateInputMethod</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>updateInputMethod</anchor>
            <arglist>(Qt::InputMethodQueries queries)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>widthValid</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>widthValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>heightValid</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>heightValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>classBegin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>classBegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>componentComplete</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>componentComplete</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseUngrabEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mouseUngrabEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>touchUngrabEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>touchUngrabEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>touchEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>touchEvent</anchor>
            <arglist>(QTouchEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverEnterEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>hoverEnterEvent</anchor>
            <arglist>(QHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverMoveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>hoverMoveEvent</anchor>
            <arglist>(QHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverLeaveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>hoverLeaveEvent</anchor>
            <arglist>(QHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>childMouseEventFilter</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childMouseEventFilter</anchor>
            <arglist>(QQuickItem *item, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>geometryChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>geometryChanged</anchor>
            <arglist>(const QRectF &amp;newGeometry, const QRectF &amp;oldGeometry)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSGNode *</type>
            <name>updatePaintNode</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>updatePaintNode</anchor>
            <arglist>(QSGNode *oldNode, UpdatePaintNodeData *updatePaintNodeData)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseResources</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updatePolish</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>updatePolish</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickItem::ItemChangeData</name>
        <filename>qquickitem-itemchangedata.html</filename>
    </compound>
    <compound kind="class">
        <name>QQuickItem::UpdatePaintNodeData</name>
        <filename>qquickitem-updatepaintnodedata.html</filename>
    </compound>
    <compound kind="class">
        <name>QQuickItemGrabResult</name>
        <filename>qquickitemgrabresult.html</filename>
        <base>QObject</base>
        <member kind="property" type="QImage">
            <name>image</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>image-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>url</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>url-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>image</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>image-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>url-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveToFile</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>saveToFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ready</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>ready</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickPaintedItem</name>
        <filename>qquickpainteditem.html</filename>
        <base>QQuickItem</base>
        <member kind="property" type="QSize">
            <name>contentsSize</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>fillColor</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>fillColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>contentsScale</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="RenderTarget">
            <name>renderTarget</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>renderTarget-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickPaintedItem</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>QQuickPaintedItem</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickPaintedItem</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>dtor.QQuickPaintedItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>RenderTarget</name>
            <anchor>RenderTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image">
            <anchor>RenderTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FramebufferObject">
            <anchor>RenderTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvertedYFramebufferObject">
            <anchor>RenderTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PerformanceHint</name>
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FastFBOResizing">
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QQuickPaintedItem::PerformanceHint">
            <name>PerformanceHints</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>opaquePainting</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>opaquePainting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpaquePainting</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setOpaquePainting</anchor>
            <arglist>(bool opaque)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>antialiasing</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>antialiasing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAntialiasing</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setAntialiasing</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mipmap</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>mipmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmap</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setMipmap</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PerformanceHints</type>
            <name>performanceHints</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>performanceHints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerformanceHint</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setPerformanceHint</anchor>
            <arglist>(PerformanceHint hint, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerformanceHints</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setPerformanceHints</anchor>
            <arglist>(PerformanceHints hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>contentsBoundingRect</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsBoundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>contentsSize</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsSize</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsSize-prop</anchor>
            <arglist>(const QSize &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetContentsSize</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>resetContentsSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>contentsScale</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsScale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsScale</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsScale-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>fillColor</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>fillColor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFillColor</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>fillColor-prop</anchor>
            <arglist>(const QColor &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderTarget</type>
            <name>renderTarget</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>renderTarget-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderTarget</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>renderTarget-prop</anchor>
            <arglist>(RenderTarget target)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isTextureProvider</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>isTextureProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGTextureProvider *</type>
            <name>textureProvider</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>textureProvider</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillColorChanged</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>fillColor-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsSizeChanged</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsSize-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsScaleChanged</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>contentsScale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderTargetChanged</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>renderTarget-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSGNode *</type>
            <name>updatePaintNode</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>updatePaintNode</anchor>
            <arglist>(QSGNode *oldNode, UpdatePaintNodeData *data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseResources</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickRenderControl</name>
        <filename>qquickrendercontrol.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickRenderControl</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>QQuickRenderControl</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QQuickRenderControl</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>dtor.QQuickRenderControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepareThread</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>prepareThread</anchor>
            <arglist>(QThread *targetThread)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(QOpenGLContext *gl)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>polishItems</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>polishItems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>render</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>render</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sync</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>sync</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grab</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>grab</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>renderWindowFor</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>renderWindowFor</anchor>
            <arglist>(QQuickWindow *win, QPoint *offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWindow *</type>
            <name>renderWindow</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>renderWindow</anchor>
            <arglist>(QPoint *offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderRequested</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>renderRequested</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChanged</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>sceneChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickTextDocument</name>
        <filename>qquicktextdocument.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickTextDocument</name>
            <anchorfile>qquicktextdocument.html</anchorfile>
            <anchor>QQuickTextDocument</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>textDocument</name>
            <anchorfile>qquicktextdocument.html</anchorfile>
            <anchor>textDocument</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickView</name>
        <filename>qquickview.html</filename>
        <base>QQuickWindow</base>
        <member kind="property" type="ResizeMode">
            <name>resizeMode</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>QQuickView</anchor>
            <arglist>(QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>QQuickView-2</anchor>
            <arglist>(QQmlEngine *engine, QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>QQuickView-3</anchor>
            <arglist>(const QUrl &amp;source, QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>dtor.QQuickView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>engine</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlContext *</type>
            <name>rootContext</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>rootContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>rootObject</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>rootObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>ResizeMode</name>
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeViewToRootObject">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeRootObjectToView">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ResizeMode</type>
            <name>resizeMode</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeMode</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>(ResizeMode )</arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QQmlError&gt;</type>
            <name>errors</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>initialSize</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>initialSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(QQuickView::Status status)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickWindow</name>
        <filename>qquickwindow.html</filename>
        <base>QWindow</base>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuickItem *">
            <name>contentItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>contentItem-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuickItem *">
            <name>activeFocusItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>activeFocusItem-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CreateTextureOption</name>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureHasAlphaChannel">
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureHasMipmaps">
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureOwnsGLTexture">
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureCanUseAtlas">
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RenderStage</name>
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BeforeSynchronizingStage">
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AfterSynchronizingStage">
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BeforeRenderingStage">
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AfterRenderingStage">
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AfterSwapStage">
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QQuickWindow::CreateTextureOption">
            <name>CreateTextureOptions</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SceneGraphError</name>
            <anchor>SceneGraphError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContextNotAvailable">
            <anchor>SceneGraphError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickWindow</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>QQuickWindow</anchor>
            <arglist>(QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickWindow</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>dtor.QQuickWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>contentItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>contentItem-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>activeFocusItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>activeFocusItem-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>mouseGrabberItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mouseGrabberItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sendEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sendEvent</anchor>
            <arglist>(QQuickItem *item, QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabWindow</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>grabWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderTarget</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setRenderTarget</anchor>
            <arglist>(QOpenGLFramebufferObject *fbo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject *</type>
            <name>renderTarget</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>renderTarget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderTarget</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setRenderTarget-2</anchor>
            <arglist>(uint fboId, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>renderTargetId</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>renderTargetId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>renderTargetSize</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>renderTargetSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetOpenGLState</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>resetOpenGLState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlIncubationController *</type>
            <name>incubationController</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>incubationController</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>accessibleRoot</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>accessibleRoot</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromImage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createTextureFromImage-2</anchor>
            <arglist>(const QImage &amp;image) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromImage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createTextureFromImage</anchor>
            <arglist>(const QImage &amp;image, CreateTextureOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromId</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createTextureFromId</anchor>
            <arglist>(uint id, const QSize &amp;size, CreateTextureOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearBeforeRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setClearBeforeRendering</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>clearBeforeRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>clearBeforeRendering</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasDefaultAlphaBuffer</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>hasDefaultAlphaBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultAlphaBuffer</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setDefaultAlphaBuffer</anchor>
            <arglist>(bool useAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPersistentOpenGLContext</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setPersistentOpenGLContext</anchor>
            <arglist>(bool persistent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPersistentOpenGLContext</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>isPersistentOpenGLContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPersistentSceneGraph</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setPersistentSceneGraph</anchor>
            <arglist>(bool persistent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPersistentSceneGraph</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>isPersistentSceneGraph</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>openglContext</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>openglContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSceneGraphInitialized</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>isSceneGraphInitialized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scheduleRenderJob</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>scheduleRenderJob</anchor>
            <arglist>(QRunnable *job, RenderStage stage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>effectiveDevicePixelRatio</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>effectiveDevicePixelRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameSwapped</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>frameSwapped</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>openglContextCreated</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>openglContextCreated</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphInitialized</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphInitialized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphInvalidated</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphInvalidated</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beforeSynchronizing</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>beforeSynchronizing</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>afterSynchronizing</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>afterSynchronizing</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beforeRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>beforeRendering</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>afterRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>afterRendering</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>afterAnimating</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>afterAnimating</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphAboutToStop</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphAboutToStop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closing</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>closing</anchor>
            <arglist>(QQuickCloseEvent *close)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeFocusItemChanged</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>activeFocusItem-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphError</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphError</anchor>
            <arglist>(QQuickWindow::SceneGraphError error, const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseResources</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>exposeEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>exposeEvent</anchor>
            <arglist>(QExposeEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGAbstractRenderer</name>
        <filename>qsgabstractrenderer.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>ClearModeBit</name>
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClearColorBuffer">
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClearDepthBuffer">
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClearStencilBuffer">
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGAbstractRenderer::ClearModeBit">
            <name>ClearMode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootNode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setRootNode</anchor>
            <arglist>(QSGRootNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGRootNode *</type>
            <name>rootNode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>rootNode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeviceRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setDeviceRect</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeviceRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setDeviceRect-2</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>deviceRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>deviceRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setViewportRect</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setViewportRect-2</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>viewportRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>viewportRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrixToRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setProjectionMatrixToRect</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrix</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setProjectionMatrix</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>projectionMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setClearColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>clearColor</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>clearColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearMode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setClearMode</anchor>
            <arglist>(ClearMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ClearMode</type>
            <name>clearMode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>clearMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>renderScene</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>renderScene</anchor>
            <arglist>(GLuint fboId) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphChanged</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>sceneGraphChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry</name>
        <filename>qsggeometry.html</filename>
        <class>QSGGeometry::Attribute</class>
        <class>QSGGeometry::AttributeSet</class>
        <class>QSGGeometry::Point2D</class>
        <class>QSGGeometry::TexturedPoint2D</class>
        <class>QSGGeometry::ColoredPoint2D</class>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const AttributeSet &amp;</type>
            <name>defaultAttributes_Point2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>defaultAttributes_Point2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const AttributeSet &amp;</type>
            <name>defaultAttributes_TexturedPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>defaultAttributes_TexturedPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const AttributeSet &amp;</type>
            <name>defaultAttributes_ColoredPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>defaultAttributes_ColoredPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>DataPattern</name>
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlwaysUploadPattern">
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamPattern">
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicPattern">
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticPattern">
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>QSGGeometry</anchor>
            <arglist>(const QSGGeometry::AttributeSet &amp;attributes, int vertexCount, int indexCount, int indexType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>dtor.QSGGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDrawingMode</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>setDrawingMode</anchor>
            <arglist>(GLenum mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>drawingMode</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>drawingMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(int vertexCount, int indexCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>vertexCount</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>vertexData</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Point2D *</type>
            <name>vertexDataAsPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TexturedPoint2D *</type>
            <name>vertexDataAsTexturedPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsTexturedPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ColoredPoint2D *</type>
            <name>vertexDataAsColoredPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsColoredPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>vertexData</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexData-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Point2D *</type>
            <name>vertexDataAsPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsPoint2D-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const TexturedPoint2D *</type>
            <name>vertexDataAsTexturedPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsTexturedPoint2D-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const ColoredPoint2D *</type>
            <name>vertexDataAsColoredPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsColoredPoint2D-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexCount</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>indexData</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint *</type>
            <name>indexDataAsUInt</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataAsUInt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16 *</type>
            <name>indexDataAsUShort</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataAsUShort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sizeOfIndex</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>sizeOfIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>indexData</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexData-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uint *</type>
            <name>indexDataAsUInt</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataAsUInt-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const quint16 *</type>
            <name>indexDataAsUShort</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataAsUShort-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeCount</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>attributeCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Attribute *</type>
            <name>attributes</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sizeOfVertex</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>sizeOfVertex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateRectGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>updateRectGeometry</anchor>
            <arglist>(QSGGeometry *g, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateTexturedRectGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>updateTexturedRectGeometry</anchor>
            <arglist>(QSGGeometry *g, const QRectF &amp;rect, const QRectF &amp;textureRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndexDataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>setIndexDataPattern</anchor>
            <arglist>(DataPattern p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DataPattern</type>
            <name>indexDataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataPattern</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexDataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>setVertexDataPattern</anchor>
            <arglist>(DataPattern p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DataPattern</type>
            <name>vertexDataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataPattern</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>markIndexDataDirty</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>markIndexDataDirty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>markVertexDataDirty</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>markVertexDataDirty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lineWidth</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>lineWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineWidth</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>setLineWidth</anchor>
            <arglist>(float width)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::Attribute</name>
        <filename>qsggeometry-attribute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Attribute</type>
            <name>create</name>
            <anchorfile>qsggeometry-attribute.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(int pos, int tupleSize, int primitiveType, bool isPosition)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::AttributeSet</name>
        <filename>qsggeometry-attributeset.html</filename>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::Point2D</name>
        <filename>qsggeometry-point2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>set</name>
            <anchorfile>qsggeometry-point2d.html</anchorfile>
            <anchor>set</anchor>
            <arglist>(float x, float y)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::TexturedPoint2D</name>
        <filename>qsggeometry-texturedpoint2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>set</name>
            <anchorfile>qsggeometry-texturedpoint2d.html</anchorfile>
            <anchor>set</anchor>
            <arglist>(float x, float y, float tx, float ty)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::ColoredPoint2D</name>
        <filename>qsggeometry-coloredpoint2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>set</name>
            <anchorfile>qsggeometry-coloredpoint2d.html</anchorfile>
            <anchor>set</anchor>
            <arglist>(float x, float y, uchar red, uchar green, uchar blue, uchar alpha)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialShader</name>
        <filename>qsgmaterialshader.html</filename>
        <class>QSGMaterialShader::RenderState</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGMaterialShader</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>QSGMaterialShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>activate</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>activate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>deactivate</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>deactivate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(const RenderState &amp;state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual char const * const *</type>
            <name>attributeNames</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>attributeNames</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLShaderProgram *</type>
            <name>program</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>program</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSGMaterialShader</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>QSGMaterialShader-2</anchor>
            <arglist>(QSGMaterialShaderPrivate &amp;dd)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderSourceFile</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>setShaderSourceFile</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;sourceFile)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderSourceFiles</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>setShaderSourceFiles</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QStringList &amp;sourceFiles)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>compile</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>compile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initialize</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual const char *</type>
            <name>vertexShader</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>vertexShader</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual const char *</type>
            <name>fragmentShader</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>fragmentShader</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialShader::RenderState</name>
        <filename>qsgmaterialshader-renderstate.html</filename>
        <member kind="enum">
            <name>DirtyState</name>
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyMatrix">
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyOpacity">
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGMaterialShader::RenderState::DirtyState">
            <name>DirtyStates</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DirtyStates</type>
            <name>dirtyStates</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>dirtyStates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMatrixDirty</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>isMatrixDirty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpacityDirty</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>isOpacityDirty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>opacity</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>combinedMatrix</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>combinedMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>modelViewMatrix</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>modelViewMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>projectionMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>viewportRect</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>viewportRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>deviceRect</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>deviceRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>determinant</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>devicePixelRatio</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialType</name>
        <filename>qsgmaterialtype.html</filename>
    </compound>
    <compound kind="class">
        <name>QSGMaterial</name>
        <filename>qsgmaterial.html</filename>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Blending">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RequiresDeterminant">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RequiresFullMatrixExceptTranslate">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RequiresFullMatrix">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomCompileStep">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGMaterial::Flag">
            <name>Flags</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSGMaterialType *</type>
            <name>type</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSGMaterialShader *</type>
            <name>createShader</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>createShader</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>compare</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QSGMaterial *other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGMaterial::Flags</type>
            <name>flags</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(Flags flags, bool on)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGNode</name>
        <filename>qsgnode.html</filename>
        <member kind="enum">
            <name>NodeType</name>
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BasicNodeType">
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GeometryNodeType">
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TransformNodeType">
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClipNodeType">
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpacityNodeType">
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OwnedByParent">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsePreprocess">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OwnsGeometry">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OwnsMaterial">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OwnsOpaqueMaterial">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InternalReserved">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGNode::Flag">
            <name>Flags</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DirtyStateBit</name>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtySubtreeBlocked">
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyMatrix">
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyNodeAdded">
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyNodeRemoved">
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyGeometry">
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyMaterial">
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyOpacity">
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGNode::DirtyStateBit">
            <name>DirtyState</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>QSGNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>dtor.QSGNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>parent</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChildNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>removeChildNode</anchor>
            <arglist>(QSGNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllChildNodes</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>removeAllChildNodes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prependChildNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>prependChildNode</anchor>
            <arglist>(QSGNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendChildNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>appendChildNode</anchor>
            <arglist>(QSGNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChildNodeBefore</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>insertChildNodeBefore</anchor>
            <arglist>(QSGNode *node, QSGNode *before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChildNodeAfter</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>insertChildNodeAfter</anchor>
            <arglist>(QSGNode *node, QSGNode *after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>childCount</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>childCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>childAtIndex</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>childAtIndex</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>firstChild</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>firstChild</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>lastChild</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>lastChild</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>nextSibling</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>nextSibling</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>previousSibling</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>previousSibling</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NodeType</type>
            <name>type</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>markDirty</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>markDirty</anchor>
            <arglist>(DirtyState bits)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSubtreeBlocked</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>isSubtreeBlocked</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Flags</type>
            <name>flags</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(Flag f, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(Flags f, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>preprocess</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>preprocess</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGBasicGeometryNode</name>
        <filename>qsgbasicgeometrynode.html</filename>
        <base>QSGNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSGBasicGeometryNode</name>
            <anchorfile>qsgbasicgeometrynode.html</anchorfile>
            <anchor>dtor.QSGBasicGeometryNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qsgbasicgeometrynode.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(QSGGeometry *geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSGGeometry *</type>
            <name>geometry</name>
            <anchorfile>qsgbasicgeometrynode.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGGeometry *</type>
            <name>geometry</name>
            <anchorfile>qsgbasicgeometrynode.html</anchorfile>
            <anchor>geometry-2</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometryNode</name>
        <filename>qsggeometrynode.html</filename>
        <base>QSGBasicGeometryNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGGeometryNode</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>QSGGeometryNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSGGeometryNode</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>dtor.QSGGeometryNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaterial</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>setMaterial</anchor>
            <arglist>(QSGMaterial *material)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGMaterial *</type>
            <name>material</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>material</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpaqueMaterial</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>setOpaqueMaterial</anchor>
            <arglist>(QSGMaterial *material)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGMaterial *</type>
            <name>opaqueMaterial</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>opaqueMaterial</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGClipNode</name>
        <filename>qsgclipnode.html</filename>
        <base>QSGBasicGeometryNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGClipNode</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>QSGClipNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSGClipNode</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>dtor.QSGClipNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIsRectangular</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>setIsRectangular</anchor>
            <arglist>(bool rectHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRectangular</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>isRectangular</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>setClipRect</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>clipRect</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>clipRect</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGTransformNode</name>
        <filename>qsgtransformnode.html</filename>
        <base>QSGNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGTransformNode</name>
            <anchorfile>qsgtransformnode.html</anchorfile>
            <anchor>QSGTransformNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSGTransformNode</name>
            <anchorfile>qsgtransformnode.html</anchorfile>
            <anchor>dtor.QSGTransformNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qsgtransformnode.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix4x4 &amp;</type>
            <name>matrix</name>
            <anchorfile>qsgtransformnode.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGOpacityNode</name>
        <filename>qsgopacitynode.html</filename>
        <base>QSGNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGOpacityNode</name>
            <anchorfile>qsgopacitynode.html</anchorfile>
            <anchor>QSGOpacityNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSGOpacityNode</name>
            <anchorfile>qsgopacitynode.html</anchorfile>
            <anchor>dtor.QSGOpacityNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qsgopacitynode.html</anchorfile>
            <anchor>setOpacity</anchor>
            <arglist>(qreal opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qsgopacitynode.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGEngine</name>
        <filename>qsgengine.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>CreateTextureOption</name>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureHasAlphaChannel">
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureOwnsGLTexture">
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureCanUseAtlas">
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGEngine::CreateTextureOption">
            <name>CreateTextureOptions</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGEngine</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>QSGEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSGEngine</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>dtor.QSGEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGAbstractRenderer *</type>
            <name>createRenderer</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createRenderer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromImage</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createTextureFromImage</anchor>
            <arglist>(const QImage &amp;image, CreateTextureOptions options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromId</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createTextureFromId</anchor>
            <arglist>(uint id, const QSize &amp;size, CreateTextureOptions options) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGFlatColorMaterial</name>
        <filename>qsgflatcolormaterial.html</filename>
        <base>QSGMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGFlatColorMaterial</name>
            <anchorfile>qsgflatcolormaterial.html</anchorfile>
            <anchor>QSGFlatColorMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qsgflatcolormaterial.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor &amp;</type>
            <name>color</name>
            <anchorfile>qsgflatcolormaterial.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGSimpleMaterialShader</name>
        <filename>qsgsimplematerialshader.html</filename>
        <base>QSGMaterialShader</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>uniformMatrixName</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>uniformMatrixName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>uniformOpacityName</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>uniformOpacityName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(const State *newState, const State *oldState) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resolveUniforms</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>resolveUniforms</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QByteArray&gt;</type>
            <name>attributes</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGSimpleMaterial</name>
        <filename>qsgsimplematerial.html</filename>
        <base>QSGMaterial</base>
    </compound>
    <compound kind="class">
        <name>QSGSimpleRectNode</name>
        <filename>qsgsimplerectnode.html</filename>
        <base>QSGGeometryNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGSimpleRectNode</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>QSGSimpleRectNode</anchor>
            <arglist>(const QRectF &amp;rect, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGSimpleRectNode</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>QSGSimpleRectNode-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>setRect-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGSimpleTextureNode</name>
        <filename>qsgsimpletexturenode.html</filename>
        <base>QSGGeometryNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGSimpleTextureNode</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>QSGSimpleTextureNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSGSimpleTextureNode</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>dtor.QSGSimpleTextureNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(const QRectF &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setRect-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setSourceRect</anchor>
            <arglist>(const QRectF &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setSourceRect-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sourceRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>sourceRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(QSGTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>texture</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltering</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setFiltering</anchor>
            <arglist>(QSGTexture::Filtering filtering)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>filtering</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>filtering</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>TextureCoordinatesTransformFlag</name>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoTransform">
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MirrorHorizontally">
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MirrorVertically">
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGSimpleTextureNode::TextureCoordinatesTransformFlag">
            <name>TextureCoordinatesTransformMode</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureCoordinatesTransform</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setTextureCoordinatesTransform</anchor>
            <arglist>(TextureCoordinatesTransformMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TextureCoordinatesTransformMode</type>
            <name>textureCoordinatesTransform</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>textureCoordinatesTransform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOwnsTexture</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setOwnsTexture</anchor>
            <arglist>(bool owns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownsTexture</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>ownsTexture</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGTexture</name>
        <filename>qsgtexture.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGTexture</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>QSGTexture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSGTexture</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>dtor.QSGTexture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>WrapMode</name>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Repeat">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClampToEdge">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Filtering</name>
            <anchor>Filtering-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>Filtering-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nearest">
            <anchor>Filtering-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Linear">
            <anchor>Filtering-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>textureId</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>textureId</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>textureSize</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>textureSize</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>hasAlphaChannel</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>hasAlphaChannel</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>hasMipmaps</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>hasMipmaps</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>normalizedTextureSubRect</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>normalizedTextureSubRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isAtlasTexture</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>isAtlasTexture</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGTexture *</type>
            <name>removedFromAtlas</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>removedFromAtlas</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>bind</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateBindOptions</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>updateBindOptions</anchor>
            <arglist>(bool force)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmapFiltering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setMipmapFiltering</anchor>
            <arglist>(Filtering filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>mipmapFiltering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>mipmapFiltering</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setFiltering</anchor>
            <arglist>(Filtering filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>filtering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>filtering</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalWrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setHorizontalWrapMode</anchor>
            <arglist>(WrapMode hwrap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::WrapMode</type>
            <name>horizontalWrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>horizontalWrapMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalWrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setVerticalWrapMode</anchor>
            <arglist>(WrapMode vwrap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::WrapMode</type>
            <name>verticalWrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>verticalWrapMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>convertToNormalizedSourceRect</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>convertToNormalizedSourceRect</anchor>
            <arglist>(const QRectF &amp;rect) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGDynamicTexture</name>
        <filename>qsgdynamictexture.html</filename>
        <base>QSGTexture</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>updateTexture</name>
            <anchorfile>qsgdynamictexture.html</anchorfile>
            <anchor>updateTexture</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGOpaqueTextureMaterial</name>
        <filename>qsgopaquetexturematerial.html</filename>
        <base>QSGMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGOpaqueTextureMaterial</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>QSGOpaqueTextureMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(QSGTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>texture</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmapFiltering</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setMipmapFiltering</anchor>
            <arglist>(QSGTexture::Filtering filtering)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>mipmapFiltering</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>mipmapFiltering</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltering</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setFiltering</anchor>
            <arglist>(QSGTexture::Filtering filtering)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>filtering</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>filtering</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalWrapMode</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setHorizontalWrapMode</anchor>
            <arglist>(QSGTexture::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::WrapMode</type>
            <name>horizontalWrapMode</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>horizontalWrapMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalWrapMode</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setVerticalWrapMode</anchor>
            <arglist>(QSGTexture::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::WrapMode</type>
            <name>verticalWrapMode</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>verticalWrapMode</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGTextureMaterial</name>
        <filename>qsgtexturematerial.html</filename>
        <base>QSGOpaqueTextureMaterial</base>
    </compound>
    <compound kind="class">
        <name>QSGTextureProvider</name>
        <filename>qsgtextureprovider.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSGTexture *</type>
            <name>texture</name>
            <anchorfile>qsgtextureprovider.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureChanged</name>
            <anchorfile>qsgtextureprovider.html</anchorfile>
            <anchor>textureChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGVertexColorMaterial</name>
        <filename>qsgvertexcolormaterial.html</filename>
        <base>QSGMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGVertexColorMaterial</name>
            <anchorfile>qsgvertexcolormaterial.html</anchorfile>
            <anchor>QSGVertexColorMaterial</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickTextureFactory</name>
        <filename>qquicktexturefactory.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickTextureFactory</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>QQuickTextureFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickTextureFactory</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>dtor.QQuickTextureFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSGTexture *</type>
            <name>createTexture</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>createTexture</anchor>
            <arglist>(QQuickWindow *window) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>textureSize</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>textureSize</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>textureByteCount</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>textureByteCount</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QImage</type>
            <name>image</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>image</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickImageProvider</name>
        <filename>qquickimageprovider.html</filename>
        <base>QQmlImageProviderBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickImageProvider</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>QQuickImageProvider</anchor>
            <arglist>(ImageType type, Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickImageProvider</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>dtor.QQuickImageProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual ImageType</type>
            <name>imageType</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>imageType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Flags</type>
            <name>flags</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QImage</type>
            <name>requestImage</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>requestImage</anchor>
            <arglist>(const QString &amp;id, QSize *size, const QSize &amp;requestedSize, bool requestedAutoTransform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPixmap</type>
            <name>requestPixmap</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>requestPixmap</anchor>
            <arglist>(const QString &amp;id, QSize *size, const QSize &amp;requestedSize, bool requestedAutoTransform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QQuickTextureFactory *</type>
            <name>requestTexture</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>requestTexture</anchor>
            <arglist>(const QString &amp;id, QSize *size, const QSize &amp;requestedSize, bool requestedAutoTransform)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickWidget</name>
        <filename>qquickwidget.html</filename>
        <base>QWidget</base>
        <member kind="property" type="ResizeMode">
            <name>resizeMode</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickWidget</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>QQuickWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickWidget</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>QQuickWidget-2</anchor>
            <arglist>(QQmlEngine *engine, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickWidget</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>QQuickWidget-3</anchor>
            <arglist>(const QUrl &amp;source, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickWidget</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dtor.QQuickWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>engine</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlContext *</type>
            <name>rootContext</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>rootContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>rootObject</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>rootObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>ResizeMode</name>
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeViewToRootObject">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SizeRootObjectToView">
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ResizeMode</type>
            <name>resizeMode</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeMode</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>(ResizeMode )</arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QQmlError&gt;</type>
            <name>errors</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>initialSize</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>initialSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabFramebuffer</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>grabFramebuffer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>setClearColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickWindow *</type>
            <name>quickWindow</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>quickWindow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(QQuickWidget::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphError</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>sceneGraphError</anchor>
            <arglist>(QQuickWindow::SceneGraphError error, const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt.labs.folderlistmodel.FolderListModel</name>
        <filename>qml-qt-labs-folderlistmodel-folderlistmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt.labs.settings.Settings</name>
        <filename>qml-qt-labs-settings-settings.html</filename>
    </compound>
    <compound kind="class">
        <name>QtTest.SignalSpy</name>
        <filename>qml-qttest-signalspy.html</filename>
    </compound>
    <compound kind="class">
        <name>QtTest.TestCase</name>
        <filename>qml-qttest-testcase.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.XmlListModel.XmlRole</name>
        <filename>qml-qtquick-xmllistmodel-xmlrole.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.XmlListModel.XmlListModel</name>
        <filename>qml-qtquick-xmllistmodel-xmllistmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Age</name>
        <filename>qml-qtquick-particles-age.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.AngleDirection</name>
        <filename>qml-qtquick-particles-angledirection.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.CumulativeDirection</name>
        <filename>qml-qtquick-particles-cumulativedirection.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.CustomParticle</name>
        <filename>qml-qtquick-particles-customparticle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Direction</name>
        <filename>qml-qtquick-particles-direction.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.EllipseShape</name>
        <filename>qml-qtquick-particles-ellipseshape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Friction</name>
        <filename>qml-qtquick-particles-friction.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Gravity</name>
        <filename>qml-qtquick-particles-gravity.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.GroupGoal</name>
        <filename>qml-qtquick-particles-groupgoal.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ImageParticle</name>
        <filename>qml-qtquick-particles-imageparticle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ItemParticle</name>
        <filename>qml-qtquick-particles-itemparticle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.LineShape</name>
        <filename>qml-qtquick-particles-lineshape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.MaskShape</name>
        <filename>qml-qtquick-particles-maskshape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Affector</name>
        <filename>qml-qtquick-particles-affector.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Emitter</name>
        <filename>qml-qtquick-particles-emitter.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Shape</name>
        <filename>qml-qtquick-particles-shape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ParticleGroup</name>
        <filename>qml-qtquick-particles-particlegroup.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ParticlePainter</name>
        <filename>qml-qtquick-particles-particlepainter.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ParticleSystem</name>
        <filename>qml-qtquick-particles-particlesystem.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Attractor</name>
        <filename>qml-qtquick-particles-attractor.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.PointDirection</name>
        <filename>qml-qtquick-particles-pointdirection.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.RectangleShape</name>
        <filename>qml-qtquick-particles-rectangleshape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.SpriteGoal</name>
        <filename>qml-qtquick-particles-spritegoal.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.TargetDirection</name>
        <filename>qml-qtquick-particles-targetdirection.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.TrailEmitter</name>
        <filename>qml-qtquick-particles-trailemitter.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Turbulence</name>
        <filename>qml-qtquick-particles-turbulence.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Particle</name>
        <filename>qml-qtquick-particles-particle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Wander</name>
        <filename>qml-qtquick-particles-wander.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Canvas</name>
        <filename>qml-qtquick-canvas.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Context2D</name>
        <filename>qml-qtquick-context2d.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.CanvasImageData</name>
        <filename>qml-qtquick-canvasimagedata.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.CanvasPixelArray</name>
        <filename>qml-qtquick-canvaspixelarray.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.CanvasGradient</name>
        <filename>qml-qtquick-canvasgradient.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Accessible</name>
        <filename>qml-qtquick-accessible.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnimatedImage</name>
        <filename>qml-qtquick-animatedimage.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnimatedSprite</name>
        <filename>qml-qtquick-animatedsprite.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.BorderImage</name>
        <filename>qml-qtquick-borderimage.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Drag</name>
        <filename>qml-qtquick-drag.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.DropArea</name>
        <filename>qml-qtquick-droparea.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.DragEvent</name>
        <filename>qml-qtquick-dragevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.KeyEvent</name>
        <filename>qml-qtquick-keyevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.MouseEvent</name>
        <filename>qml-qtquick-mouseevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.WheelEvent</name>
        <filename>qml-qtquick-wheelevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Flickable</name>
        <filename>qml-qtquick-flickable.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Flipable</name>
        <filename>qml-qtquick-flipable.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.FocusScope</name>
        <filename>qml-qtquick-focusscope.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.GridView</name>
        <filename>qml-qtquick-gridview.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Image</name>
        <filename>qml-qtquick-image.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Transform</name>
        <filename>qml-qtquick-transform.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.KeyNavigation</name>
        <filename>qml-qtquick-keynavigation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Keys</name>
        <filename>qml-qtquick-keys.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.LayoutMirroring</name>
        <filename>qml-qtquick-layoutmirroring.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Item</name>
        <filename>qml-qtquick-item.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ParentAnimation</name>
        <filename>qml-qtquick-parentanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnchorAnimation</name>
        <filename>qml-qtquick-anchoranimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathAnimation</name>
        <filename>qml-qtquick-pathanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ItemGrabResult</name>
        <filename>qml-qtquick-itemgrabresult.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ViewTransition</name>
        <filename>qml-qtquick-viewtransition.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ListView</name>
        <filename>qml-qtquick-listview.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Loader</name>
        <filename>qml-qtquick-loader.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.MouseArea</name>
        <filename>qml-qtquick-mousearea.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.TouchPoint</name>
        <filename>qml-qtquick-touchpoint.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.MultiPointTouchArea</name>
        <filename>qml-qtquick-multipointtoucharea.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.OpenGLInfo</name>
        <filename>qml-qtquick-openglinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathView</name>
        <filename>qml-qtquick-pathview.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PinchEvent</name>
        <filename>qml-qtquick-pinchevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PinchArea</name>
        <filename>qml-qtquick-pincharea.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Positioner</name>
        <filename>qml-qtquick-positioner.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Column</name>
        <filename>qml-qtquick-column.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Row</name>
        <filename>qml-qtquick-row.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Grid</name>
        <filename>qml-qtquick-grid.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Flow</name>
        <filename>qml-qtquick-flow.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.GradientStop</name>
        <filename>qml-qtquick-gradientstop.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Gradient</name>
        <filename>qml-qtquick-gradient.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Rectangle</name>
        <filename>qml-qtquick-rectangle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Repeater</name>
        <filename>qml-qtquick-repeater.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Window.Screen</name>
        <filename>qml-qtquick-window-screen.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ShaderEffect</name>
        <filename>qml-qtquick-shadereffect.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.GridMesh</name>
        <filename>qml-qtquick-gridmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ShaderEffectSource</name>
        <filename>qml-qtquick-shadereffectsource.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Sprite</name>
        <filename>qml-qtquick-sprite.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SpriteSequence</name>
        <filename>qml-qtquick-spritesequence.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ParentChange</name>
        <filename>qml-qtquick-parentchange.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnchorChanges</name>
        <filename>qml-qtquick-anchorchanges.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Text</name>
        <filename>qml-qtquick-text.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.TextEdit</name>
        <filename>qml-qtquick-textedit.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.TextInput</name>
        <filename>qml-qtquick-textinput.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.IntValidator</name>
        <filename>qml-qtquick-intvalidator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.DoubleValidator</name>
        <filename>qml-qtquick-doublevalidator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.RegExpValidator</name>
        <filename>qml-qtquick-regexpvalidator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Translate</name>
        <filename>qml-qtquick-translate.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Scale</name>
        <filename>qml-qtquick-scale.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Rotation</name>
        <filename>qml-qtquick-rotation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Matrix4x4</name>
        <filename>qml-qtquick-matrix4x4.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Window.Window</name>
        <filename>qml-qtquick-window-window.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Window.CloseEvent</name>
        <filename>qml-qtquick-window-closeevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Animation</name>
        <filename>qml-qtquick-animation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PauseAnimation</name>
        <filename>qml-qtquick-pauseanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ColorAnimation</name>
        <filename>qml-qtquick-coloranimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ScriptAction</name>
        <filename>qml-qtquick-scriptaction.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PropertyAction</name>
        <filename>qml-qtquick-propertyaction.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.NumberAnimation</name>
        <filename>qml-qtquick-numberanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Vector3dAnimation</name>
        <filename>qml-qtquick-vector3danimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.RotationAnimation</name>
        <filename>qml-qtquick-rotationanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SequentialAnimation</name>
        <filename>qml-qtquick-sequentialanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ParallelAnimation</name>
        <filename>qml-qtquick-parallelanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PropertyAnimation</name>
        <filename>qml-qtquick-propertyanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnimationController</name>
        <filename>qml-qtquick-animationcontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Animator</name>
        <filename>qml-qtquick-animator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.XAnimator</name>
        <filename>qml-qtquick-xanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.YAnimator</name>
        <filename>qml-qtquick-yanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ScaleAnimator</name>
        <filename>qml-qtquick-scaleanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.OpacityAnimator</name>
        <filename>qml-qtquick-opacityanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.RotationAnimator</name>
        <filename>qml-qtquick-rotationanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.UniformAnimator</name>
        <filename>qml-qtquick-uniformanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Behavior</name>
        <filename>qml-qtquick-behavior.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.FontLoader</name>
        <filename>qml-qtquick-fontloader.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.FontMetrics</name>
        <filename>qml-qtquick-fontmetrics.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathElement</name>
        <filename>qml-qtquick-pathelement.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Path</name>
        <filename>qml-qtquick-path.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathAttribute</name>
        <filename>qml-qtquick-pathattribute.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathLine</name>
        <filename>qml-qtquick-pathline.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathQuad</name>
        <filename>qml-qtquick-pathquad.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathCubic</name>
        <filename>qml-qtquick-pathcubic.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathCurve</name>
        <filename>qml-qtquick-pathcurve.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathArc</name>
        <filename>qml-qtquick-patharc.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathSvg</name>
        <filename>qml-qtquick-pathsvg.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathPercent</name>
        <filename>qml-qtquick-pathpercent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathInterpolator</name>
        <filename>qml-qtquick-pathinterpolator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PropertyChanges</name>
        <filename>qml-qtquick-propertychanges.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Shortcut</name>
        <filename>qml-qtquick-shortcut.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SmoothedAnimation</name>
        <filename>qml-qtquick-smoothedanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SpringAnimation</name>
        <filename>qml-qtquick-springanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.State</name>
        <filename>qml-qtquick-state.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.StateChangeScript</name>
        <filename>qml-qtquick-statechangescript.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.StateGroup</name>
        <filename>qml-qtquick-stategroup.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SystemPalette</name>
        <filename>qml-qtquick-systempalette.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.TextMetrics</name>
        <filename>qml-qtquick-textmetrics.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Transition</name>
        <filename>qml-qtquick-transition.html</filename>
    </compound>
</tagfile>
