<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="namespace">
        <name>Qt3D</name>
        <filename>qt3d.html</filename>
        <member kind="typedef" type="">
            <name>QBackendNodeFunctorPtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QBackendNodeFunctorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QAbstractAspect</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>registerBackendType</anchor>
            <arglist>(const QBackendNodeFunctorPtr &amp;functor)</arglist>
        </member>
        <class>Qt3D::QAspectEngine</class>
        <class>Qt3D::QAspectFactory</class>
        <class>Qt3D::QAspectManager</class>
        <class>Qt3D::QAspectThread</class>
        <class>Qt3D::QAxisAlignedBoundingBox</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug dbg, const QAxisAlignedBoundingBox &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QAxisAlignedBoundingBox &amp;a, const QAxisAlignedBoundingBox &amp;b)</arglist>
        </member>
        <class>Qt3D::QCamera</class>
        <class>Qt3D::QCameraLens</class>
        <member kind="typedef" type="">
            <name>QAbstractBufferPtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QAbstractBufferPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QAbstractAttribute</class>
        <class>Qt3D::QAbstractBuffer</class>
        <class>Qt3D::QUrlHelper</class>
        <class>Qt3D::Dependency</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const Dependency &amp;left, const Dependency &amp;right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const Dependency &amp;left, const Dependency &amp;right)</arglist>
        </member>
        <class>Qt3D::DependencyHandler</class>
        <class>Qt3D::QAspectJob</class>
        <member kind="typedef" type="">
            <name>QAspectJobPtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QAspectJobPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QAspectJobProviderInterface</class>
        <class>Qt3D::QThreadPooler</class>
        <class>Qt3D::RunnableInterface</class>
        <class>Qt3D::AspectTaskRunnable</class>
        <class>Qt3D::SyncTaskRunnable</class>
        <class>Qt3D::WeaverJob</class>
        <class>Qt3D::PropertyChangeHandler</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>PropertyChangeHandler</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>PropertyChangeHandler</anchor>
            <arglist>(Receiver *receiver, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToPropertyChange</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>connectToPropertyChange</anchor>
            <arglist>(const QObject *object, int propertyIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnectFromPropertyChange</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>disconnectFromPropertyChange</anchor>
            <arglist>(const QObject *object, int propertyIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qt_metacall</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>qt_metacall</anchor>
            <arglist>(QMetaObject::Call call, int methodId, void **args)</arglist>
        </member>
        <class>Qt3D::QBackendNodeFunctor</class>
        <class>Qt3D::QBackendNode</class>
        <class>Qt3D::QComponent</class>
        <member kind="typedef" type="">
            <name>QComponentList</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QComponentList-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QEntity</class>
        <member kind="typedef" type="">
            <name>QNodeList</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QNodeList-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodePtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QNodePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QNode</class>
        <class>Qt3D::QNodeId</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDebug d, const QNodeId &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(const QNodeId &amp;id, uint seed)</arglist>
        </member>
        <class>Qt3D::QNodeVisitor</class>
        <class>Qt3D::FunctorType</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>functorTypeId</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>functorTypeId</anchor>
            <arglist>()</arglist>
        </member>
        <class>Qt3D::QAbstractFunctor</class>
        <class>Qt3D::QBackendNodeFactory</class>
        <class>Qt3D::QBackendScenePropertyChange</class>
        <member kind="typedef" type="">
            <name>QBackendScenePropertyChangePtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QBackendScenePropertyChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QBoundingSphere</class>
        <class>Qt3D::QBoundingVolume</class>
        <class>Qt3D::QBoundingVolumeProvider</class>
        <class>Qt3D::QAbstractArbiter</class>
        <class>Qt3D::QChangeArbiter</class>
        <member kind="typedef" type="">
            <name>QSceneChangeList</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QSceneChangeList-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QLockableObserverInterface</class>
        <class>Qt3D::QObservableInterface</class>
        <class>Qt3D::QObserverInterface</class>
        <class>Qt3D::QAbstractPostman</class>
        <class>Qt3D::QPostman</class>
        <class>Qt3D::QRay3D</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(QDebug dbg, const Qt3D::QRay3D &amp;ray)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(QDataStream &amp;stream, const Qt3D::QRay3D &amp;ray)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, Qt3D::QRay3D &amp;ray)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QObservableList</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QObservableList-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QScene</class>
        <member kind="enum">
            <name>ChangeFlag</name>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeCreated">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeAboutToBeDeleted">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeDeleted">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeUpdated">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeAdded">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NodeRemoved">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComponentAdded">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComponentRemoved">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllChanges">
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3D::ChangeFlag">
            <name>ChangeFlags</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QSceneChange</class>
        <member kind="typedef" type="">
            <name>QSceneChangePtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QSceneChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QSceneObserverInterface</class>
        <class>Qt3D::QScenePropertyChange</class>
        <member kind="typedef" type="">
            <name>QScenePropertyChangePtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QScenePropertyChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QScheduler</class>
        <class>Qt3D::QTickClock</class>
        <class>Qt3D::QBoundedCircularBuffer</class>
        <class>Qt3D::CircularBufferData</class>
        <class>Qt3D::TypedCircularBufferData</class>
        <class>Qt3D::QCircularBuffer</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;lhs, const QCircularBuffer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;lhs, const QCircularBuffer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;lhs, const QCircularBuffer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCircularBuffer&lt;T&gt; &amp;lhs, QCircularBuffer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;lhs, const QCircularBuffer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;lhs, const QCircularBuffer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;lhs, const QCircularBuffer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;lhs, const QCircularBuffer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <class>Qt3D::QFrameAllocator</class>
        <class>Qt3D::QFrameChunk</class>
        <class>Qt3D::QFixedFrameAllocator</class>
        <class>Qt3D::QHandle</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(QDebug dbg, const QHandle&lt;T, INDEXBITS&gt; &amp;h)</arglist>
        </member>
        <class>Qt3D::QHandleManager</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHandle&lt;T, INDEXBITS&gt;</type>
            <name>acquire</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>acquire</anchor>
            <arglist>(T *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle, T *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle, bool *ok)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle, bool *ok) const</arglist>
        </member>
        <class>Qt3D::NonLockingPolicy</class>
        <class>Qt3D::ObjectLevelLockingPolicy</class>
        <class>Qt3D::QResourceInfo</class>
        <class>Qt3D::Int2Type</class>
        <class>Qt3D::ArrayAllocatingPolicy</class>
        <class>Qt3D::ArrayPreallocationPolicy</class>
        <class>Qt3D::ListAllocatingPolicy</class>
        <class>Qt3D::QResourceManager</class>
        <class>Qt3D::NullSystemInformationService</class>
        <class>Qt3D::NullOpenGLInformationService</class>
        <class>Qt3D::NullCollisionQueryService</class>
        <class>Qt3D::QAbstractCollisionQueryService</class>
        <class>Qt3D::QAbstractCollisionQueryServicePrivate</class>
        <class>Qt3D::QAbstractFrameAdvanceService</class>
        <member kind="typedef" type="">
            <name>QQueryHandle</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>QQueryHandle-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QCollisionQueryResult</class>
        <class>Qt3D::QCollisionQueryResultPrivate</class>
        <class>Qt3D::QOpenGLInformationService</class>
        <class>Qt3D::QAbstractServiceProvider</class>
        <class>Qt3D::QServiceLocator</class>
        <class>Qt3D::QSystemInformationService</class>
        <class>Qt3D::QTickClockService</class>
        <class>Qt3D::QAbstractTransform</class>
        <class>Qt3D::QLookAtTransform</class>
        <class>Qt3D::QMatrixTransform</class>
        <class>Qt3D::QRotateTransform</class>
        <class>Qt3D::QScaleTransform</class>
        <class>Qt3D::QTransform</class>
        <class>Qt3D::QTranslateTransform</class>
        <namespace>Qt3D::Input</namespace>
        <member kind="typedef" type="">
            <name>Q3DKeyEventPtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>Q3DKeyEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::Q3DKeyEvent</class>
        <class>Qt3D::Q3DMouseEvent</class>
        <member kind="typedef" type="">
            <name>Q3DMouseEventPtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>Q3DMouseEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::Q3DWheelEvent</class>
        <member kind="typedef" type="">
            <name>Q3DWheelEventPtr</name>
            <anchorfile>qt3d.html</anchorfile>
            <anchor>Q3DWheelEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::QInputAspect</class>
        <class>Qt3D::QKeyboardController</class>
        <class>Qt3D::QKeyboardInput</class>
        <class>Qt3D::QMouseController</class>
        <class>Qt3D::QMouseControllerPrivate</class>
        <class>Qt3D::QMouseInput</class>
        <class>Qt3D::QMouseInputPrivate</class>
        <namespace>Qt3D::AssimpHelper</namespace>
        <class>Qt3D::AssimpParser</class>
        <class>Qt3D::GLTFParser</class>
        <namespace>Qt3D::Quick</namespace>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractAspect</name>
        <filename>qt3d-qabstractaspect.html</filename>
        <base>QObject</base>
        <base>QAspectJobProviderInterface</base>
        <base>QSceneObserverInterface</base>
        <base>QBackendNodeFactory</base>
        <member kind="enum">
            <name>AspectType</name>
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AspectRenderer">
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AspectAnimation">
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AspectCollision">
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AspectPhysics">
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AspectPhysicsAndCollision">
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AspectAI">
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AspectAudio">
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AspectOther">
            <anchor>AspectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAspect</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>QAbstractAspect</anchor>
            <arglist>(AspectType aspectType, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AspectType</type>
            <name>aspectType</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>aspectType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>registerAspect</anchor>
            <arglist>(QEntity *rootObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QServiceLocator *</type>
            <name>services</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>services</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAspectJobManager *</type>
            <name>jobManager</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>jobManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isShuttingDown</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>isShuttingDown</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QBackendNode *</type>
            <name>createBackendNode</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>createBackendNode</anchor>
            <arglist>(QNode *frontend) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>getBackendNode</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>getBackendNode</anchor>
            <arglist>(QNode *frontend) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>clearBackendNode</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>clearBackendNode</anchor>
            <arglist>(QNode *frontend) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>registerBackendType</anchor>
            <arglist>(const QBackendNodeFunctorPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3d-qabstractaspect.html</anchorfile>
            <anchor>registerBackendType-2</anchor>
            <arglist>(const QMetaObject &amp;, const QBackendNodeFunctorPtr &amp;functor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAspectEngine</name>
        <filename>qt3d-qaspectengine.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectEngine</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>QAspectEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAspectEngine</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>dtor.QAspectEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shutdown</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>shutdown</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootEntity</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>setRootEntity</anchor>
            <arglist>(QEntity *root)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;QEntity&gt;</type>
            <name>rootEntity</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>rootEntity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectFactory</type>
            <name>aspectFactory</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>aspectFactory</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectFactory</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>setAspectFactory</anchor>
            <arglist>(const QAspectFactory &amp;factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariantMap &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>registerAspect</anchor>
            <arglist>(QAbstractAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>registerAspect-2</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractAspect *&gt;</type>
            <name>aspects</name>
            <anchorfile>qt3d-qaspectengine.html</anchorfile>
            <anchor>aspects</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAspectFactory</name>
        <filename>qt3d-qaspectfactory.html</filename>
        <member kind="typedef" type="">
            <name>CreateFunction</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>CreateFunction-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAbstractAspect *</type>
            <name>functionHelper</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>functionHelper</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectFactory</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>QAspectFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectFactory</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>QAspectFactory-2</anchor>
            <arglist>(const QAspectFactory &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAspectFactory</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>dtor.QAspectFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectFactory &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QAspectFactory &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectFactory &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QAspectFactory &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QAspectFactory &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFactory</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>addFactory</anchor>
            <arglist>(const QString &amp;name, CreateFunction factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>availableFactories</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>availableFactories</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAspect *</type>
            <name>createAspect</name>
            <anchorfile>qt3d-qaspectfactory.html</anchorfile>
            <anchor>createAspect</anchor>
            <arglist>(const QString &amp;aspect, QObject *parent) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAspectManager</name>
        <filename>qt3d-qaspectmanager.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectManager</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>QAspectManager</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAspectManager</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>dtor.QAspectManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isShuttingDown</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>isShuttingDown</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shutdown</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>shutdown</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootEntity</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>setRootEntity</anchor>
            <arglist>(Qt3D::QEntity *root)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariantMap &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>registerAspect</anchor>
            <arglist>(Qt3D::QAbstractAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>data</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exec</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quit</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>quit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;QAbstractAspect *&gt; &amp;</type>
            <name>aspects</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>aspects</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAspectJobManager *</type>
            <name>jobManager</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>jobManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChangeArbiter *</type>
            <name>changeArbiter</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>changeArbiter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QServiceLocator *</type>
            <name>serviceLocator</name>
            <anchorfile>qt3d-qaspectmanager.html</anchorfile>
            <anchor>serviceLocator</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAspectThread</name>
        <filename>qt3d-qaspectthread.html</filename>
        <base>QThread</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectThread</name>
            <anchorfile>qt3d-qaspectthread.html</anchorfile>
            <anchor>QAspectThread</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForStart</name>
            <anchorfile>qt3d-qaspectthread.html</anchorfile>
            <anchor>waitForStart</anchor>
            <arglist>(Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectManager *</type>
            <name>aspectManager</name>
            <anchorfile>qt3d-qaspectthread.html</anchorfile>
            <anchor>aspectManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qt3d-qaspectthread.html</anchorfile>
            <anchor>run</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAxisAlignedBoundingBox</name>
        <filename>qt3d-qaxisalignedboundingbox.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisAlignedBoundingBox</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>QAxisAlignedBoundingBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisAlignedBoundingBox</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>QAxisAlignedBoundingBox-2</anchor>
            <arglist>(const QVector&lt;QVector3D&gt; &amp;points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QVector&lt;QVector3D&gt; &amp;points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>center</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>radii</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>radii</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>minPoint</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>minPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>maxPoint</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>maxPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>xExtent</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>xExtent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>yExtent</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>yExtent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zExtent</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>zExtent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maxExtent</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>maxExtent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minExtent</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>minExtent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QVector3D &amp;pt) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>expandToContain</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>expandToContain</anchor>
            <arglist>(const QVector3D &amp;pt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>expandToContain</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>expandToContain-2</anchor>
            <arglist>(const QAxisAlignedBoundingBox &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAxisAlignedBoundingBox</type>
            <name>transformBy</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>transformBy</anchor>
            <arglist>(const QMatrix4x4 &amp;mat) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAxisAlignedBoundingBox &amp;</type>
            <name>transform</name>
            <anchorfile>qt3d-qaxisalignedboundingbox.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>(const QMatrix4x4 &amp;mat)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QCamera</name>
        <filename>qt3d-qcamera.html</filename>
        <base>QEntity</base>
        <member kind="property" type="Qt3D::QCameraLens::ProjectionType">
            <name>projectionType</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>nearPlane</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>farPlane</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>fieldOfView</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>aspectRatio</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>left</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>right</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottom</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>top</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>projectionMatrix</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>position</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>upVector</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewCenter</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>matrix</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCamera</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>QCamera</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCamera</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>dtor.QCamera</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>CameraTranslationOption</name>
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TranslateViewCenter">
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DontTranslateViewCenter">
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraLens *</type>
            <name>lens</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>lens</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform *</type>
            <name>transform</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLookAtTransform *</type>
            <name>lookAt</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>lookAt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>tiltRotation</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>tiltRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>panRotation</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>panRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rollRotation</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>rollRotation</anchor>
            <arglist>(float angle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QVector3D &amp;vLocal, CameraTranslationOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translateWorld</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>translateWorld</anchor>
            <arglist>(const QVector3D &amp;vWorld, CameraTranslationOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tilt</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>tilt</anchor>
            <arglist>(const float &amp;angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>pan</anchor>
            <arglist>(const float &amp;angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>roll</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>roll</anchor>
            <arglist>(const float &amp;angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tiltAboutViewCenter</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>tiltAboutViewCenter</anchor>
            <arglist>(const float &amp;angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>panAboutViewCenter</anchor>
            <arglist>(const float &amp;angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rollAboutViewCenter</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>rollAboutViewCenter</anchor>
            <arglist>(const float &amp;angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(const QQuaternion &amp;q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotateAboutViewCenter</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>rotateAboutViewCenter</anchor>
            <arglist>(const QQuaternion &amp;q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionType</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(QCameraLens::ProjectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraLens::ProjectionType</type>
            <name>projectionType</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearPlane</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>nearPlane</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarPlane</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>farPlane</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldOfView</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>fieldOfView</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatio</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>aspectRatio</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>left</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>right</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottom</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>top</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QVector3D &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>position</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpVector</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>(const QVector3D &amp;upVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>upVector</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewCenter</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>(const QVector3D &amp;viewCenter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewCenter</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>matrix</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionTypeChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearPlaneChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farPlaneChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fieldOfViewChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aspectRatioChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionMatrixChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upVectorChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewCenterChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>matrixChanged</name>
            <anchorfile>qt3d-qcamera.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QCameraLens</name>
        <filename>qt3d-qcameralens.html</filename>
        <base>QComponent</base>
        <member kind="property" type="ProjectionType">
            <name>projectionType</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>nearPlane</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>farPlane</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>fieldOfView</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>aspectRatio</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>left</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>right</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottom</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>top</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>projectionMatrix</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraLens</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>QCameraLens</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraLens</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>dtor.QCameraLens</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ProjectionType</name>
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrthogonalProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PerspectiveProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrustumProjection">
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionType</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ProjectionType</type>
            <name>projectionType</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearPlane</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>nearPlane</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarPlane</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>farPlane</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldOfView</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>fieldOfView</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatio</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>aspectRatio</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>left</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>right</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottom</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>top</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrthographicProjection</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>setOrthographicProjection</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrustumProjection</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>setFrustumProjection</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerspectiveProjection</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>setPerspectiveProjection</anchor>
            <arglist>(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionTypeChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearPlaneChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farPlaneChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fieldOfViewChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aspectRatioChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionMatrixChanged</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraLens</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>QCameraLens-2</anchor>
            <arglist>(QCameraLensPrivate &amp;dd, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qcameralens.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractAttribute</name>
        <filename>qt3d-qabstractattribute.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3D::QAbstractBuffer *">
            <name>buffer</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="DataType">
            <name>dataType</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dataType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>dataSize</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dataSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>count</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>byteStride</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>byteOffset</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>divisor</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="AttributeType">
            <name>attributeType</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AttributeType</name>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexAttribute">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexAttribute">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DataType</name>
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Byte">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedByte">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Short">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedShort">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsignedInt">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HalfFloat">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double">
            <anchor>DataType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAttribute</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>QAbstractAttribute</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractAttribute</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dtor.QAbstractAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAttribute</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>QAbstractAttribute-2</anchor>
            <arglist>(QAbstractBuffer *buf, DataType dataType, uint dataSize, uint count, uint offset, uint stride, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractBuffer *</type>
            <name>buffer</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DataType</type>
            <name>dataType</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dataType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>dataSize</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dataSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>count</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>byteStride</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>byteOffset</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>divisor</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AttributeType</type>
            <name>attributeType</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVector&lt;QVector4D&gt;</type>
            <name>asVector4D</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>asVector4D</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVector&lt;QVector3D&gt;</type>
            <name>asVector3D</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>asVector3D</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVector&lt;QVector2D&gt;</type>
            <name>asVector2D</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>asVector2D</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>dump</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dump</anchor>
            <arglist>(int count) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffer</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>(QAbstractBuffer *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataType</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dataType-prop</anchor>
            <arglist>(DataType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataSize</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dataSize-prop</anchor>
            <arglist>(uint size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCount</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>(uint count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteStride</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>(uint byteStride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteOffset</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>(uint byteOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDivisor</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>(uint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeType</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>(AttributeType attributeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bufferChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataTypeChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dataType-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataSizeChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>dataSize-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>countChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>byteStrideChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>byteOffsetChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>divisorChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attributeTypeChanged</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAttribute</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>QAbstractAttribute-3</anchor>
            <arglist>(QAbstractAttributePrivate &amp;dd, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAttribute</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>QAbstractAttribute-4</anchor>
            <arglist>(QAbstractAttributePrivate &amp;dd, QAbstractBuffer *buf, const QString &amp;name, DataType dataType, uint dataSize, uint count, uint offset, uint stride, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qabstractattribute.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractBuffer</name>
        <filename>qt3d-qabstractbuffer.html</filename>
        <base>QNode</base>
        <member kind="property" type="QByteArray">
            <name>data</name>
            <anchorfile>qt3d-qabstractbuffer.html</anchorfile>
            <anchor>data-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractBuffer</name>
            <anchorfile>qt3d-qabstractbuffer.html</anchorfile>
            <anchor>QAbstractBuffer</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractBuffer</name>
            <anchorfile>qt3d-qabstractbuffer.html</anchorfile>
            <anchor>dtor.QAbstractBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setData</name>
            <anchorfile>qt3d-qabstractbuffer.html</anchorfile>
            <anchor>data-prop</anchor>
            <arglist>(const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qt3d-qabstractbuffer.html</anchorfile>
            <anchor>data-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qabstractbuffer.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qt3d-qabstractbuffer.html</anchorfile>
            <anchor>data-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QUrlHelper</name>
        <filename>qt3d-qurlhelper.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>urlToLocalFileOrQrc</name>
            <anchorfile>qt3d-qurlhelper.html</anchorfile>
            <anchor>urlToLocalFileOrQrc</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Dependency</name>
        <filename>qt3d-dependency.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Dependency</name>
            <anchorfile>qt3d-dependency.html</anchorfile>
            <anchor>Dependency</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Dependency</name>
            <anchorfile>qt3d-dependency.html</anchorfile>
            <anchor>Dependency-2</anchor>
            <arglist>(RunnableInterface *depender, RunnableInterface *dependee)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::DependencyHandler</name>
        <filename>qt3d-dependencyhandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>DependencyHandler</name>
            <anchorfile>qt3d-dependencyhandler.html</anchorfile>
            <anchor>DependencyHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDependencies</name>
            <anchorfile>qt3d-dependencyhandler.html</anchorfile>
            <anchor>addDependencies</anchor>
            <arglist>(QVector&lt;Dependency&gt; dependencies)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasDependency</name>
            <anchorfile>qt3d-dependencyhandler.html</anchorfile>
            <anchor>hasDependency</anchor>
            <arglist>(const RunnableInterface *depender)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;RunnableInterface *&gt;</type>
            <name>freeDependencies</name>
            <anchorfile>qt3d-dependencyhandler.html</anchorfile>
            <anchor>freeDependencies</anchor>
            <arglist>(const RunnableInterface *task)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMutex</name>
            <anchorfile>qt3d-dependencyhandler.html</anchorfile>
            <anchor>setMutex</anchor>
            <arglist>(QMutex *mutex)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAspectJob</name>
        <filename>qt3d-qaspectjob.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectJob</name>
            <anchorfile>qt3d-qaspectjob.html</anchorfile>
            <anchor>QAspectJob</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAspectJob</name>
            <anchorfile>qt3d-qaspectjob.html</anchorfile>
            <anchor>dtor.QAspectJob</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDependency</name>
            <anchorfile>qt3d-qaspectjob.html</anchorfile>
            <anchor>addDependency</anchor>
            <arglist>(QWeakPointer&lt;QAspectJob&gt; dependency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QWeakPointer&lt;QAspectJob&gt; &gt;</type>
            <name>dependencies</name>
            <anchorfile>qt3d-qaspectjob.html</anchorfile>
            <anchor>dependencies</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qt3d-qaspectjob.html</anchorfile>
            <anchor>run</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAspectJobProviderInterface</name>
        <filename>qt3d-qaspectjobproviderinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAspectJobProviderInterface</name>
            <anchorfile>qt3d-qaspectjobproviderinterface.html</anchorfile>
            <anchor>dtor.QAspectJobProviderInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVector&lt;QAspectJobPtr&gt;</type>
            <name>jobsToExecute</name>
            <anchorfile>qt3d-qaspectjobproviderinterface.html</anchorfile>
            <anchor>jobsToExecute</anchor>
            <arglist>(qint64 time) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QThreadPooler</name>
        <filename>qt3d-qthreadpooler.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QThreadPooler</name>
            <anchorfile>qt3d-qthreadpooler.html</anchorfile>
            <anchor>QThreadPooler</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QThreadPooler</name>
            <anchorfile>qt3d-qthreadpooler.html</anchorfile>
            <anchor>dtor.QThreadPooler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;void&gt;</type>
            <name>mapDependables</name>
            <anchorfile>qt3d-qthreadpooler.html</anchorfile>
            <anchor>mapDependables</anchor>
            <arglist>(QVector&lt;RunnableInterface *&gt; &amp;taskQueue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>taskFinished</name>
            <anchorfile>qt3d-qthreadpooler.html</anchorfile>
            <anchor>taskFinished</anchor>
            <arglist>(RunnableInterface *task)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;void&gt;</type>
            <name>future</name>
            <anchorfile>qt3d-qthreadpooler.html</anchorfile>
            <anchor>future</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDependencyHandler</name>
            <anchorfile>qt3d-qthreadpooler.html</anchorfile>
            <anchor>setDependencyHandler</anchor>
            <arglist>(DependencyHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxThreadCount</name>
            <anchorfile>qt3d-qthreadpooler.html</anchorfile>
            <anchor>maxThreadCount</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::RunnableInterface</name>
        <filename>qt3d-runnableinterface.html</filename>
        <base>QRunnable</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~RunnableInterface</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>dtor.RunnableInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>run</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setDependencyHandler</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>setDependencyHandler</anchor>
            <arglist>(DependencyHandler *) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual DependencyHandler *</type>
            <name>dependencyHandler</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>dependencyHandler</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>id</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setId</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>setId</anchor>
            <arglist>(int id) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setReserved</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>setReserved</anchor>
            <arglist>(bool reserved) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>reserved</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>reserved</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setPooler</name>
            <anchorfile>qt3d-runnableinterface.html</anchorfile>
            <anchor>setPooler</anchor>
            <arglist>(QThreadPooler *pooler) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::AspectTaskRunnable</name>
        <filename>qt3d-aspecttaskrunnable.html</filename>
        <base>RunnableInterface</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>AspectTaskRunnable</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>AspectTaskRunnable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~AspectTaskRunnable</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>dtor.AspectTaskRunnable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>run</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setDependencyHandler</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>setDependencyHandler</anchor>
            <arglist>(DependencyHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual DependencyHandler *</type>
            <name>dependencyHandler</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>dependencyHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPooler</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>setPooler</anchor>
            <arglist>(QThreadPooler *pooler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setReserved</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>setReserved</anchor>
            <arglist>(bool reserved)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>reserved</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>reserved</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>id</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>id</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setId</name>
            <anchorfile>qt3d-aspecttaskrunnable.html</anchorfile>
            <anchor>setId</anchor>
            <arglist>(int id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::SyncTaskRunnable</name>
        <filename>qt3d-synctaskrunnable.html</filename>
        <base>RunnableInterface</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>SyncTaskRunnable</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>SyncTaskRunnable</anchor>
            <arglist>(QAbstractAspectJobManager::JobFunction func, void *arg, QAtomicInt *atomicCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~SyncTaskRunnable</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>dtor.SyncTaskRunnable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>run</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setDependencyHandler</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>setDependencyHandler</anchor>
            <arglist>(DependencyHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual DependencyHandler *</type>
            <name>dependencyHandler</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>dependencyHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPooler</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>setPooler</anchor>
            <arglist>(QThreadPooler *pooler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setReserved</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>setReserved</anchor>
            <arglist>(bool reserved)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>reserved</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>reserved</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>id</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>id</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setId</name>
            <anchorfile>qt3d-synctaskrunnable.html</anchorfile>
            <anchor>setId</anchor>
            <arglist>(int id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::WeaverJob</name>
        <filename>qt3d-weaverjob.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>WeaverJob</name>
            <anchorfile>qt3d-weaverjob.html</anchorfile>
            <anchor>WeaverJob</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>run</name>
            <anchorfile>qt3d-weaverjob.html</anchorfile>
            <anchor>run</anchor>
            <arglist>(ThreadWeaver::JobPointer self, ThreadWeaver::Thread *thread)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::PropertyChangeHandler</name>
        <filename>qt3d-propertychangehandler.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>PropertyChangeHandler</name>
            <anchorfile>qt3d-propertychangehandler.html</anchorfile>
            <anchor>PropertyChangeHandler</anchor>
            <arglist>(Receiver *receiver, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToPropertyChange</name>
            <anchorfile>qt3d-propertychangehandler.html</anchorfile>
            <anchor>connectToPropertyChange</anchor>
            <arglist>(const QObject *object, int propertyIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnectFromPropertyChange</name>
            <anchorfile>qt3d-propertychangehandler.html</anchorfile>
            <anchor>disconnectFromPropertyChange</anchor>
            <arglist>(const QObject *object, int propertyIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qt_metacall</name>
            <anchorfile>qt3d-propertychangehandler.html</anchorfile>
            <anchor>qt_metacall</anchor>
            <arglist>(QMetaObject::Call call, int methodId, void **args)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QBackendNodeFunctor</name>
        <filename>qt3d-qbackendnodefunctor.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendNodeFunctor</name>
            <anchorfile>qt3d-qbackendnodefunctor.html</anchorfile>
            <anchor>dtor.QBackendNodeFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QBackendNode *</type>
            <name>create</name>
            <anchorfile>qt3d-qbackendnodefunctor.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QNode *frontend, const QBackendNodeFactory *factory) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QBackendNode *</type>
            <name>get</name>
            <anchorfile>qt3d-qbackendnodefunctor.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QNodeId &amp;id) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>destroy</name>
            <anchorfile>qt3d-qbackendnodefunctor.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(const QNodeId &amp;id) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QBackendNode</name>
        <filename>qt3d-qbackendnode.html</filename>
        <member kind="enum">
            <name>Mode</name>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWrite">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBackendNode</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>QBackendNode</anchor>
            <arglist>(Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendNode</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>dtor.QBackendNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFactory</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>setFactory</anchor>
            <arglist>(const QBackendNodeFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeer</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>setPeer</anchor>
            <arglist>(QNode *peer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>peerUuid</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>peerUuid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Mode</type>
            <name>mode</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>mode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateFromPeer</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>updateFromPeer</anchor>
            <arglist>(QNode *peer) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>createBackendNode</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>createBackendNode</anchor>
            <arglist>(QNode *frontend) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>notifyObservers</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>notifyObservers</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qbackendnode.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QComponent</name>
        <filename>qt3d-qcomponent.html</filename>
        <base>QNode</base>
        <member kind="property" type="bool">
            <name>shareable</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>shareable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponent</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>QComponent</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QComponent</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>dtor.QComponent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>shareable</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>shareable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShareable</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>shareable-prop</anchor>
            <arglist>(bool shareable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QEntity *&gt;</type>
            <name>entities</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>entities</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shareableChanged</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>shareable-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qt3d-qcomponent.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QEntity</name>
        <filename>qt3d-qentity.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEntity</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>QEntity</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QEntity</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>dtor.QEntity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QComponentList</type>
            <name>components</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>components</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addComponent</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>addComponent</anchor>
            <arglist>(QComponent *comp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeComponent</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>removeComponent</anchor>
            <arglist>(QComponent *comp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllComponents</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>removeAllComponents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntity *</type>
            <name>parentEntity</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>parentEntity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>parentEntityId</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>parentEntityId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qentity.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QNode</name>
        <filename>qt3d-qnode.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3D::QNode *">
            <name>parent</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNode</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>QNode</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNode</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>dtor.QNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QNodeId</type>
            <name>id</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNode *</type>
            <name>parentNode</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>notificationsBlocked</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>notificationsBlocked</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>blockNotifications</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>blockNotifications</anchor>
            <arglist>(bool block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setParent</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeList</type>
            <name>childrenNodes</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>childrenNodes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>QNode *</type>
            <name>clone</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>(QNode *node)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>cleanup</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>cleanup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parentChanged</name>
            <anchorfile>qt3d-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QNodeId</name>
        <filename>qt3d-qnodeid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeId</name>
            <anchorfile>qt3d-qnodeid.html</anchorfile>
            <anchor>QNodeId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNodeId</type>
            <name>createId</name>
            <anchorfile>qt3d-qnodeid.html</anchorfile>
            <anchor>createId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qt3d-qnodeid.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3d-qnodeid.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNodeId &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3d-qnodeid.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNodeId &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qt3d-qnodeid.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QNodeId &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qt3d-qnodeid.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QNodeId &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>id</name>
            <anchorfile>qt3d-qnodeid.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QNodeVisitor</name>
        <filename>qt3d-qnodevisitor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeVisitor</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>QNodeVisitor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNodeVisitor</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>dtor.QNodeVisitor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>traverse</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>traverse</anchor>
            <arglist>(QNode *rootNode_, NodeVisitorFunc fN)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>traverse</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>traverse-2</anchor>
            <arglist>(QNode *rootNode_, Obj *instance, NodeVisitorFunc fN)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>traverse</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>traverse-3</anchor>
            <arglist>(QNode *rootNode_, NodeVisitorFunc fN, EntityVisitorFunc fE)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>traverse</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>traverse-4</anchor>
            <arglist>(QNode *rootNode_, Obj *instance, NodeVisitorFunc fN, EntityVisitorFunc fE)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNode *</type>
            <name>rootNode</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>rootNode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNode *</type>
            <name>currentNode</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>currentNode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeList</type>
            <name>path</name>
            <anchorfile>qt3d-qnodevisitor.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::FunctorType</name>
        <filename>qt3d-functortype.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qintptr</type>
            <name>id</name>
            <anchorfile>qt3d-functortype.html</anchorfile>
            <anchor>id</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractFunctor</name>
        <filename>qt3d-qabstractfunctor.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractFunctor</name>
            <anchorfile>qt3d-qabstractfunctor.html</anchorfile>
            <anchor>dtor.QAbstractFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qintptr</type>
            <name>id</name>
            <anchorfile>qt3d-qabstractfunctor.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>functor_cast</name>
            <anchorfile>qt3d-qabstractfunctor.html</anchorfile>
            <anchor>functor_cast</anchor>
            <arglist>(const QAbstractFunctor *other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QBackendNodeFactory</name>
        <filename>qt3d-qbackendnodefactory.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendNodeFactory</name>
            <anchorfile>qt3d-qbackendnodefactory.html</anchorfile>
            <anchor>dtor.QBackendNodeFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QBackendNode *</type>
            <name>createBackendNode</name>
            <anchorfile>qt3d-qbackendnodefactory.html</anchorfile>
            <anchor>createBackendNode</anchor>
            <arglist>(QNode *frontend) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QBackendScenePropertyChange</name>
        <filename>qt3d-qbackendscenepropertychange.html</filename>
        <base>QScenePropertyChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBackendScenePropertyChange</name>
            <anchorfile>qt3d-qbackendscenepropertychange.html</anchorfile>
            <anchor>QBackendScenePropertyChange</anchor>
            <arglist>(ChangeFlag type, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBackendScenePropertyChange</name>
            <anchorfile>qt3d-qbackendscenepropertychange.html</anchorfile>
            <anchor>dtor.QBackendScenePropertyChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetNode</name>
            <anchorfile>qt3d-qbackendscenepropertychange.html</anchorfile>
            <anchor>setTargetNode</anchor>
            <arglist>(const QNodeId &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>targetNode</name>
            <anchorfile>qt3d-qbackendscenepropertychange.html</anchorfile>
            <anchor>targetNode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QBackendScenePropertyChange</name>
            <anchorfile>qt3d-qbackendscenepropertychange.html</anchorfile>
            <anchor>QBackendScenePropertyChange-3</anchor>
            <arglist>(QBackendScenePropertyChangePrivate &amp;dd, ChangeFlag type, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QBoundingSphere</name>
        <filename>qt3d-qboundingsphere.html</filename>
        <base>QBoundingVolume</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBoundingSphere</name>
            <anchorfile>qt3d-qboundingsphere.html</anchorfile>
            <anchor>QBoundingSphere</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBoundingSphere</name>
            <anchorfile>qt3d-qboundingsphere.html</anchorfile>
            <anchor>dtor.QBoundingSphere</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVector3D</type>
            <name>center</name>
            <anchorfile>qt3d-qboundingsphere.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual float</type>
            <name>radius</name>
            <anchorfile>qt3d-qboundingsphere.html</anchorfile>
            <anchor>radius</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QBoundingVolume</name>
        <filename>qt3d-qboundingvolume.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBoundingVolume</name>
            <anchorfile>qt3d-qboundingvolume.html</anchorfile>
            <anchor>QBoundingVolume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBoundingVolume</name>
            <anchorfile>qt3d-qboundingvolume.html</anchorfile>
            <anchor>dtor.QBoundingVolume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sphere">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QNodeId</type>
            <name>id</name>
            <anchorfile>qt3d-qboundingvolume.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>intersects</name>
            <anchorfile>qt3d-qboundingvolume.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRay3D &amp;ray, QVector3D *q) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Type</type>
            <name>type</name>
            <anchorfile>qt3d-qboundingvolume.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QBoundingVolumeProvider</name>
        <filename>qt3d-qboundingvolumeprovider.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBoundingVolumeProvider</name>
            <anchorfile>qt3d-qboundingvolumeprovider.html</anchorfile>
            <anchor>dtor.QBoundingVolumeProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVector&lt;QBoundingVolume *&gt;</type>
            <name>boundingVolumes</name>
            <anchorfile>qt3d-qboundingvolumeprovider.html</anchorfile>
            <anchor>boundingVolumes</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractArbiter</name>
        <filename>qt3d-qabstractarbiter.html</filename>
        <base>QLockableObserverInterface</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QAbstractPostman *</type>
            <name>postman</name>
            <anchorfile>qt3d-qabstractarbiter.html</anchorfile>
            <anchor>postman</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QChangeArbiter</name>
        <filename>qt3d-qchangearbiter.html</filename>
        <base>QObject</base>
        <base>QAbstractArbiter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChangeArbiter</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>QChangeArbiter</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QChangeArbiter</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>dtor.QChangeArbiter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(Qt3D::QAbstractAspectJobManager *jobManager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>syncChanges</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>syncChanges</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerObserver</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>registerObserver</anchor>
            <arglist>(QObserverInterface *observer, const QNodeId &amp;nodeId, ChangeFlags changeFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterObserver</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>unregisterObserver</anchor>
            <arglist>(QObserverInterface *observer, const QNodeId &amp;nodeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerSceneObserver</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>registerSceneObserver</anchor>
            <arglist>(QSceneObserverInterface *observer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterSceneObserver</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>unregisterSceneObserver</anchor>
            <arglist>(QSceneObserverInterface *observer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEventWithLock</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>sceneChangeEventWithLock</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEventWithLock</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>sceneChangeEventWithLock-2</anchor>
            <arglist>(const QSceneChangeList &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPostman</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>setPostman</anchor>
            <arglist>(Qt3D::QAbstractPostman *postman)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScene</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>setScene</anchor>
            <arglist>(Qt3D::QScene *scene)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAbstractPostman *</type>
            <name>postman</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>postman</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScene *</type>
            <name>scene</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>createUnmanagedThreadLocalChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>createUnmanagedThreadLocalChangeQueue</anchor>
            <arglist>(void *changeArbiter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>destroyUnmanagedThreadLocalChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>destroyUnmanagedThreadLocalChangeQueue</anchor>
            <arglist>(void *changeArbiter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>createThreadLocalChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>createThreadLocalChangeQueue</anchor>
            <arglist>(void *changeArbiter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>destroyThreadLocalChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>destroyThreadLocalChangeQueue</anchor>
            <arglist>(void *changeArbiter)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>QChangeQueue-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QObserverPair</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>QObserverPair-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QObserverList</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>QObserverList-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>distributeQueueChanges</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>distributeQueueChanges</anchor>
            <arglist>(QChangeQueue *queue)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QThreadStorage&lt;QChangeQueue *&gt; *</type>
            <name>tlsChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>tlsChangeQueue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>appendChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>appendChangeQueue</anchor>
            <arglist>(QChangeQueue *queue)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>removeChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>removeChangeQueue</anchor>
            <arglist>(QChangeQueue *queue)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>appendLockingChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>appendLockingChangeQueue</anchor>
            <arglist>(QChangeQueue *queue)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>removeLockingChangeQueue</name>
            <anchorfile>qt3d-qchangearbiter.html</anchorfile>
            <anchor>removeLockingChangeQueue</anchor>
            <arglist>(QChangeQueue *queue)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QLockableObserverInterface</name>
        <filename>qt3d-qlockableobserverinterface.html</filename>
        <base>QObserverInterface</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLockableObserverInterface</name>
            <anchorfile>qt3d-qlockableobserverinterface.html</anchorfile>
            <anchor>dtor.QLockableObserverInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>sceneChangeEventWithLock</name>
            <anchorfile>qt3d-qlockableobserverinterface.html</anchorfile>
            <anchor>sceneChangeEventWithLock</anchor>
            <arglist>(const QSceneChangePtr &amp;e) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>sceneChangeEventWithLock</name>
            <anchorfile>qt3d-qlockableobserverinterface.html</anchorfile>
            <anchor>sceneChangeEventWithLock-2</anchor>
            <arglist>(const QSceneChangeList &amp;e) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QObservableInterface</name>
        <filename>qt3d-qobservableinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QObservableInterface</name>
            <anchorfile>qt3d-qobservableinterface.html</anchorfile>
            <anchor>dtor.QObservableInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setArbiter</name>
            <anchorfile>qt3d-qobservableinterface.html</anchorfile>
            <anchor>setArbiter</anchor>
            <arglist>(QLockableObserverInterface *arbiter) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>notifyObservers</name>
            <anchorfile>qt3d-qobservableinterface.html</anchorfile>
            <anchor>notifyObservers</anchor>
            <arglist>(const QSceneChangePtr &amp;e) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QObserverInterface</name>
        <filename>qt3d-qobserverinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QObserverInterface</name>
            <anchorfile>qt3d-qobserverinterface.html</anchorfile>
            <anchor>dtor.QObserverInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qobserverinterface.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractPostman</name>
        <filename>qt3d-qabstractpostman.html</filename>
        <base>QObserverInterface</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setScene</name>
            <anchorfile>qt3d-qabstractpostman.html</anchorfile>
            <anchor>setScene</anchor>
            <arglist>(QScene *sceneLookup) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>notifyBackend</name>
            <anchorfile>qt3d-qabstractpostman.html</anchorfile>
            <anchor>notifyBackend</anchor>
            <arglist>(const QSceneChangePtr &amp;change) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QPostman</name>
        <filename>qt3d-qpostman.html</filename>
        <base>QObject</base>
        <base>QAbstractPostman</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPostman</name>
            <anchorfile>qt3d-qpostman.html</anchorfile>
            <anchor>QPostman</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setScene</name>
            <anchorfile>qt3d-qpostman.html</anchorfile>
            <anchor>setScene</anchor>
            <arglist>(QScene *sceneLookup)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qpostman.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>notifyBackend</name>
            <anchorfile>qt3d-qpostman.html</anchorfile>
            <anchor>notifyBackend</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QRay3D</name>
        <filename>qt3d-qray3d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRay3D</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>QRay3D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRay3D</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>QRay3D-2</anchor>
            <arglist>(const QVector3D &amp;origin, const QVector3D &amp;direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRay3D</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>dtor.QRay3D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>origin</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>origin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrigin</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>setOrigin</anchor>
            <arglist>(const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>direction</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>setDirection</anchor>
            <arglist>(const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QVector3D &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(const QRay3D &amp;ray) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>point</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>point</anchor>
            <arglist>(float t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>projectedDistance</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>projectedDistance</anchor>
            <arglist>(const QVector3D &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>project</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>project</anchor>
            <arglist>(const QVector3D &amp;vector) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distance</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>(const QVector3D &amp;point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRay3D &amp;</type>
            <name>transform</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRay3D</type>
            <name>transformed</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>transformed</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRay3D &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3d-qray3d.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRay3D &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QScene</name>
        <filename>qt3d-qscene.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScene</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>QScene</anchor>
            <arglist>(QAspectEngine *engine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScene</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>dtor.QScene</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectEngine *</type>
            <name>engine</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addObservable</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>addObservable</anchor>
            <arglist>(QObservableInterface *observable, const QNodeId &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addObservable</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>addObservable-2</anchor>
            <arglist>(QNode *observable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeObservable</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>removeObservable</anchor>
            <arglist>(QObservableInterface *observable, const QNodeId &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeObservable</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>removeObservable-2</anchor>
            <arglist>(QNode *observable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObservableList</type>
            <name>lookupObservables</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>lookupObservables</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNode *</type>
            <name>lookupNode</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>lookupNode</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QNode *&gt;</type>
            <name>lookupNodes</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>lookupNodes</anchor>
            <arglist>(const QVector&lt;QNodeId&gt; &amp;ids) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>nodeIdFromObservable</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>nodeIdFromObservable</anchor>
            <arglist>(QObservableInterface *observable) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArbiter</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>setArbiter</anchor>
            <arglist>(Qt3D::QLockableObserverInterface *arbiter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3D::QLockableObserverInterface *</type>
            <name>arbiter</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>arbiter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNodeId&gt;</type>
            <name>entitiesForComponent</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>entitiesForComponent</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEntityForComponent</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>addEntityForComponent</anchor>
            <arglist>(const QNodeId &amp;componentUuid, const QNodeId &amp;entityUuid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeEntityForComponent</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>removeEntityForComponent</anchor>
            <arglist>(const QNodeId &amp;componentUuid, const QNodeId &amp;entityUuid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasEntityForComponent</name>
            <anchorfile>qt3d-qscene.html</anchorfile>
            <anchor>hasEntityForComponent</anchor>
            <arglist>(const QNodeId &amp;componentUuid, const QNodeId &amp;entityUuid)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QSceneChange</name>
        <filename>qt3d-qscenechange.html</filename>
        <member kind="enum">
            <name>Priority</name>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="High">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Standard">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Low">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ObservableType</name>
            <anchor>ObservableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Observable">
            <anchor>ObservableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Node">
            <anchor>ObservableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSceneChange</name>
            <anchorfile>qt3d-qscenechange.html</anchorfile>
            <anchor>QSceneChange</anchor>
            <arglist>(ChangeFlag type, ObservableType observableType, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSceneChange</name>
            <anchorfile>qt3d-qscenechange.html</anchorfile>
            <anchor>dtor.QSceneChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ChangeFlag</type>
            <name>type</name>
            <anchorfile>qt3d-qscenechange.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>timestamp</name>
            <anchorfile>qt3d-qscenechange.html</anchorfile>
            <anchor>timestamp</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSceneChange::Priority</type>
            <name>priority</name>
            <anchorfile>qt3d-qscenechange.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSceneChange::ObservableType</type>
            <name>observableType</name>
            <anchorfile>qt3d-qscenechange.html</anchorfile>
            <anchor>observableType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>subjectId</name>
            <anchorfile>qt3d-qscenechange.html</anchorfile>
            <anchor>subjectId</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QSceneObserverInterface</name>
        <filename>qt3d-qsceneobserverinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSceneObserverInterface</name>
            <anchorfile>qt3d-qsceneobserverinterface.html</anchorfile>
            <anchor>dtor.QSceneObserverInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>sceneNodeAdded</name>
            <anchorfile>qt3d-qsceneobserverinterface.html</anchorfile>
            <anchor>sceneNodeAdded</anchor>
            <arglist>(QSceneChangePtr &amp;e) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>sceneNodeRemoved</name>
            <anchorfile>qt3d-qsceneobserverinterface.html</anchorfile>
            <anchor>sceneNodeRemoved</anchor>
            <arglist>(QSceneChangePtr &amp;e) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QScenePropertyChange</name>
        <filename>qt3d-qscenepropertychange.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScenePropertyChange</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>QScenePropertyChange</anchor>
            <arglist>(ChangeFlag type, ObservableType observableType, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScenePropertyChange</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>dtor.QScenePropertyChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyName</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void *</type>
            <name>operatornew</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>operatornew</anchor>
            <arglist>(size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>operatordelete</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>operatordelete</anchor>
            <arglist>(void *ptr, size_t size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QScenePropertyChange</name>
            <anchorfile>qt3d-qscenepropertychange.html</anchorfile>
            <anchor>QScenePropertyChange-3</anchor>
            <arglist>(QScenePropertyChangePrivate &amp;dd, ChangeFlag type, ObservableType observableType, const QNodeId &amp;subjectId, Priority priority)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QScheduler</name>
        <filename>qt3d-qscheduler.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScheduler</name>
            <anchorfile>qt3d-qscheduler.html</anchorfile>
            <anchor>QScheduler</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectManager</name>
            <anchorfile>qt3d-qscheduler.html</anchorfile>
            <anchor>setAspectManager</anchor>
            <arglist>(QAspectManager *aspectManager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectManager *</type>
            <name>aspectManager</name>
            <anchorfile>qt3d-qscheduler.html</anchorfile>
            <anchor>aspectManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>update</name>
            <anchorfile>qt3d-qscheduler.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(qint64 time)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QTickClock</name>
        <filename>qt3d-qtickclock.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTickClock</name>
            <anchorfile>qt3d-qtickclock.html</anchorfile>
            <anchor>QTickClock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTickFrequency</name>
            <anchorfile>qt3d-qtickclock.html</anchorfile>
            <anchor>setTickFrequency</anchor>
            <arglist>(float frequency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qt3d-qtickclock.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qt3d-qtickclock.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>waitForNextTick</name>
            <anchorfile>qt3d-qtickclock.html</anchorfile>
            <anchor>waitForNextTick</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QBoundedCircularBuffer</name>
        <filename>qt3d-qboundedcircularbuffer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBoundedCircularBuffer</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>QBoundedCircularBuffer</anchor>
            <arglist>(int capacity_)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>freeSize</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>freeSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFull</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>isFull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>push</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>pop_front</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>pop</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>pop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeFirst</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>takeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>at</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>front</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>front</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>back</name>
            <anchorfile>qt3d-qboundedcircularbuffer.html</anchorfile>
            <anchor>back</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::CircularBufferData</name>
        <filename>qt3d-circularbufferdata.html</filename>
        <base>QSharedData</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>CircularBufferData</name>
            <anchorfile>qt3d-circularbufferdata.html</anchorfile>
            <anchor>CircularBufferData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>~CircularBufferData</name>
            <anchorfile>qt3d-circularbufferdata.html</anchorfile>
            <anchor>dtor.CircularBufferData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>wraparound</name>
            <anchorfile>qt3d-circularbufferdata.html</anchorfile>
            <anchor>wraparound</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void *</type>
            <name>allocate</name>
            <anchorfile>qt3d-circularbufferdata.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(int count, size_t sizeOfT)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>deallocate</name>
            <anchorfile>qt3d-circularbufferdata.html</anchorfile>
            <anchor>deallocate</anchor>
            <arglist>(void *p)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::TypedCircularBufferData</name>
        <filename>qt3d-typedcircularbufferdata.html</filename>
        <base>CircularBufferData</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>TypedCircularBufferData</name>
            <anchorfile>qt3d-typedcircularbufferdata.html</anchorfile>
            <anchor>TypedCircularBufferData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>TypedCircularBufferData</name>
            <anchorfile>qt3d-typedcircularbufferdata.html</anchorfile>
            <anchor>TypedCircularBufferData-3</anchor>
            <arglist>(ForwardIterator f, ForwardIterator l, std::forward_iterator_tag )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~TypedCircularBufferData</name>
            <anchorfile>qt3d-typedcircularbufferdata.html</anchorfile>
            <anchor>dtor.TypedCircularBufferData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>allocate</name>
            <anchorfile>qt3d-typedcircularbufferdata.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qt3d-typedcircularbufferdata.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3d-typedcircularbufferdata.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(T *newdata)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QCircularBuffer</name>
        <filename>qt3d-qcircularbuffer.html</filename>
        <member kind="typedef" type="">
            <name>array_range</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>array_range-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_array_range</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>const_array_range-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ArrayRange</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>ArrayRange-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstArrayRange</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>ConstArrayRange-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCircularBuffer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>QCircularBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCircularBuffer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>QCircularBuffer-2</anchor>
            <arglist>(int capacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCircularBuffer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>QCircularBuffer-3</anchor>
            <arglist>(int capacity, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCircularBuffer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>QCircularBuffer-4</anchor>
            <arglist>(int capacity, int size, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCircularBuffer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>QCircularBuffer-5</anchor>
            <arglist>(std::initializer_list&lt;T&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCircularBuffer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>QCircularBuffer-6</anchor>
            <arglist>(ForwardIterator f, ForwardIterator l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCircularBuffer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>QCircularBuffer-7</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCircularBuffer &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCircularBuffer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>dtor.QCircularBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <class>Qt3D::QCircularBuffer::iterator</class>
        <class>Qt3D::QCircularBuffer::const_iterator</class>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>begin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>rbegin-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>end-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>rend-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(const_iterator before, int count, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(const_iterator before, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>erase-2</anchor>
            <arglist>(const_iterator begin, const_iterator end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(const_iterator pos)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_front</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>front</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>front</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>front-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>back</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>back</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>back-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAtomicInt</type>
            <name>refCount</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>refCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>at</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>array_range</type>
            <name>data</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_array_range</type>
            <name>data</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_array_range</type>
            <name>constData</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>array_range</type>
            <name>dataOne</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>dataOne</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_array_range</type>
            <name>dataOne</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>dataOne-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_array_range</type>
            <name>constDataOne</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>constDataOne</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>array_range</type>
            <name>dataTwo</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>dataTwo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_array_range</type>
            <name>dataTwo</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>dataTwo-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_array_range</type>
            <name>constDataTwo</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>constDataTwo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>fill</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(const T &amp;value, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>first-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>freeSize</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>freeSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCircularBuffer&lt;T&gt;</type>
            <name>fromList</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>fromList</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCircularBuffer&lt;T&gt;</type>
            <name>fromVector</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>fromVector</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const T &amp;value, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(int i, int count, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFull</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>isFull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLinearised</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>isLinearised</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>last-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastIndexOf</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const T &amp;value, int from) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearise</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>linearise</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(int i, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int capacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapacity</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>setCapacity</anchor>
            <arglist>(int capacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>max_size</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sizeAvailable</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>sizeAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(const T &amp;value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>toList</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>toList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T&gt;</type>
            <name>toVector</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>toVector</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(int i, const T &amp;defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const T &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-2b-eq-3</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-2b-eq-4</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const T &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(const QVector&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCircularBuffer&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSharedWith</name>
            <anchorfile>qt3d-qcircularbuffer.html</anchorfile>
            <anchor>isSharedWith</anchor>
            <arglist>(const QCircularBuffer &amp;other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QCircularBuffer::iterator</name>
        <filename>qt3d-qcircularbuffer-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator+</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator-</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator-</name>
            <anchorfile>qt3d-qcircularbuffer-iterator.html</anchorfile>
            <anchor>operator--2</anchor>
            <arglist>(iterator other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QCircularBuffer::const_iterator</name>
        <filename>qt3d-qcircularbuffer-const-iterator.html</filename>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>const_iterator-2</anchor>
            <arglist>(const QCircularBuffer&lt;T&gt; *buff, int idx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const const_iterator &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator++</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator--</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator+</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const_iterator</type>
            <name>operator-</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator-</name>
            <anchorfile>qt3d-qcircularbuffer-const-iterator.html</anchorfile>
            <anchor>operator--2</anchor>
            <arglist>(const_iterator other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QFrameAllocator</name>
        <filename>qt3d-qframeallocator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameAllocator</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>QFrameAllocator</anchor>
            <arglist>(uint maxObjectSize, uint alignment, uint pageSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFrameAllocator</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>dtor.QFrameAllocator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>allocate</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deallocate</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>deallocate</anchor>
            <arglist>(T *ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>allocateRawMemory</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>allocateRawMemory</anchor>
            <arglist>(size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deallocateRawMemory</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>deallocateRawMemory</anchor>
            <arglist>(void *ptr, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trim</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>trim</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>maxObjectSize</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>maxObjectSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>totalChunkCount</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>totalChunkCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>allocatorPoolSize</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>allocatorPoolSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qt3d-qframeallocator.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QFrameChunk</name>
        <filename>qt3d-qframechunk.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>init</name>
            <anchorfile>qt3d-qframechunk.html</anchorfile>
            <anchor>init</anchor>
            <arglist>(uint blockSize, uchar blocks)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>allocate</name>
            <anchorfile>qt3d-qframechunk.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(uint blockSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deallocate</name>
            <anchorfile>qt3d-qframechunk.html</anchorfile>
            <anchor>deallocate</anchor>
            <arglist>(void *p, uint blockSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qt3d-qframechunk.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(void *p, uint blockSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qt3d-qframechunk.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>(uint blockSize, uchar blocks)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qt3d-qframechunk.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qt3d-qframechunk.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QFixedFrameAllocator</name>
        <filename>qt3d-qfixedframeallocator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFixedFrameAllocator</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>QFixedFrameAllocator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFixedFrameAllocator</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>dtor.QFixedFrameAllocator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>init</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>init</anchor>
            <arglist>(uint blockSize, uchar pageSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>allocate</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deallocate</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>deallocate</anchor>
            <arglist>(void *ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trim</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>trim</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>chunkCount</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>chunkCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>pageSize</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>pageSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>blockSize</name>
            <anchorfile>qt3d-qfixedframeallocator.html</anchorfile>
            <anchor>blockSize</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QHandle</name>
        <filename>qt3d-qhandle.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHandle</name>
            <anchorfile>qt3d-qhandle.html</anchorfile>
            <anchor>QHandle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>index</name>
            <anchorfile>qt3d-qhandle.html</anchorfile>
            <anchor>index</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>counter</name>
            <anchorfile>qt3d-qhandle.html</anchorfile>
            <anchor>counter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>handle</name>
            <anchorfile>qt3d-qhandle.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qt3d-qhandle.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator quint32</name>
            <anchorfile>qt3d-qhandle.html</anchorfile>
            <anchor>operator-quint32</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>quint32</type>
            <name>maxIndex</name>
            <anchorfile>qt3d-qhandle.html</anchorfile>
            <anchor>maxIndex</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>quint32</type>
            <name>maxCounter</name>
            <anchorfile>qt3d-qhandle.html</anchorfile>
            <anchor>maxCounter</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QHandleManager</name>
        <filename>qt3d-qhandlemanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHandleManager</name>
            <anchorfile>qt3d-qhandlemanager.html</anchorfile>
            <anchor>QHandleManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>activeEntries</name>
            <anchorfile>qt3d-qhandlemanager.html</anchorfile>
            <anchor>activeEntries</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qt3d-qhandlemanager.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHandle&lt;T, INDEXBITS&gt;</type>
            <name>acquire</name>
            <anchorfile>qt3d-qhandlemanager.html</anchorfile>
            <anchor>acquire</anchor>
            <arglist>(T *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qt3d-qhandlemanager.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qt3d-qhandlemanager.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;, T *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qt3d-qhandlemanager.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle, bool *ok)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qt3d-qhandlemanager.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle, bool *ok) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::NonLockingPolicy</name>
        <filename>qt3d-nonlockingpolicy.html</filename>
        <class>Qt3D::NonLockingPolicy::Locker</class>
    </compound>
    <compound kind="class">
        <name>Qt3D::NonLockingPolicy::Locker</name>
        <filename>qt3d-nonlockingpolicy-locker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Locker</name>
            <anchorfile>qt3d-nonlockingpolicy-locker.html</anchorfile>
            <anchor>Locker</anchor>
            <arglist>(NonLockingPolicy *)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qt3d-nonlockingpolicy-locker.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relock</name>
            <anchorfile>qt3d-nonlockingpolicy-locker.html</anchorfile>
            <anchor>relock</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::ObjectLevelLockingPolicy</name>
        <filename>qt3d-objectlevellockingpolicy.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ObjectLevelLockingPolicy</name>
            <anchorfile>qt3d-objectlevellockingpolicy.html</anchorfile>
            <anchor>ObjectLevelLockingPolicy</anchor>
            <arglist>()</arglist>
        </member>
        <class>Qt3D::ObjectLevelLockingPolicy::Locker</class>
    </compound>
    <compound kind="class">
        <name>Qt3D::ObjectLevelLockingPolicy::Locker</name>
        <filename>qt3d-objectlevellockingpolicy-locker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Locker</name>
            <anchorfile>qt3d-objectlevellockingpolicy-locker.html</anchorfile>
            <anchor>Locker</anchor>
            <arglist>(const ObjectLevelLockingPolicy *host)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qt3d-objectlevellockingpolicy-locker.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relock</name>
            <anchorfile>qt3d-objectlevellockingpolicy-locker.html</anchorfile>
            <anchor>relock</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QResourceInfo</name>
        <filename>qt3d-qresourceinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D::Int2Type</name>
        <filename>qt3d-int2type.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D::ArrayAllocatingPolicy</name>
        <filename>qt3d-arrayallocatingpolicy.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ArrayAllocatingPolicy</name>
            <anchorfile>qt3d-arrayallocatingpolicy.html</anchorfile>
            <anchor>ArrayAllocatingPolicy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>allocateResource</name>
            <anchorfile>qt3d-arrayallocatingpolicy.html</anchorfile>
            <anchor>allocateResource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseResource</name>
            <anchorfile>qt3d-arrayallocatingpolicy.html</anchorfile>
            <anchor>releaseResource</anchor>
            <arglist>(T *r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qt3d-arrayallocatingpolicy.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::ArrayPreallocationPolicy</name>
        <filename>qt3d-arraypreallocationpolicy.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ArrayPreallocationPolicy</name>
            <anchorfile>qt3d-arraypreallocationpolicy.html</anchorfile>
            <anchor>ArrayPreallocationPolicy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>allocateResource</name>
            <anchorfile>qt3d-arraypreallocationpolicy.html</anchorfile>
            <anchor>allocateResource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseResource</name>
            <anchorfile>qt3d-arraypreallocationpolicy.html</anchorfile>
            <anchor>releaseResource</anchor>
            <arglist>(T *r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qt3d-arraypreallocationpolicy.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::ListAllocatingPolicy</name>
        <filename>qt3d-listallocatingpolicy.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ListAllocatingPolicy</name>
            <anchorfile>qt3d-listallocatingpolicy.html</anchorfile>
            <anchor>ListAllocatingPolicy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>allocateResource</name>
            <anchorfile>qt3d-listallocatingpolicy.html</anchorfile>
            <anchor>allocateResource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseResource</name>
            <anchorfile>qt3d-listallocatingpolicy.html</anchorfile>
            <anchor>releaseResource</anchor>
            <arglist>(T *r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qt3d-listallocatingpolicy.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QResourceManager</name>
        <filename>qt3d-qresourcemanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QResourceManager</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>QResourceManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QResourceManager</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>dtor.QResourceManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHandle&lt;T, INDEXBITS&gt;</type>
            <name>acquire</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>acquire</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(const QHandle&lt;T, INDEXBITS&gt; &amp;handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const C &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHandle&lt;T, INDEXBITS&gt;</type>
            <name>getOrAcquireHandle</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>getOrAcquireHandle</anchor>
            <arglist>(const C &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHandle&lt;T, INDEXBITS&gt;</type>
            <name>lookupHandle</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>lookupHandle</anchor>
            <arglist>(const C &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>lookupResource</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>lookupResource</anchor>
            <arglist>(const C &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>getOrCreateResource</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>getOrCreateResource</anchor>
            <arglist>(const C &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseResource</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>releaseResource</anchor>
            <arglist>(const C &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxResourcesEntries</name>
            <anchorfile>qt3d-qresourcemanager.html</anchorfile>
            <anchor>maxResourcesEntries</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::NullSystemInformationService</name>
        <filename>qt3d-nullsysteminformationservice.html</filename>
        <base>QSystemInformationService</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>NullSystemInformationService</name>
            <anchorfile>qt3d-nullsysteminformationservice.html</anchorfile>
            <anchor>NullSystemInformationService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~NullSystemInformationService</name>
            <anchorfile>qt3d-nullsysteminformationservice.html</anchorfile>
            <anchor>dtor.NullSystemInformationService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>aspectNames</name>
            <anchorfile>qt3d-nullsysteminformationservice.html</anchorfile>
            <anchor>aspectNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>threadPoolThreadCount</name>
            <anchorfile>qt3d-nullsysteminformationservice.html</anchorfile>
            <anchor>threadPoolThreadCount</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::NullOpenGLInformationService</name>
        <filename>qt3d-nullopenglinformationservice.html</filename>
        <base>QOpenGLInformationService</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>NullOpenGLInformationService</name>
            <anchorfile>qt3d-nullopenglinformationservice.html</anchorfile>
            <anchor>NullOpenGLInformationService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~NullOpenGLInformationService</name>
            <anchorfile>qt3d-nullopenglinformationservice.html</anchorfile>
            <anchor>dtor.NullOpenGLInformationService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qt3d-nullopenglinformationservice.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::NullCollisionQueryService</name>
        <filename>qt3d-nullcollisionqueryservice.html</filename>
        <base>QAbstractCollisionQueryService</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>NullCollisionQueryService</name>
            <anchorfile>qt3d-nullcollisionqueryservice.html</anchorfile>
            <anchor>NullCollisionQueryService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~NullCollisionQueryService</name>
            <anchorfile>qt3d-nullcollisionqueryservice.html</anchorfile>
            <anchor>dtor.NullCollisionQueryService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QQueryHandle</type>
            <name>query</name>
            <anchorfile>qt3d-nullcollisionqueryservice.html</anchorfile>
            <anchor>query</anchor>
            <arglist>(const QRay3D &amp;ray, QueryMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QCollisionQueryResult</type>
            <name>fetchResult</name>
            <anchorfile>qt3d-nullcollisionqueryservice.html</anchorfile>
            <anchor>fetchResult</anchor>
            <arglist>(const QQueryHandle &amp;handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QCollisionQueryResult&gt;</type>
            <name>fetchAllResults</name>
            <anchorfile>qt3d-nullcollisionqueryservice.html</anchorfile>
            <anchor>fetchAllResults</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractCollisionQueryService</name>
        <filename>qt3d-qabstractcollisionqueryservice.html</filename>
        <base>QAbstractServiceProvider</base>
        <member kind="enum">
            <name>QueryMode</name>
            <anchor>QueryMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FirstHit">
            <anchor>QueryMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllHits">
            <anchor>QueryMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QQueryHandle</type>
            <name>query</name>
            <anchorfile>qt3d-qabstractcollisionqueryservice.html</anchorfile>
            <anchor>query</anchor>
            <arglist>(const QRay3D &amp;ray, QueryMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCollisionQueryResult</type>
            <name>fetchResult</name>
            <anchorfile>qt3d-qabstractcollisionqueryservice.html</anchorfile>
            <anchor>fetchResult</anchor>
            <arglist>(const QQueryHandle &amp;handle) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVector&lt;QCollisionQueryResult&gt;</type>
            <name>fetchAllResults</name>
            <anchorfile>qt3d-qabstractcollisionqueryservice.html</anchorfile>
            <anchor>fetchAllResults</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractCollisionQueryService</name>
            <anchorfile>qt3d-qabstractcollisionqueryservice.html</anchorfile>
            <anchor>QAbstractCollisionQueryService</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractCollisionQueryService</name>
            <anchorfile>qt3d-qabstractcollisionqueryservice.html</anchorfile>
            <anchor>QAbstractCollisionQueryService-2</anchor>
            <arglist>(QAbstractCollisionQueryServicePrivate &amp;dd)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setResultHandle</name>
            <anchorfile>qt3d-qabstractcollisionqueryservice.html</anchorfile>
            <anchor>setResultHandle</anchor>
            <arglist>(QCollisionQueryResult &amp;result, const QQueryHandle &amp;handle)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addEntityHit</name>
            <anchorfile>qt3d-qabstractcollisionqueryservice.html</anchorfile>
            <anchor>addEntityHit</anchor>
            <arglist>(QCollisionQueryResult &amp;result, const QNodeId &amp;entity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractCollisionQueryServicePrivate</name>
        <filename>qt3d-qabstractcollisionqueryserviceprivate.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractCollisionQueryServicePrivate</name>
            <anchorfile>qt3d-qabstractcollisionqueryserviceprivate.html</anchorfile>
            <anchor>QAbstractCollisionQueryServicePrivate</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractFrameAdvanceService</name>
        <filename>qt3d-qabstractframeadvanceservice.html</filename>
        <base>QAbstractServiceProvider</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qint64</type>
            <name>waitForNextFrame</name>
            <anchorfile>qt3d-qabstractframeadvanceservice.html</anchorfile>
            <anchor>waitForNextFrame</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>start</name>
            <anchorfile>qt3d-qabstractframeadvanceservice.html</anchorfile>
            <anchor>start</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>stop</name>
            <anchorfile>qt3d-qabstractframeadvanceservice.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractFrameAdvanceService</name>
            <anchorfile>qt3d-qabstractframeadvanceservice.html</anchorfile>
            <anchor>QAbstractFrameAdvanceService</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractFrameAdvanceService</name>
            <anchorfile>qt3d-qabstractframeadvanceservice.html</anchorfile>
            <anchor>QAbstractFrameAdvanceService-2</anchor>
            <arglist>(QAbstractFrameAdvanceServicePrivate &amp;dd)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QCollisionQueryResult</name>
        <filename>qt3d-qcollisionqueryresult.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollisionQueryResult</name>
            <anchorfile>qt3d-qcollisionqueryresult.html</anchorfile>
            <anchor>QCollisionQueryResult</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQueryHandle</type>
            <name>handle</name>
            <anchorfile>qt3d-qcollisionqueryresult.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QNodeId&gt;</type>
            <name>entitiesHit</name>
            <anchorfile>qt3d-qcollisionqueryresult.html</anchorfile>
            <anchor>entitiesHit</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QCollisionQueryResultPrivate</name>
        <filename>qt3d-qcollisionqueryresultprivate.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollisionQueryResultPrivate</name>
            <anchorfile>qt3d-qcollisionqueryresultprivate.html</anchorfile>
            <anchor>QCollisionQueryResultPrivate</anchor>
            <arglist>(QCollisionQueryResult *qq)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHandle</name>
            <anchorfile>qt3d-qcollisionqueryresultprivate.html</anchorfile>
            <anchor>setHandle</anchor>
            <arglist>(const QQueryHandle &amp;handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEntityHit</name>
            <anchorfile>qt3d-qcollisionqueryresultprivate.html</anchorfile>
            <anchor>addEntityHit</anchor>
            <arglist>(const QNodeId &amp;entity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QOpenGLInformationService</name>
        <filename>qt3d-qopenglinformationservice.html</filename>
        <base>QAbstractServiceProvider</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qt3d-qopenglinformationservice.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLInformationService</name>
            <anchorfile>qt3d-qopenglinformationservice.html</anchorfile>
            <anchor>QOpenGLInformationService</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractServiceProvider</name>
        <filename>qt3d-qabstractserviceprovider.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractServiceProvider</name>
            <anchorfile>qt3d-qabstractserviceprovider.html</anchorfile>
            <anchor>dtor.QAbstractServiceProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>type</name>
            <anchorfile>qt3d-qabstractserviceprovider.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qt3d-qabstractserviceprovider.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractServiceProvider</name>
            <anchorfile>qt3d-qabstractserviceprovider.html</anchorfile>
            <anchor>QAbstractServiceProvider</anchor>
            <arglist>(int type, const QString &amp;description)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QServiceLocator</name>
        <filename>qt3d-qservicelocator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QServiceLocator</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>QServiceLocator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QServiceLocator</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>dtor.QServiceLocator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ServiceType</name>
            <anchor>ServiceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SystemInformation">
            <anchor>ServiceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGLInformation">
            <anchor>ServiceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CollisionService">
            <anchor>ServiceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameAdvanceService">
            <anchor>ServiceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserService">
            <anchor>ServiceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerServiceProvider</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>registerServiceProvider</anchor>
            <arglist>(int serviceType, QAbstractServiceProvider *provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterServiceProvider</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>unregisterServiceProvider</anchor>
            <arglist>(int serviceType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serviceCount</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>serviceCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>service</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>service</anchor>
            <arglist>(int serviceType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSystemInformationService *</type>
            <name>systemInformation</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>systemInformation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLInformationService *</type>
            <name>openGLInformation</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>openGLInformation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractFrameAdvanceService *</type>
            <name>frameAdvanceService</name>
            <anchorfile>qt3d-qservicelocator.html</anchorfile>
            <anchor>frameAdvanceService</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QSystemInformationService</name>
        <filename>qt3d-qsysteminformationservice.html</filename>
        <base>QAbstractServiceProvider</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>aspectNames</name>
            <anchorfile>qt3d-qsysteminformationservice.html</anchorfile>
            <anchor>aspectNames</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>threadPoolThreadCount</name>
            <anchorfile>qt3d-qsysteminformationservice.html</anchorfile>
            <anchor>threadPoolThreadCount</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSystemInformationService</name>
            <anchorfile>qt3d-qsysteminformationservice.html</anchorfile>
            <anchor>QSystemInformationService</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QTickClockService</name>
        <filename>qt3d-qtickclockservice.html</filename>
        <base>QAbstractFrameAdvanceService</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTickClockService</name>
            <anchorfile>qt3d-qtickclockservice.html</anchorfile>
            <anchor>QTickClockService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTickClockService</name>
            <anchorfile>qt3d-qtickclockservice.html</anchorfile>
            <anchor>dtor.QTickClockService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>waitForNextFrame</name>
            <anchorfile>qt3d-qtickclockservice.html</anchorfile>
            <anchor>waitForNextFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>start</name>
            <anchorfile>qt3d-qtickclockservice.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>stop</name>
            <anchorfile>qt3d-qtickclockservice.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QAbstractTransform</name>
        <filename>qt3d-qabstracttransform.html</filename>
        <base>QObject</base>
        <member kind="property" type="QMatrix4x4">
            <name>transformMatrix</name>
            <anchorfile>qt3d-qabstracttransform.html</anchorfile>
            <anchor>transformMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTransform</name>
            <anchorfile>qt3d-qabstracttransform.html</anchorfile>
            <anchor>QAbstractTransform</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMatrix4x4</type>
            <name>transformMatrix</name>
            <anchorfile>qt3d-qabstracttransform.html</anchorfile>
            <anchor>transformMatrix-prop</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>transformMatrixChanged</name>
            <anchorfile>qt3d-qabstracttransform.html</anchorfile>
            <anchor>transformMatrix-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QLookAtTransform</name>
        <filename>qt3d-qlookattransform.html</filename>
        <base>QAbstractTransform</base>
        <member kind="property" type="QVector3D">
            <name>position</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>upVector</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewCenter</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewVector</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLookAtTransform</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>QLookAtTransform</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMatrix4x4</type>
            <name>transformMatrix</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>transformMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QVector3D &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>position</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpVector</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>(const QVector3D &amp;upVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>upVector</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewCenter</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>(const QVector3D &amp;viewCenter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewCenter</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewVector</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>setViewVector</anchor>
            <arglist>(const QVector3D &amp;viewVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewVector</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upVectorChanged</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewCenterChanged</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewVectorChanged</name>
            <anchorfile>qt3d-qlookattransform.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QMatrixTransform</name>
        <filename>qt3d-qmatrixtransform.html</filename>
        <base>QAbstractTransform</base>
        <member kind="property" type="QMatrix4x4">
            <name>matrix</name>
            <anchorfile>qt3d-qmatrixtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrixTransform</name>
            <anchorfile>qt3d-qmatrixtransform.html</anchorfile>
            <anchor>QMatrixTransform</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrixTransform</name>
            <anchorfile>qt3d-qmatrixtransform.html</anchorfile>
            <anchor>QMatrixTransform-2</anchor>
            <arglist>(const QMatrix4x4 &amp;m, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>matrix</name>
            <anchorfile>qt3d-qmatrixtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qt3d-qmatrixtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMatrix4x4</type>
            <name>transformMatrix</name>
            <anchorfile>qt3d-qmatrixtransform.html</anchorfile>
            <anchor>transformMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>matrixChanged</name>
            <anchorfile>qt3d-qmatrixtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMatrixTransform</name>
            <anchorfile>qt3d-qmatrixtransform.html</anchorfile>
            <anchor>QMatrixTransform-3</anchor>
            <arglist>(QMatrixTransformPrivate &amp;dd, QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QRotateTransform</name>
        <filename>qt3d-qrotatetransform.html</filename>
        <base>QAbstractTransform</base>
        <member kind="property" type="float">
            <name>angle</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>angle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>angleRad</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>angleRad-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>axis</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRotateTransform</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>QRotateTransform</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>angleDeg</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>angle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>angleRad</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>angleRad-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>axis</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMatrix4x4</type>
            <name>transformMatrix</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>transformMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAngleDeg</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>angle-prop</anchor>
            <arglist>(float arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAngleRad</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>angleRad-prop</anchor>
            <arglist>(float arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxis</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(const QVector3D &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axisChanged</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>angleChanged</name>
            <anchorfile>qt3d-qrotatetransform.html</anchorfile>
            <anchor>angleRad-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QScaleTransform</name>
        <filename>qt3d-qscaletransform.html</filename>
        <base>QAbstractTransform</base>
        <member kind="property" type="QVector3D">
            <name>scale3D</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>scale</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScaleTransform</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>QScaleTransform</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>scale3D</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale3D</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>(const QVector3D &amp;scale3D)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMatrix4x4</type>
            <name>transformMatrix</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>transformMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale3DChanged</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3d-qscaletransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QTransform</name>
        <filename>qt3d-qtransform.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QMatrix4x4">
            <name>matrix</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>QTransform</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>QTransform-2</anchor>
            <arglist>(QList&lt;QAbstractTransform *&gt; transforms, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>QTransform-3</anchor>
            <arglist>(QAbstractTransform *transform, QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTransform</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>dtor.QTransform</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractTransform *&gt;</type>
            <name>transforms</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>transforms</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTransform</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>addTransform</anchor>
            <arglist>(QAbstractTransform *xform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTransform</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>removeTransform</anchor>
            <arglist>(QAbstractTransform *xform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>matrix</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>matrixChanged</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>transformsChanged</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>transformsChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qtransform.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QTranslateTransform</name>
        <filename>qt3d-qtranslatetransform.html</filename>
        <base>QAbstractTransform</base>
        <member kind="property" type="float">
            <name>dx</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dx-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>dy</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>dz</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dz-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>translation</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTranslateTransform</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>QTranslateTransform</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>dx</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dx-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>dy</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>dz</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dz-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>translation</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMatrix4x4</type>
            <name>transformMatrix</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>transformMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDx</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dx-prop</anchor>
            <arglist>(float arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDy</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dy-prop</anchor>
            <arglist>(float arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDz</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dz-prop</anchor>
            <arglist>(float arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTranslation</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translateChanged</name>
            <anchorfile>qt3d-qtranslatetransform.html</anchorfile>
            <anchor>dz-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3D::Input</name>
        <filename>qt3d-input.html</filename>
        <class>Qt3D::Input::AssignKeyboardFocusJob</class>
        <class>Qt3D::Input::CameraController</class>
        <member kind="typedef" type="">
            <name>HKeyboardController</name>
            <anchorfile>qt3d-input.html</anchorfile>
            <anchor>HKeyboardController-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>HKeyboardInput</name>
            <anchorfile>qt3d-input.html</anchorfile>
            <anchor>HKeyboardInput-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>HMouseController</name>
            <anchorfile>qt3d-input.html</anchorfile>
            <anchor>HMouseController-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>HMouseInput</name>
            <anchorfile>qt3d-input.html</anchorfile>
            <anchor>HMouseInput-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3D::Input::InputHandler</class>
        <class>Qt3D::Input::KeyboardInputManager</class>
        <class>Qt3D::Input::KeyboardControllerManager</class>
        <class>Qt3D::Input::MouseControllerManager</class>
        <class>Qt3D::Input::MouseInputManager</class>
        <class>Qt3D::Input::KeyboardController</class>
        <class>Qt3D::Input::KeyboardControllerFunctor</class>
        <class>Qt3D::Input::KeyboardEventFilter</class>
        <class>Qt3D::Input::KeyboardInput</class>
        <class>Qt3D::Input::KeyboardInputFunctor</class>
        <class>Qt3D::Input::KeyEventDispatcherJob</class>
        <class>Qt3D::Input::MouseController</class>
        <class>Qt3D::Input::MouseControllerFunctor</class>
        <class>Qt3D::Input::MouseEventDispatcherJob</class>
        <class>Qt3D::Input::MouseEventFilter</class>
        <class>Qt3D::Input::MouseInput</class>
        <class>Qt3D::Input::MouseInputFunctor</class>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::AssignKeyboardFocusJob</name>
        <filename>qt3d-input-assignkeyboardfocusjob.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>AssignKeyboardFocusJob</name>
            <anchorfile>qt3d-input-assignkeyboardfocusjob.html</anchorfile>
            <anchor>AssignKeyboardFocusJob</anchor>
            <arglist>(const QNodeId &amp;controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-assignkeyboardfocusjob.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>run</name>
            <anchorfile>qt3d-input-assignkeyboardfocusjob.html</anchorfile>
            <anchor>run</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::CameraController</name>
        <filename>qt3d-input-cameracontroller.html</filename>
        <base>QObject</base>
        <member kind="property" type="float">
            <name>linearSpeed</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>orbitRate</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>orbitRate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>lookRate</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>lookRate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>multisampleEnabled</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>multisampleEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>CameraController</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>CameraController</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>setCamera</anchor>
            <arglist>(QCamera *cam)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>camera</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearSpeed</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>(float speed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearSpeed</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>orbitRate</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>orbitRate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrbitRate</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>orbitRate-prop</anchor>
            <arglist>(float rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lookRate</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>lookRate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLookRate</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>lookRate-prop</anchor>
            <arglist>(float rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mousePressEvent</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *aEvent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *aEvent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *aEvent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keyPressEvent</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *aEvent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *aEvent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(double t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMultisampleEnabled</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>multisampleEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggleMSAA</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>toggleMSAA</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *receiver, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearSpeedChanged</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>orbitRateChanged</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>orbitRate-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lookRateChanged</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>lookRate-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>multisampleEnabledChanged</name>
            <anchorfile>qt3d-input-cameracontroller.html</anchorfile>
            <anchor>multisampleEnabled-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::InputHandler</name>
        <filename>qt3d-input-inputhandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>InputHandler</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>InputHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventSource</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>setEventSource</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>eventSource</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>eventSource</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>KeyboardControllerManager *</type>
            <name>keyboardControllerManager</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>keyboardControllerManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>KeyboardInputManager *</type>
            <name>keyboardInputManager</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>keyboardInputManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MouseControllerManager *</type>
            <name>mouseControllerManager</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>mouseControllerManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MouseInputManager *</type>
            <name>mouseInputManager</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>mouseInputManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendKeyEvent</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>appendKeyEvent</anchor>
            <arglist>(const QKeyEvent &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QKeyEvent&gt;</type>
            <name>pendingKeyEvents</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>pendingKeyEvents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPendingKeyEvents</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>clearPendingKeyEvents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendMouseEvent</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>appendMouseEvent</anchor>
            <arglist>(const QMouseEvent &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QMouseEvent&gt;</type>
            <name>pendingMouseEvents</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>pendingMouseEvents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPendingMouseEvents</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>clearPendingMouseEvents</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendKeyboardController</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>appendKeyboardController</anchor>
            <arglist>(HKeyboardController controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeKeyboardController</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>removeKeyboardController</anchor>
            <arglist>(HKeyboardController controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendMouseController</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>appendMouseController</anchor>
            <arglist>(HMouseController controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMouseController</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>removeMouseController</anchor>
            <arglist>(HMouseController controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAspectJobPtr&gt;</type>
            <name>keyboardJobs</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>keyboardJobs</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QAspectJobPtr&gt;</type>
            <name>mouseJobs</name>
            <anchorfile>qt3d-input-inputhandler.html</anchorfile>
            <anchor>mouseJobs</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::KeyboardInputManager</name>
        <filename>qt3d-input-keyboardinputmanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>KeyboardInputManager</name>
            <anchorfile>qt3d-input-keyboardinputmanager.html</anchorfile>
            <anchor>KeyboardInputManager</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::KeyboardControllerManager</name>
        <filename>qt3d-input-keyboardcontrollermanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>KeyboardControllerManager</name>
            <anchorfile>qt3d-input-keyboardcontrollermanager.html</anchorfile>
            <anchor>KeyboardControllerManager</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::MouseControllerManager</name>
        <filename>qt3d-input-mousecontrollermanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>MouseControllerManager</name>
            <anchorfile>qt3d-input-mousecontrollermanager.html</anchorfile>
            <anchor>MouseControllerManager</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::MouseInputManager</name>
        <filename>qt3d-input-mouseinputmanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>MouseInputManager</name>
            <anchorfile>qt3d-input-mouseinputmanager.html</anchorfile>
            <anchor>MouseInputManager</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::KeyboardController</name>
        <filename>qt3d-input-keyboardcontroller.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>KeyboardController</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>KeyboardController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateFromPeer</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>updateFromPeer</anchor>
            <arglist>(QNode *peer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestFocusForInput</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>requestFocusForInput</anchor>
            <arglist>(const QNodeId &amp;inputId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyboardInput</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>addKeyboardInput</anchor>
            <arglist>(const QNodeId &amp;input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeKeyboardInput</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>removeKeyboardInput</anchor>
            <arglist>(const QNodeId &amp;input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentFocusItem</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>setCurrentFocusItem</anchor>
            <arglist>(const QNodeId &amp;input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>currentFocusItem</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>currentFocusItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>lastKeyboardInputRequester</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>lastKeyboardInputRequester</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QNodeId&gt;</type>
            <name>keyboardInputs</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>keyboardInputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;HKeyboardInput&gt;</type>
            <name>keyboardInputsHandles</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>keyboardInputsHandles</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-input-keyboardcontroller.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::KeyboardControllerFunctor</name>
        <filename>qt3d-input-keyboardcontrollerfunctor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>KeyboardControllerFunctor</name>
            <anchorfile>qt3d-input-keyboardcontrollerfunctor.html</anchorfile>
            <anchor>KeyboardControllerFunctor</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>create</name>
            <anchorfile>qt3d-input-keyboardcontrollerfunctor.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QNode *frontend, const QBackendNodeFactory *factory) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>get</name>
            <anchorfile>qt3d-input-keyboardcontrollerfunctor.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qt3d-input-keyboardcontrollerfunctor.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::KeyboardEventFilter</name>
        <filename>qt3d-input-keyboardeventfilter.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>KeyboardEventFilter</name>
            <anchorfile>qt3d-input-keyboardeventfilter.html</anchorfile>
            <anchor>KeyboardEventFilter</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-keyboardeventfilter.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InputHandler *</type>
            <name>inputHandler</name>
            <anchorfile>qt3d-input-keyboardeventfilter.html</anchorfile>
            <anchor>inputHandler</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qt3d-input-keyboardeventfilter.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *obj, QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::KeyboardInput</name>
        <filename>qt3d-input-keyboardinput.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>KeyboardInput</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>KeyboardInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateFromPeer</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>updateFromPeer</anchor>
            <arglist>(QNode *peer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>keyboardController</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>keyboardController</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>setFocus</anchor>
            <arglist>(bool focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>keyEvent</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>keyEvent</anchor>
            <arglist>(const Q3DKeyEventPtr &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>requestFocus</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>requestFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setController</name>
            <anchorfile>qt3d-input-keyboardinput.html</anchorfile>
            <anchor>setController</anchor>
            <arglist>(const QNodeId &amp;controller)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::KeyboardInputFunctor</name>
        <filename>qt3d-input-keyboardinputfunctor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>KeyboardInputFunctor</name>
            <anchorfile>qt3d-input-keyboardinputfunctor.html</anchorfile>
            <anchor>KeyboardInputFunctor</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>create</name>
            <anchorfile>qt3d-input-keyboardinputfunctor.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QNode *frontend, const QBackendNodeFactory *factory) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>get</name>
            <anchorfile>qt3d-input-keyboardinputfunctor.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qt3d-input-keyboardinputfunctor.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::KeyEventDispatcherJob</name>
        <filename>qt3d-input-keyeventdispatcherjob.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>KeyEventDispatcherJob</name>
            <anchorfile>qt3d-input-keyeventdispatcherjob.html</anchorfile>
            <anchor>KeyEventDispatcherJob</anchor>
            <arglist>(const QNodeId &amp;input, const QList&lt;QKeyEvent&gt; &amp;events)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-keyeventdispatcherjob.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>run</name>
            <anchorfile>qt3d-input-keyeventdispatcherjob.html</anchorfile>
            <anchor>run</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::MouseController</name>
        <filename>qt3d-input-mousecontroller.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>MouseController</name>
            <anchorfile>qt3d-input-mousecontroller.html</anchorfile>
            <anchor>MouseController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~MouseController</name>
            <anchorfile>qt3d-input-mousecontroller.html</anchorfile>
            <anchor>dtor.MouseController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateFromPeer</name>
            <anchorfile>qt3d-input-mousecontroller.html</anchorfile>
            <anchor>updateFromPeer</anchor>
            <arglist>(QNode *peer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-mousecontroller.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMouseInput</name>
            <anchorfile>qt3d-input-mousecontroller.html</anchorfile>
            <anchor>addMouseInput</anchor>
            <arglist>(const QNodeId &amp;input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMouseInput</name>
            <anchorfile>qt3d-input-mousecontroller.html</anchorfile>
            <anchor>removeMouseInput</anchor>
            <arglist>(const QNodeId &amp;input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QNodeId&gt;</type>
            <name>mouseInputs</name>
            <anchorfile>qt3d-input-mousecontroller.html</anchorfile>
            <anchor>mouseInputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-input-mousecontroller.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::MouseControllerFunctor</name>
        <filename>qt3d-input-mousecontrollerfunctor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>MouseControllerFunctor</name>
            <anchorfile>qt3d-input-mousecontrollerfunctor.html</anchorfile>
            <anchor>MouseControllerFunctor</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>create</name>
            <anchorfile>qt3d-input-mousecontrollerfunctor.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QNode *frontend, const QBackendNodeFactory *factory) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>get</name>
            <anchorfile>qt3d-input-mousecontrollerfunctor.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qt3d-input-mousecontrollerfunctor.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::MouseEventDispatcherJob</name>
        <filename>qt3d-input-mouseeventdispatcherjob.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>MouseEventDispatcherJob</name>
            <anchorfile>qt3d-input-mouseeventdispatcherjob.html</anchorfile>
            <anchor>MouseEventDispatcherJob</anchor>
            <arglist>(const QNodeId &amp;input, const QList&lt;QMouseEvent&gt; &amp;events)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-mouseeventdispatcherjob.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>run</name>
            <anchorfile>qt3d-input-mouseeventdispatcherjob.html</anchorfile>
            <anchor>run</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::MouseEventFilter</name>
        <filename>qt3d-input-mouseeventfilter.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>MouseEventFilter</name>
            <anchorfile>qt3d-input-mouseeventfilter.html</anchorfile>
            <anchor>MouseEventFilter</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-mouseeventfilter.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InputHandler *</type>
            <name>inputHandler</name>
            <anchorfile>qt3d-input-mouseeventfilter.html</anchorfile>
            <anchor>inputHandler</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qt3d-input-mouseeventfilter.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *obj, QEvent *e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::MouseInput</name>
        <filename>qt3d-input-mouseinput.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>MouseInput</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>MouseInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~MouseInput</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>dtor.MouseInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateFromPeer</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>updateFromPeer</anchor>
            <arglist>(QNode *peer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeId</type>
            <name>mouseController</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>mouseController</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputHandler</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>setInputHandler</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseEvent</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>mouseEvent</anchor>
            <arglist>(const Q3DMouseEventPtr &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wheelEvent</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(const Q3DWheelEventPtr &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setController</name>
            <anchorfile>qt3d-input-mouseinput.html</anchorfile>
            <anchor>setController</anchor>
            <arglist>(const QNodeId &amp;controller)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Input::MouseInputFunctor</name>
        <filename>qt3d-input-mouseinputfunctor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>MouseInputFunctor</name>
            <anchorfile>qt3d-input-mouseinputfunctor.html</anchorfile>
            <anchor>MouseInputFunctor</anchor>
            <arglist>(InputHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>create</name>
            <anchorfile>qt3d-input-mouseinputfunctor.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QNode *frontend, const QBackendNodeFactory *factory) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBackendNode *</type>
            <name>get</name>
            <anchorfile>qt3d-input-mouseinputfunctor.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qt3d-input-mouseinputfunctor.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(const QNodeId &amp;id) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Q3DKeyEvent</name>
        <filename>qt3d-q3dkeyevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>key</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>modifiers</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isAutoRepeat</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>isAutoRepeat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="quint32">
            <name>nativeScanCode</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>nativeScanCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q3DKeyEvent</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>Q3DKeyEvent</anchor>
            <arglist>(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, const QString &amp;text, bool autorep, ushort count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q3DKeyEvent</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>Q3DKeyEvent-2</anchor>
            <arglist>(const QKeyEvent &amp;ke)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>modifiers</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoRepeat</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>isAutoRepeat-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeScanCode</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>nativeScanCode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qt3d-q3dkeyevent.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(QKeySequence::StandardKey key_) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Q3DMouseEvent</name>
        <filename>qt3d-q3dmouseevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wasHeld</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>wasHeld-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3D::Q3DMouseEvent::Buttons">
            <name>button</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3D::Q3DMouseEvent::Modifiers">
            <name>modifier</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>modifier-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Buttons</name>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Modifiers</name>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShiftModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControlModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AltModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeypadModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q3DMouseEvent</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>Q3DMouseEvent</anchor>
            <arglist>(const QMouseEvent &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Q3DMouseEvent</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>dtor.Q3DMouseEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wasHeld</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>wasHeld-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Buttons</type>
            <name>button</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Modifiers</type>
            <name>modifier</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>modifier-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3d-q3dmouseevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Q3DWheelEvent</name>
        <filename>qt3d-q3dwheelevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPoint">
            <name>angleDelta</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>angleDelta-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3D::Q3DWheelEvent::Modifiers">
            <name>modifier</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>modifier-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Buttons</name>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoButton">
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Modifiers</name>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShiftModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ControlModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AltModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeypadModifier">
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q3DWheelEvent</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>Q3DWheelEvent</anchor>
            <arglist>(const QWheelEvent &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Q3DWheelEvent</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>dtor.Q3DWheelEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>angleDelta</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>angleDelta-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Modifiers</type>
            <name>modifier</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>modifier-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3d-q3dwheelevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QInputAspect</name>
        <filename>qt3d-qinputaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="property" type="Qt3D::QCamera *">
            <name>camera</name>
            <anchorfile>qt3d-qinputaspect.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputAspect</name>
            <anchorfile>qt3d-qinputaspect.html</anchorfile>
            <anchor>QInputAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3d-qinputaspect.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3d-qinputaspect.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QAspectJobPtr&gt;</type>
            <name>jobsToExecute</name>
            <anchorfile>qt3d-qinputaspect.html</anchorfile>
            <anchor>jobsToExecute</anchor>
            <arglist>(qint64 time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneNodeAdded</name>
            <anchorfile>qt3d-qinputaspect.html</anchorfile>
            <anchor>sceneNodeAdded</anchor>
            <arglist>(QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneNodeRemoved</name>
            <anchorfile>qt3d-qinputaspect.html</anchorfile>
            <anchor>sceneNodeRemoved</anchor>
            <arglist>(QSceneChangePtr &amp;e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QKeyboardController</name>
        <filename>qt3d-qkeyboardcontroller.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3D::QKeyboardInput *">
            <name>activeInput</name>
            <anchorfile>qt3d-qkeyboardcontroller.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyboardController</name>
            <anchorfile>qt3d-qkeyboardcontroller.html</anchorfile>
            <anchor>QKeyboardController</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QKeyboardController</name>
            <anchorfile>qt3d-qkeyboardcontroller.html</anchorfile>
            <anchor>dtor.QKeyboardController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyboardInput *</type>
            <name>activeInput</name>
            <anchorfile>qt3d-qkeyboardcontroller.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qkeyboardcontroller.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeInputChanged</name>
            <anchorfile>qt3d-qkeyboardcontroller.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QKeyboardInput</name>
        <filename>qt3d-qkeyboardinput.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3D::QKeyboardController *">
            <name>controller</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>focus</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyboardInput</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>QKeyboardInput</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QKeyboardInput</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>dtor.QKeyboardInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setController</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist>(QKeyboardController *controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyboardController *</type>
            <name>controller</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>focus</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>controllerChanged</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusChanged</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit0Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit0Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit1Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit1Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit2Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit2Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit3Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit3Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit4Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit4Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit5Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit5Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit6Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit6Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit7Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit7Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit8Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit8Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit9Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>digit9Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>leftPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>rightPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>upPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>downPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>downPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>tabPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backtabPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>backtabPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>asteriskPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>asteriskPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>numberSignPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>numberSignPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>escapePressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>escapePressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>returnPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>returnPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enterPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>enterPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deletePressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>deletePressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>spacePressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>spacePressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>backPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>cancelPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>selectPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yesPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>yesPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>noPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>noPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context1Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>context1Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context2Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>context2Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context3Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>context3Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context4Pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>context4Pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>callPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>callPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hangupPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>hangupPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flipPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>flipPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>menuPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>menuPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeUpPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>volumeUpPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeDownPressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>volumeDownPressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3D::Q3DKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>keyEvent</name>
            <anchorfile>qt3d-qkeyboardinput.html</anchorfile>
            <anchor>keyEvent</anchor>
            <arglist>(Q3DKeyEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QMouseController</name>
        <filename>qt3d-qmousecontroller.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseController</name>
            <anchorfile>qt3d-qmousecontroller.html</anchorfile>
            <anchor>QMouseController</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>~QMouseController</name>
            <anchorfile>qt3d-qmousecontroller.html</anchorfile>
            <anchor>dtor.QMouseController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qmousecontroller.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QMouseControllerPrivate</name>
        <filename>qt3d-qmousecontrollerprivate.html</filename>
        <base>QObservableInterface</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseControllerPrivate</name>
            <anchorfile>qt3d-qmousecontrollerprivate.html</anchorfile>
            <anchor>QMouseControllerPrivate</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QMouseInput</name>
        <filename>qt3d-qmouseinput.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3D::QMouseController *">
            <name>controller</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>containsMouse</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseInput</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>QMouseInput</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMouseInput</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>dtor.QMouseInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setController</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist>(QMouseController *controller)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMouseController *</type>
            <name>controller</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsMouse</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>controllerChanged</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>controller-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>containsMouseChanged</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(Qt3D::Q3DMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doubleClicked</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>doubleClicked</anchor>
            <arglist>(Qt3D::Q3DMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exited</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>exited</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3D::Q3DMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3D::Q3DMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressAndHold</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>pressAndHold</anchor>
            <arglist>(Qt3D::Q3DMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>positionChanged</anchor>
            <arglist>(Qt3D::Q3DMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wheel</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>wheel</anchor>
            <arglist>(Qt3D::Q3DWheelEvent *wheel)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>copy</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>mouseEvent</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>mouseEvent</anchor>
            <arglist>(Q3DMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setContainsMouse</name>
            <anchorfile>qt3d-qmouseinput.html</anchorfile>
            <anchor>setContainsMouse</anchor>
            <arglist>(bool contains)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::QMouseInputPrivate</name>
        <filename>qt3d-qmouseinputprivate.html</filename>
        <base>QObservableInterface</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseInputPrivate</name>
            <anchorfile>qt3d-qmouseinputprivate.html</anchorfile>
            <anchor>QMouseInputPrivate</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3D::AssimpHelper</name>
        <filename>qt3d-assimphelper.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D::AssimpParser</name>
        <filename>qt3d-assimpparser.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>AssimpParser</name>
            <anchorfile>qt3d-assimpparser.html</anchorfile>
            <anchor>AssimpParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~AssimpParser</name>
            <anchorfile>qt3d-assimpparser.html</anchorfile>
            <anchor>dtor.AssimpParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3d-assimpparser.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExtensionSupported</name>
            <anchorfile>qt3d-assimpparser.html</anchorfile>
            <anchor>isExtensionSupported</anchor>
            <arglist>(const QUrl &amp;source) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntity *</type>
            <name>scene</name>
            <anchorfile>qt3d-assimpparser.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntity *</type>
            <name>node</name>
            <anchorfile>qt3d-assimpparser.html</anchorfile>
            <anchor>node</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::GLTFParser</name>
        <filename>qt3d-gltfparser.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>GLTFParser</name>
            <anchorfile>qt3d-gltfparser.html</anchorfile>
            <anchor>GLTFParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~GLTFParser</name>
            <anchorfile>qt3d-gltfparser.html</anchorfile>
            <anchor>dtor.GLTFParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBasePath</name>
            <anchorfile>qt3d-gltfparser.html</anchorfile>
            <anchor>setBasePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setJSON</name>
            <anchorfile>qt3d-gltfparser.html</anchorfile>
            <anchor>setJSON</anchor>
            <arglist>(const QJsonDocument &amp;json)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3d-gltfparser.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExtensionSupported</name>
            <anchorfile>qt3d-gltfparser.html</anchorfile>
            <anchor>isExtensionSupported</anchor>
            <arglist>(const QUrl &amp;source) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntity *</type>
            <name>node</name>
            <anchorfile>qt3d-gltfparser.html</anchorfile>
            <anchor>node</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntity *</type>
            <name>scene</name>
            <anchorfile>qt3d-gltfparser.html</anchorfile>
            <anchor>scene</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3D::Quick</name>
        <filename>qt3d-quick.html</filename>
        <class>Qt3D::Quick::Quick3DConfiguration</class>
        <class>Qt3D::Quick::Quick3DEntity</class>
        <class>Qt3D::Quick::Quick3DEntityLoader</class>
        <class>Qt3D::Quick::Quick3DNode</class>
        <class>Qt3D::Quick::Quick3DNodeInstantiator</class>
        <class>Qt3D::Quick::Quick3DTransform</class>
        <class>Qt3D::Quick::QQmlAspectEngine</class>
        <namespace>Qt3D::Quick::Quick3DValueTypes</namespace>
        <class>Qt3D::Quick::Quick3DColorValueType</class>
        <class>Qt3D::Quick::Quick3DVector2DValueType</class>
        <class>Qt3D::Quick::Quick3DVector3DValueType</class>
        <class>Qt3D::Quick::Quick3DVector4DValueType</class>
        <class>Qt3D::Quick::Quick3DQuaternionValueType</class>
        <class>Qt3D::Quick::Quick3DMatrix4x4ValueType</class>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DConfiguration</name>
        <filename>qt3d-quick-quick3dconfiguration.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3D::QCamera *">
            <name>controlledCamera</name>
            <anchorfile>qt3d-quick-quick3dconfiguration.html</anchorfile>
            <anchor>controlledCamera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Quick3DConfiguration</name>
            <anchorfile>qt3d-quick-quick3dconfiguration.html</anchorfile>
            <anchor>Quick3DConfiguration</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setControlledCamera</name>
            <anchorfile>qt3d-quick-quick3dconfiguration.html</anchorfile>
            <anchor>controlledCamera-prop</anchor>
            <arglist>(QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCamera *</type>
            <name>controlledCamera</name>
            <anchorfile>qt3d-quick-quick3dconfiguration.html</anchorfile>
            <anchor>controlledCamera-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>controlledCameraChanged</name>
            <anchorfile>qt3d-quick-quick3dconfiguration.html</anchorfile>
            <anchor>controlledCamera-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DEntity</name>
        <filename>qt3d-quick-quick3dentity.html</filename>
        <base>QObject</base>
        <member kind="property" type="QQmlListProperty&lt;Qt3D::QComponent&gt;">
            <name>components</name>
            <anchorfile>qt3d-quick-quick3dentity.html</anchorfile>
            <anchor>components-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Quick3DEntity</name>
            <anchorfile>qt3d-quick-quick3dentity.html</anchorfile>
            <anchor>Quick3DEntity</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlListProperty&lt;Qt3D::QComponent&gt;</type>
            <name>componentList</name>
            <anchorfile>qt3d-quick-quick3dentity.html</anchorfile>
            <anchor>components-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEntity *</type>
            <name>parentEntity</name>
            <anchorfile>qt3d-quick-quick3dentity.html</anchorfile>
            <anchor>parentEntity</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DEntityLoader</name>
        <filename>qt3d-quick-quick3dentityloader.html</filename>
        <member kind="property" type="QObject *">
            <name>entity</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Quick3DEntityLoader</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>Quick3DEntityLoader</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Quick3DEntityLoader</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>dtor.Quick3DEntityLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>entity</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entityChanged</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3d-quick-quick3dentityloader.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DNode</name>
        <filename>qt3d-quick-quick3dnode.html</filename>
        <base>QObject</base>
        <member kind="property" type="QQmlListProperty&lt;QObject&gt;">
            <name>data</name>
            <anchorfile>qt3d-quick-quick3dnode.html</anchorfile>
            <anchor>data-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQmlListProperty&lt;Qt3D::QNode&gt;">
            <name>childNodes</name>
            <anchorfile>qt3d-quick-quick3dnode.html</anchorfile>
            <anchor>childNodes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Quick3DNode</name>
            <anchorfile>qt3d-quick-quick3dnode.html</anchorfile>
            <anchor>Quick3DNode</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlListProperty&lt;QObject&gt;</type>
            <name>data</name>
            <anchorfile>qt3d-quick-quick3dnode.html</anchorfile>
            <anchor>data-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlListProperty&lt;Qt3D::QNode&gt;</type>
            <name>childNodes</name>
            <anchorfile>qt3d-quick-quick3dnode.html</anchorfile>
            <anchor>childNodes-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNode *</type>
            <name>parentNode</name>
            <anchorfile>qt3d-quick-quick3dnode.html</anchorfile>
            <anchor>parentNode</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DNodeInstantiator</name>
        <filename>qt3d-quick-quick3dnodeinstantiator.html</filename>
        <base>QQmlParserStatus</base>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>asynchronous</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>asynchronous-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>model</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>model-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQmlComponent *">
            <name>delegate</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>delegate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QObject *">
            <name>object</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>object-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Quick3DNodeInstantiator</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>Quick3DNodeInstantiator</anchor>
            <arglist>(QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Quick3DNodeInstantiator</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>dtor.Quick3DNodeInstantiator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActive</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>(bool newVal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAsync</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>asynchronous-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAsync</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>asynchronous-prop</anchor>
            <arglist>(bool newVal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlComponent *</type>
            <name>delegate</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>delegate-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDelegate</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>delegate-prop</anchor>
            <arglist>(QQmlComponent *c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>model</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>model-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModel</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>model-prop</anchor>
            <arglist>(const QVariant &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>object</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>object-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>objectAt</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>objectAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modelChanged</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>model-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>delegateChanged</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>delegate-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>countChanged</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>objectChanged</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>object-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeChanged</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>asynchronousChanged</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>asynchronous-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>objectAdded</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>objectAdded</anchor>
            <arglist>(int index, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>objectRemoved</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>objectRemoved</anchor>
            <arglist>(int index, QObject *object)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>copy</name>
            <anchorfile>qt3d-quick-quick3dnodeinstantiator.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QNode *ref)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DTransform</name>
        <filename>qt3d-quick-quick3dtransform.html</filename>
        <base>QObject</base>
        <member kind="property" type="QQmlListProperty&lt;Qt3D::QAbstractTransform&gt;">
            <name>transforms</name>
            <anchorfile>qt3d-quick-quick3dtransform.html</anchorfile>
            <anchor>transforms-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Quick3DTransform</name>
            <anchorfile>qt3d-quick-quick3dtransform.html</anchorfile>
            <anchor>Quick3DTransform</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlListProperty&lt;Qt3D::QAbstractTransform&gt;</type>
            <name>transformList</name>
            <anchorfile>qt3d-quick-quick3dtransform.html</anchorfile>
            <anchor>transforms-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform *</type>
            <name>parentTransform</name>
            <anchorfile>qt3d-quick-quick3dtransform.html</anchorfile>
            <anchor>parentTransform</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::QQmlAspectEngine</name>
        <filename>qt3d-quick-qqmlaspectengine.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Error">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlAspectEngine</name>
            <anchorfile>qt3d-quick-qqmlaspectengine.html</anchorfile>
            <anchor>QQmlAspectEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Status</type>
            <name>status</name>
            <anchorfile>qt3d-quick-qqmlaspectengine.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3d-quick-qqmlaspectengine.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>qmlEngine</name>
            <anchorfile>qt3d-quick-qqmlaspectengine.html</anchorfile>
            <anchor>qmlEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAspectEngine *</type>
            <name>aspectEngine</name>
            <anchorfile>qt3d-quick-qqmlaspectengine.html</anchorfile>
            <anchor>aspectEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3d-quick-qqmlaspectengine.html</anchorfile>
            <anchor>statusChanged</anchor>
            <arglist>(Status )</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3D::Quick::Quick3DValueTypes</name>
        <filename>qt3d-quick-quick3dvaluetypes.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DColorValueType</name>
        <filename>qt3d-quick-quick3dcolorvaluetype.html</filename>
        <member kind="property" type="qreal">
            <name>r</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>r-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>g</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>g-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>b</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>b-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>a</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>a-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>r</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>r-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>g</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>g-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>b</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>b-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>a</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>a-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setR</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>r-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setG</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>g-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setB</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>b-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setA</name>
            <anchorfile>qt3d-quick-quick3dcolorvaluetype.html</anchorfile>
            <anchor>a-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DVector2DValueType</name>
        <filename>qt3d-quick-quick3dvector2dvaluetype.html</filename>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotProduct</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector2D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>times</anchor>
            <arglist>(const QVector2D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>times-2</anchor>
            <arglist>(qreal scalar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>plus</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>plus</anchor>
            <arglist>(const QVector2D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>minus</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>minus</anchor>
            <arglist>(const QVector2D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>normalized</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>length</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toVector3d</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>toVector3d</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>toVector4d</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>toVector4d</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fuzzyEquals</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>fuzzyEquals</anchor>
            <arglist>(const QVector2D &amp;vec, qreal epsilon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fuzzyEquals</name>
            <anchorfile>qt3d-quick-quick3dvector2dvaluetype.html</anchorfile>
            <anchor>fuzzyEquals-2</anchor>
            <arglist>(const QVector2D &amp;vec) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DVector3DValueType</name>
        <filename>qt3d-quick-quick3dvector3dvaluetype.html</filename>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>z</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>crossProduct</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>crossProduct</anchor>
            <arglist>(const QVector3D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotProduct</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector3D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>times</anchor>
            <arglist>(const QMatrix4x4 &amp;m) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>times-2</anchor>
            <arglist>(const QVector3D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>times-3</anchor>
            <arglist>(qreal scalar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>plus</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>plus</anchor>
            <arglist>(const QVector3D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>minus</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>minus</anchor>
            <arglist>(const QVector3D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>normalized</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>length</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>toVector2d</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>toVector2d</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>toVector4d</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>toVector4d</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fuzzyEquals</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>fuzzyEquals</anchor>
            <arglist>(const QVector3D &amp;vec, qreal epsilon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fuzzyEquals</name>
            <anchorfile>qt3d-quick-quick3dvector3dvaluetype.html</anchorfile>
            <anchor>fuzzyEquals-2</anchor>
            <arglist>(const QVector3D &amp;vec) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DVector4DValueType</name>
        <filename>qt3d-quick-quick3dvector4dvaluetype.html</filename>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>w</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>w-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>z</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>w</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>w-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setW</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>w-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotProduct</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector4D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>times</anchor>
            <arglist>(const QVector4D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>times-2</anchor>
            <arglist>(const QMatrix4x4 &amp;m) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>times-3</anchor>
            <arglist>(qreal scalar) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>plus</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>plus</anchor>
            <arglist>(const QVector4D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>minus</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>minus</anchor>
            <arglist>(const QVector4D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>normalized</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>length</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>toVector2d</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>toVector2d</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toVector3d</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>toVector3d</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fuzzyEquals</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>fuzzyEquals</anchor>
            <arglist>(const QVector4D &amp;vec, qreal epsilon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fuzzyEquals</name>
            <anchorfile>qt3d-quick-quick3dvector4dvaluetype.html</anchorfile>
            <anchor>fuzzyEquals-2</anchor>
            <arglist>(const QVector4D &amp;vec) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DQuaternionValueType</name>
        <filename>qt3d-quick-quick3dquaternionvaluetype.html</filename>
        <member kind="property" type="qreal">
            <name>scalar</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>scalar-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>scalar</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>scalar-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>z</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScalar</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>scalar-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qt3d-quick-quick3dquaternionvaluetype.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D::Quick::Quick3DMatrix4x4ValueType</name>
        <filename>qt3d-quick-quick3dmatrix4x4valuetype.html</filename>
        <member kind="property" type="qreal">
            <name>m11</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m11-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m12</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m12-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m13</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m13-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m14</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m14-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m21</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m21-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m22</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m22-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m23</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m23-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m24</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m24-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m31</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m31-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m32</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m32-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m33</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m33-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m34</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m34-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m41</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m41-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m42</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m42-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m43</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m43-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>m44</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m44-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m11</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m11-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m12</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m12-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m13</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m13-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m14</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m14-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m21</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m21-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m22</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m22-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m23</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m23-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m24</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m24-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m31</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m31-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m32</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m32-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m33</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m33-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m34</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m34-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m41</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m41-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m42</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m42-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m43</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m43-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m44</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m44-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM11</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m11-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM12</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m12-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM13</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m13-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM14</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m14-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM21</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m21-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM22</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m22-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM23</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m23-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM24</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m24-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM31</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m31-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM32</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m32-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM33</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m33-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM34</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m34-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM41</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m41-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM42</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m42-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM43</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m43-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setM44</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>m44-prop</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>times</anchor>
            <arglist>(const QMatrix4x4 &amp;m) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>times-2</anchor>
            <arglist>(const QVector4D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>times-3</anchor>
            <arglist>(const QVector3D &amp;vec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>times</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>times-4</anchor>
            <arglist>(qreal factor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>plus</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>plus</anchor>
            <arglist>(const QMatrix4x4 &amp;m) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>minus</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>minus</anchor>
            <arglist>(const QMatrix4x4 &amp;m) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>row</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>row</anchor>
            <arglist>(int n) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>column</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>column</anchor>
            <arglist>(int m) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>determinant</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>inverted</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>transposed</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fuzzyEquals</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>fuzzyEquals</anchor>
            <arglist>(const QMatrix4x4 &amp;m, qreal epsilon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fuzzyEquals</name>
            <anchorfile>qt3d-quick-quick3dmatrix4x4valuetype.html</anchorfile>
            <anchor>fuzzyEquals-2</anchor>
            <arglist>(const QMatrix4x4 &amp;m) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Camera</name>
        <filename>qml-qt3d-camera.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.CameraLens</name>
        <filename>qml-qt3d-cameralens.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Component3D</name>
        <filename>qml-qt3d-component3d.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.MatrixTransform</name>
        <filename>qml-qt3d-matrixtransform.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyEvent</name>
        <filename>qml-qt3d-input-keyevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyboardController</name>
        <filename>qml-qt3d-input-keyboardcontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyboardInput</name>
        <filename>qml-qt3d-input-keyboardinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Configuration</name>
        <filename>qml-qt3d-configuration.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Entity</name>
        <filename>qml-qt3d-entity.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.EntityLoader</name>
        <filename>qml-qt3d-entityloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Node</name>
        <filename>qml-qt3d-node.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.NodeInstantiator</name>
        <filename>qml-qt3d-nodeinstantiator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Transform</name>
        <filename>qml-qt3d-transform.html</filename>
    </compound>
</tagfile>
