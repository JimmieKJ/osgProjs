<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QGeoCodeReply</name>
        <filename>qgeocodereply.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EngineNotSetError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommunicationError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedOptionError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CombinationError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCodeReply</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>QGeoCodeReply</anchor>
            <arglist>(Error error, const QString &amp;errorString, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoCodeReply</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>dtor.QGeoCodeReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoShape</type>
            <name>viewport</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>viewport</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoLocation&gt;</type>
            <name>locations</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>locations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>limit</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>limit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>offset</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>offset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>abort</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QGeoCodeReply::Error error, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeoCodeReply</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>QGeoCodeReply-2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(Error error, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFinished</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>setFinished</anchor>
            <arglist>(bool finished)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>setViewport</anchor>
            <arglist>(const QGeoShape &amp;viewport)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addLocation</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>addLocation</anchor>
            <arglist>(const QGeoLocation &amp;location)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setLocations</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>setLocations</anchor>
            <arglist>(const QList&lt;QGeoLocation&gt; &amp;locations)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setLimit</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>setLimit</anchor>
            <arglist>(int limit)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qgeocodereply.html</anchorfile>
            <anchor>setOffset</anchor>
            <arglist>(int offset)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoCodingManager</name>
        <filename>qgeocodingmanager.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoCodingManager</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>dtor.QGeoCodingManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCodeReply *</type>
            <name>geocode</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>geocode</anchor>
            <arglist>(const QGeoAddress &amp;address, const QGeoShape &amp;bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCodeReply *</type>
            <name>geocode</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>geocode-2</anchor>
            <arglist>(const QString &amp;address, int limit, int offset, const QGeoShape &amp;bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCodeReply *</type>
            <name>reverseGeocode</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>reverseGeocode</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate, const QGeoShape &amp;bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QGeoCodeReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeocodingmanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QGeoCodeReply *reply, QGeoCodeReply::Error error, QString errorString)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoCodingManagerEngine</name>
        <filename>qgeocodingmanagerengine.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCodingManagerEngine</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>QGeoCodingManagerEngine</anchor>
            <arglist>(const QVariantMap &amp;parameters, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoCodingManagerEngine</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>dtor.QGeoCodingManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoCodeReply *</type>
            <name>geocode</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>geocode</anchor>
            <arglist>(const QGeoAddress &amp;address, const QGeoShape &amp;bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoCodeReply *</type>
            <name>geocode</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>geocode-2</anchor>
            <arglist>(const QString &amp;address, int limit, int offset, const QGeoShape &amp;bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoCodeReply *</type>
            <name>reverseGeocode</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>reverseGeocode</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate, const QGeoShape &amp;bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QGeoCodeReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeocodingmanagerengine.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QGeoCodeReply *reply, QGeoCodeReply::Error error, QString errorString)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoManeuver</name>
        <filename>qgeomaneuver.html</filename>
        <member kind="enum">
            <name>InstructionDirection</name>
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDirection">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionForward">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionBearRight">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionLightRight">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionRight">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionHardRight">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionUTurnRight">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionUTurnLeft">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionHardLeft">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionLeft">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionLightLeft">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectionBearLeft">
            <anchor>InstructionDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoManeuver</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>QGeoManeuver</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoManeuver</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>QGeoManeuver-2</anchor>
            <arglist>(const QGeoManeuver &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoManeuver</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>dtor.QGeoManeuver</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoManeuver &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoManeuver &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoManeuver &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoManeuver &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QGeoCoordinate &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>position</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInstructionText</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>setInstructionText</anchor>
            <arglist>(const QString &amp;instructionText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>instructionText</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>instructionText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>setDirection</anchor>
            <arglist>(InstructionDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InstructionDirection</type>
            <name>direction</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeToNextInstruction</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>setTimeToNextInstruction</anchor>
            <arglist>(int secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeToNextInstruction</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>timeToNextInstruction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistanceToNextInstruction</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>setDistanceToNextInstruction</anchor>
            <arglist>(qreal distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distanceToNextInstruction</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>distanceToNextInstruction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWaypoint</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>setWaypoint</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>waypoint</name>
            <anchorfile>qgeomaneuver.html</anchorfile>
            <anchor>waypoint</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRoute</name>
        <filename>qgeoroute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRoute</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>QGeoRoute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRoute</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>QGeoRoute-2</anchor>
            <arglist>(const QGeoRoute &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRoute</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>dtor.QGeoRoute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRoute &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoRoute &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoRoute &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoRoute &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRouteId</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setRouteId</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>routeId</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>routeId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRequest</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setRequest</anchor>
            <arglist>(const QGeoRouteRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest</type>
            <name>request</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBounds</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setBounds</anchor>
            <arglist>(const QGeoRectangle &amp;bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRectangle</type>
            <name>bounds</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>bounds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstRouteSegment</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setFirstRouteSegment</anchor>
            <arglist>(const QGeoRouteSegment &amp;routeSegment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteSegment</type>
            <name>firstRouteSegment</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>firstRouteSegment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTravelTime</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setTravelTime</anchor>
            <arglist>(int secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>travelTime</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>travelTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistance</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setDistance</anchor>
            <arglist>(qreal distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distance</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTravelMode</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setTravelMode</anchor>
            <arglist>(QGeoRouteRequest::TravelMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::TravelMode</type>
            <name>travelMode</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>travelMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoCoordinate&gt;</type>
            <name>path</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRouteReply</name>
        <filename>qgeoroutereply.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EngineNotSetError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommunicationError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedOptionError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteReply</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>QGeoRouteReply</anchor>
            <arglist>(Error error, const QString &amp;errorString, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoRouteReply</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>dtor.QGeoRouteReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest</type>
            <name>request</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoRoute&gt;</type>
            <name>routes</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>routes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>abort</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QGeoRouteReply::Error error, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteReply</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>QGeoRouteReply-2</anchor>
            <arglist>(const QGeoRouteRequest &amp;request, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(Error error, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFinished</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>setFinished</anchor>
            <arglist>(bool finished)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRoutes</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>setRoutes</anchor>
            <arglist>(const QList&lt;QGeoRoute&gt; &amp;routes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addRoutes</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>addRoutes</anchor>
            <arglist>(const QList&lt;QGeoRoute&gt; &amp;routes)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRouteRequest</name>
        <filename>qgeorouterequest.html</filename>
        <member kind="enum">
            <name>TravelMode</name>
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CarTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PedestrianTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BicycleTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PublicTransitTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TruckTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::TravelMode">
            <name>TravelModes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FeatureType</name>
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TollFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighwayFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PublicTransitFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FerryFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TunnelFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtRoadFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParksFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MotorPoolLaneFeature">
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::FeatureType">
            <name>FeatureTypes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>FeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FeatureWeight</name>
            <anchor>FeatureWeight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NeutralFeatureWeight">
            <anchor>FeatureWeight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferFeatureWeight">
            <anchor>FeatureWeight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RequireFeatureWeight">
            <anchor>FeatureWeight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidFeatureWeight">
            <anchor>FeatureWeight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DisallowFeatureWeight">
            <anchor>FeatureWeight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::FeatureWeight">
            <name>FeatureWeights</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>FeatureWeight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RouteOptimization</name>
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShortestRoute">
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FastestRoute">
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MostEconomicRoute">
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MostScenicRoute">
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::RouteOptimization">
            <name>RouteOptimizations</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SegmentDetail</name>
            <anchor>SegmentDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSegmentData">
            <anchor>SegmentDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BasicSegmentData">
            <anchor>SegmentDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::SegmentDetail">
            <name>SegmentDetails</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>SegmentDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ManeuverDetail</name>
            <anchor>ManeuverDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoManeuvers">
            <anchor>ManeuverDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BasicManeuvers">
            <anchor>ManeuverDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::ManeuverDetail">
            <name>ManeuverDetails</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>ManeuverDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteRequest</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>QGeoRouteRequest</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;waypoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteRequest</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>QGeoRouteRequest-2</anchor>
            <arglist>(const QGeoCoordinate &amp;origin, const QGeoCoordinate &amp;destination)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteRequest</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>QGeoRouteRequest-3</anchor>
            <arglist>(const QGeoRouteRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRouteRequest</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>dtor.QGeoRouteRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoRouteRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoRouteRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoRouteRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWaypoints</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setWaypoints</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;waypoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoCoordinate&gt;</type>
            <name>waypoints</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>waypoints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExcludeAreas</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setExcludeAreas</anchor>
            <arglist>(const QList&lt;QGeoRectangle&gt; &amp;areas)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoRectangle&gt;</type>
            <name>excludeAreas</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>excludeAreas</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberAlternativeRoutes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setNumberAlternativeRoutes</anchor>
            <arglist>(int alternatives)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numberAlternativeRoutes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>numberAlternativeRoutes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTravelModes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setTravelModes</anchor>
            <arglist>(TravelModes travelModes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TravelModes</type>
            <name>travelModes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>travelModes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFeatureWeight</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setFeatureWeight</anchor>
            <arglist>(FeatureType featureType, FeatureWeight featureWeight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FeatureWeight</type>
            <name>featureWeight</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>featureWeight</anchor>
            <arglist>(FeatureType featureType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;FeatureType&gt;</type>
            <name>featureTypes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>featureTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRouteOptimization</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setRouteOptimization</anchor>
            <arglist>(RouteOptimizations optimization)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RouteOptimizations</type>
            <name>routeOptimization</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>routeOptimization</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSegmentDetail</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setSegmentDetail</anchor>
            <arglist>(SegmentDetail segmentDetail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SegmentDetail</type>
            <name>segmentDetail</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>segmentDetail</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManeuverDetail</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setManeuverDetail</anchor>
            <arglist>(ManeuverDetail maneuverDetail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ManeuverDetail</type>
            <name>maneuverDetail</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>maneuverDetail</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRouteSegment</name>
        <filename>qgeoroutesegment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteSegment</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>QGeoRouteSegment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteSegment</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>QGeoRouteSegment-2</anchor>
            <arglist>(const QGeoRouteSegment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRouteSegment</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>dtor.QGeoRouteSegment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteSegment &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoRouteSegment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoRouteSegment &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoRouteSegment &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNextRouteSegment</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setNextRouteSegment</anchor>
            <arglist>(const QGeoRouteSegment &amp;routeSegment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteSegment</type>
            <name>nextRouteSegment</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>nextRouteSegment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTravelTime</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setTravelTime</anchor>
            <arglist>(int secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>travelTime</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>travelTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistance</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setDistance</anchor>
            <arglist>(qreal distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distance</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoCoordinate&gt;</type>
            <name>path</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManeuver</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setManeuver</anchor>
            <arglist>(const QGeoManeuver &amp;maneuver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoManeuver</type>
            <name>maneuver</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>maneuver</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRoutingManager</name>
        <filename>qgeoroutingmanager.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRoutingManager</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>dtor.QGeoRoutingManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteReply *</type>
            <name>calculateRoute</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>calculateRoute</anchor>
            <arglist>(const QGeoRouteRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteReply *</type>
            <name>updateRoute</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>updateRoute</anchor>
            <arglist>(const QGeoRoute &amp;route, const QGeoCoordinate &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::TravelModes</type>
            <name>supportedTravelModes</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedTravelModes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::FeatureTypes</type>
            <name>supportedFeatureTypes</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedFeatureTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::FeatureWeights</type>
            <name>supportedFeatureWeights</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedFeatureWeights</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::RouteOptimizations</type>
            <name>supportedRouteOptimizations</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedRouteOptimizations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::SegmentDetails</type>
            <name>supportedSegmentDetails</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedSegmentDetails</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::ManeuverDetails</type>
            <name>supportedManeuverDetails</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedManeuverDetails</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMeasurementSystem</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>setMeasurementSystem</anchor>
            <arglist>(QLocale::MeasurementSystem system)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::MeasurementSystem</type>
            <name>measurementSystem</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>measurementSystem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QGeoRouteReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QGeoRouteReply *reply, QGeoRouteReply::Error error, QString errorString)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRoutingManagerEngine</name>
        <filename>qgeoroutingmanagerengine.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRoutingManagerEngine</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>QGeoRoutingManagerEngine</anchor>
            <arglist>(const QVariantMap &amp;parameters, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoRoutingManagerEngine</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>dtor.QGeoRoutingManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QGeoRouteReply *</type>
            <name>calculateRoute</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>calculateRoute</anchor>
            <arglist>(const QGeoRouteRequest &amp;request) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoRouteReply *</type>
            <name>updateRoute</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>updateRoute</anchor>
            <arglist>(const QGeoRoute &amp;route, const QGeoCoordinate &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::TravelModes</type>
            <name>supportedTravelModes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedTravelModes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::FeatureTypes</type>
            <name>supportedFeatureTypes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedFeatureTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::FeatureWeights</type>
            <name>supportedFeatureWeights</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedFeatureWeights</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::RouteOptimizations</type>
            <name>supportedRouteOptimizations</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedRouteOptimizations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::SegmentDetails</type>
            <name>supportedSegmentDetails</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedSegmentDetails</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::ManeuverDetails</type>
            <name>supportedManeuverDetails</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedManeuverDetails</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMeasurementSystem</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setMeasurementSystem</anchor>
            <arglist>(QLocale::MeasurementSystem system)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::MeasurementSystem</type>
            <name>measurementSystem</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>measurementSystem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QGeoRouteReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QGeoRouteReply *reply, QGeoRouteReply::Error error, QString errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedTravelModes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedTravelModes</anchor>
            <arglist>(QGeoRouteRequest::TravelModes travelModes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedFeatureTypes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedFeatureTypes</anchor>
            <arglist>(QGeoRouteRequest::FeatureTypes featureTypes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedFeatureWeights</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedFeatureWeights</anchor>
            <arglist>(QGeoRouteRequest::FeatureWeights featureWeights)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedRouteOptimizations</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedRouteOptimizations</anchor>
            <arglist>(QGeoRouteRequest::RouteOptimizations optimizations)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedSegmentDetails</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedSegmentDetails</anchor>
            <arglist>(QGeoRouteRequest::SegmentDetails segmentDetails)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedManeuverDetails</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedManeuverDetails</anchor>
            <arglist>(QGeoRouteRequest::ManeuverDetails maneuverDetails)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoServiceProvider</name>
        <filename>qgeoserviceprovider.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupportedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownParameterError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MissingRequiredParameterError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RoutingFeature</name>
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoRoutingFeatures">
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlineRoutingFeature">
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OfflineRoutingFeature">
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalizedRoutingFeature">
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RouteUpdatesFeature">
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlternativeRoutesFeature">
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExcludeAreasRoutingFeature">
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyRoutingFeatures">
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>GeocodingFeature</name>
            <anchor>GeocodingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoGeocodingFeatures">
            <anchor>GeocodingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlineGeocodingFeature">
            <anchor>GeocodingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OfflineGeocodingFeature">
            <anchor>GeocodingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReverseGeocodingFeature">
            <anchor>GeocodingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalizedGeocodingFeature">
            <anchor>GeocodingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyGeocodingFeatures">
            <anchor>GeocodingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MappingFeature</name>
            <anchor>MappingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoMappingFeatures">
            <anchor>MappingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlineMappingFeature">
            <anchor>MappingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OfflineMappingFeature">
            <anchor>MappingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalizedMappingFeature">
            <anchor>MappingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyMappingFeatures">
            <anchor>MappingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PlacesFeature</name>
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoPlacesFeatures">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnlinePlacesFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OfflinePlacesFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SavePlaceFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemovePlaceFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaveCategoryFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveCategoryFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlaceRecommendationsFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SearchSuggestionsFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalizedPlacesFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotificationsFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlaceMatchingFeature">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyPlacesFeatures">
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoServiceProvider::RoutingFeature">
            <name>RoutingFeatures</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>RoutingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoServiceProvider::GeocodingFeature">
            <name>GeocodingFeatures</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>GeocodingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoServiceProvider::MappingFeature">
            <name>MappingFeatures</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>MappingFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoServiceProvider::PlacesFeature">
            <name>PlacesFeatures</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>PlacesFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableServiceProviders</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>availableServiceProviders</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoServiceProvider</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>QGeoServiceProvider</anchor>
            <arglist>(const QString &amp;providerName, const QVariantMap &amp;parameters, bool allowExperimental)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoServiceProvider</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>dtor.QGeoServiceProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RoutingFeatures</type>
            <name>routingFeatures</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>routingFeatures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GeocodingFeatures</type>
            <name>geocodingFeatures</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>geocodingFeatures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MappingFeatures</type>
            <name>mappingFeatures</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>mappingFeatures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PlacesFeatures</type>
            <name>placesFeatures</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>placesFeatures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCodingManager *</type>
            <name>geocodingManager</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>geocodingManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRoutingManager *</type>
            <name>routingManager</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>routingManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceManager *</type>
            <name>placeManager</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>placeManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParameters</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>setParameters</anchor>
            <arglist>(const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllowExperimental</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>setAllowExperimental</anchor>
            <arglist>(bool allow)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoServiceProviderFactory</name>
        <filename>qgeoserviceproviderfactory.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoServiceProviderFactory</name>
            <anchorfile>qgeoserviceproviderfactory.html</anchorfile>
            <anchor>dtor.QGeoServiceProviderFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoCodingManagerEngine *</type>
            <name>createGeocodingManagerEngine</name>
            <anchorfile>qgeoserviceproviderfactory.html</anchorfile>
            <anchor>createGeocodingManagerEngine</anchor>
            <arglist>(const QVariantMap &amp;parameters, QGeoServiceProvider::Error *error, QString *errorString) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoRoutingManagerEngine *</type>
            <name>createRoutingManagerEngine</name>
            <anchorfile>qgeoserviceproviderfactory.html</anchorfile>
            <anchor>createRoutingManagerEngine</anchor>
            <arglist>(const QVariantMap &amp;parameters, QGeoServiceProvider::Error *error, QString *errorString) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceManagerEngine *</type>
            <name>createPlaceManagerEngine</name>
            <anchorfile>qgeoserviceproviderfactory.html</anchorfile>
            <anchor>createPlaceManagerEngine</anchor>
            <arglist>(const QVariantMap &amp;parameters, QGeoServiceProvider::Error *error, QString *errorString) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlace</name>
        <filename>qplace.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlace</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>QPlace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlace</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>QPlace-2</anchor>
            <arglist>(const QPlace &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlace</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>dtor.QPlace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlace &amp;</type>
            <name>operator=</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlace &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlace &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlace &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPlaceCategory&gt;</type>
            <name>categories</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>categories</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategory</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setCategory</anchor>
            <arglist>(const QPlaceCategory &amp;category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategories</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setCategories</anchor>
            <arglist>(const QList&lt;QPlaceCategory&gt; &amp;categories)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoLocation</type>
            <name>location</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>location</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocation</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setLocation</anchor>
            <arglist>(const QGeoLocation &amp;location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceRatings</type>
            <name>ratings</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>ratings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRatings</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setRatings</anchor>
            <arglist>(const QPlaceRatings &amp;rating)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSupplier</type>
            <name>supplier</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>supplier</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSupplier</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setSupplier</anchor>
            <arglist>(const QPlaceSupplier &amp;supplier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>attribution</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>attribution</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribution</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setAttribution</anchor>
            <arglist>(const QString &amp;attribution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIcon</type>
            <name>icon</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QPlaceIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContent::Collection</type>
            <name>content</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>content</anchor>
            <arglist>(QPlaceContent::Type type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContent</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setContent</anchor>
            <arglist>(QPlaceContent::Type type, const QPlaceContent::Collection &amp;content)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertContent</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>insertContent</anchor>
            <arglist>(QPlaceContent::Type type, const QPlaceContent::Collection &amp;content)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>totalContentCount</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>totalContentCount</anchor>
            <arglist>(QPlaceContent::Type type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTotalContentCount</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setTotalContentCount</anchor>
            <arglist>(QPlaceContent::Type type, int totalCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>placeId</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>placeId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaceId</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setPlaceId</anchor>
            <arglist>(const QString &amp;identifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>primaryPhone</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>primaryPhone</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>primaryFax</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>primaryFax</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>primaryEmail</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>primaryEmail</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>primaryWebsite</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>primaryWebsite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>detailsFetched</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>detailsFetched</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailsFetched</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setDetailsFetched</anchor>
            <arglist>(bool fetched)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>extendedAttributeTypes</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>extendedAttributeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceAttribute</type>
            <name>extendedAttribute</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>extendedAttribute</anchor>
            <arglist>(const QString &amp;attributeType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtendedAttribute</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setExtendedAttribute</anchor>
            <arglist>(const QString &amp;attributeType, const QPlaceAttribute &amp;attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeExtendedAttribute</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>removeExtendedAttribute</anchor>
            <arglist>(const QString &amp;attributeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>contactTypes</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>contactTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPlaceContactDetail&gt;</type>
            <name>contactDetails</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>contactDetails</anchor>
            <arglist>(const QString &amp;contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContactDetails</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setContactDetails</anchor>
            <arglist>(const QString &amp;contactType, QList&lt;QPlaceContactDetail&gt; details)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendContactDetail</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>appendContactDetail</anchor>
            <arglist>(const QString &amp;contactType, const QPlaceContactDetail &amp;detail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeContactDetails</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>removeContactDetails</anchor>
            <arglist>(const QString &amp;contactType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocation::Visibility</type>
            <name>visibility</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>visibility</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisibility</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>setVisibility</anchor>
            <arglist>(QLocation::Visibility visibility)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qplace.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceAttribute</name>
        <filename>qplaceattribute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceAttribute</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>QPlaceAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceAttribute</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>QPlaceAttribute-2</anchor>
            <arglist>(const QPlaceAttribute &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceAttribute</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>dtor.QPlaceAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceAttribute &amp;</type>
            <name>operator=</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceAttribute &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceAttribute &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceAttribute &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>label</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>label</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLabel</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>setLabel</anchor>
            <arglist>(const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qplaceattribute.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceCategory</name>
        <filename>qplacecategory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceCategory</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>QPlaceCategory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceCategory</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>QPlaceCategory-2</anchor>
            <arglist>(const QPlaceCategory &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceCategory</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>dtor.QPlaceCategory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceCategory &amp;</type>
            <name>operator=</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceCategory &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceCategory &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceCategory &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>categoryId</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>categoryId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategoryId</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>setCategoryId</anchor>
            <arglist>(const QString &amp;identifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocation::Visibility</type>
            <name>visibility</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>visibility</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisibility</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>setVisibility</anchor>
            <arglist>(QLocation::Visibility visibility)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIcon</type>
            <name>icon</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QPlaceIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qplacecategory.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceContactDetail</name>
        <filename>qplacecontactdetail.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceContactDetail</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>QPlaceContactDetail</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceContactDetail</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>QPlaceContactDetail-2</anchor>
            <arglist>(const QPlaceContactDetail &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceContactDetail</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>dtor.QPlaceContactDetail</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContactDetail &amp;</type>
            <name>operator=</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceContactDetail &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceContactDetail &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceContactDetail &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>label</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>label</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLabel</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>setLabel</anchor>
            <arglist>(const QString &amp;label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qplacecontactdetail.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceContent</name>
        <filename>qplacecontent.html</filename>
        <member kind="typedef" type="">
            <name>Collection</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>Collection-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReviewType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EditorialType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceContent</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>QPlaceContent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceContent</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>QPlaceContent-2</anchor>
            <arglist>(const QPlaceContent &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceContent</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>dtor.QPlaceContent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContent &amp;</type>
            <name>operator=</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceContent &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceContent &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceContent &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContent::Type</type>
            <name>type</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSupplier</type>
            <name>supplier</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>supplier</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSupplier</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>setSupplier</anchor>
            <arglist>(const QPlaceSupplier &amp;supplier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceUser</type>
            <name>user</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>user</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUser</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>setUser</anchor>
            <arglist>(const QPlaceUser &amp;user)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>attribution</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>attribution</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribution</name>
            <anchorfile>qplacecontent.html</anchorfile>
            <anchor>setAttribution</anchor>
            <arglist>(const QString &amp;attribution)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceContentReply</name>
        <filename>qplacecontentreply.html</filename>
        <base>QPlaceReply</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceContentReply</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>QPlaceContentReply</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceContentReply</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>dtor.QPlaceContentReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceReply::Type</type>
            <name>type</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContent::Collection</type>
            <name>content</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>content</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>totalCount</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>totalCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContentRequest</type>
            <name>request</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContentRequest</type>
            <name>previousPageRequest</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>previousPageRequest</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContentRequest</type>
            <name>nextPageRequest</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>nextPageRequest</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setContent</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>setContent</anchor>
            <arglist>(const QPlaceContent::Collection &amp;content)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setTotalCount</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>setTotalCount</anchor>
            <arglist>(int total)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRequest</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>setRequest</anchor>
            <arglist>(const QPlaceContentRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPreviousPageRequest</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>setPreviousPageRequest</anchor>
            <arglist>(const QPlaceContentRequest &amp;previous)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setNextPageRequest</name>
            <anchorfile>qplacecontentreply.html</anchorfile>
            <anchor>setNextPageRequest</anchor>
            <arglist>(const QPlaceContentRequest &amp;next)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceContentRequest</name>
        <filename>qplacecontentrequest.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceContentRequest</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>QPlaceContentRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceContentRequest</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>QPlaceContentRequest-2</anchor>
            <arglist>(const QPlaceContentRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceContentRequest</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>dtor.QPlaceContentRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContentRequest &amp;</type>
            <name>operator=</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceContentRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceContentRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceContentRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContent::Type</type>
            <name>contentType</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>contentType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentType</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>setContentType</anchor>
            <arglist>(QPlaceContent::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>placeId</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>placeId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaceId</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>setPlaceId</anchor>
            <arglist>(const QString &amp;identifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>contentContext</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>contentContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentContext</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>setContentContext</anchor>
            <arglist>(const QVariant &amp;context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>limit</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>limit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLimit</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>setLimit</anchor>
            <arglist>(int limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qplacecontentrequest.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceDetailsReply</name>
        <filename>qplacedetailsreply.html</filename>
        <base>QPlaceReply</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceDetailsReply</name>
            <anchorfile>qplacedetailsreply.html</anchorfile>
            <anchor>QPlaceDetailsReply</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceDetailsReply</name>
            <anchorfile>qplacedetailsreply.html</anchorfile>
            <anchor>dtor.QPlaceDetailsReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceReply::Type</type>
            <name>type</name>
            <anchorfile>qplacedetailsreply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlace</type>
            <name>place</name>
            <anchorfile>qplacedetailsreply.html</anchorfile>
            <anchor>place</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPlace</name>
            <anchorfile>qplacedetailsreply.html</anchorfile>
            <anchor>setPlace</anchor>
            <arglist>(const QPlace &amp;place)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceEditorial</name>
        <filename>qplaceeditorial.html</filename>
        <base>QPlaceContent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceEditorial</name>
            <anchorfile>qplaceeditorial.html</anchorfile>
            <anchor>QPlaceEditorial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceEditorial</name>
            <anchorfile>qplaceeditorial.html</anchorfile>
            <anchor>QPlaceEditorial-2</anchor>
            <arglist>(const QPlaceContent &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qplaceeditorial.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qplaceeditorial.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qplaceeditorial.html</anchorfile>
            <anchor>title</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qplaceeditorial.html</anchorfile>
            <anchor>setTitle</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>language</name>
            <anchorfile>qplaceeditorial.html</anchorfile>
            <anchor>language</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLanguage</name>
            <anchorfile>qplaceeditorial.html</anchorfile>
            <anchor>setLanguage</anchor>
            <arglist>(const QString &amp;language)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceIcon</name>
        <filename>qplaceicon.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceIcon</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>QPlaceIcon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceIcon</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>QPlaceIcon-2</anchor>
            <arglist>(const QPlaceIcon &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceIcon</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>dtor.QPlaceIcon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIcon &amp;</type>
            <name>operator=</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceIcon &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceIcon &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceIcon &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>url</anchor>
            <arglist>(const QSize &amp;size) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceManager *</type>
            <name>manager</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>manager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManager</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>setManager</anchor>
            <arglist>(QPlaceManager *manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>parameters</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParameters</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>setParameters</anchor>
            <arglist>(const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qplaceicon.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceIdReply</name>
        <filename>qplaceidreply.html</filename>
        <base>QPlaceReply</base>
        <member kind="enum">
            <name>OperationType</name>
            <anchor>OperationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SavePlace">
            <anchor>OperationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaveCategory">
            <anchor>OperationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemovePlace">
            <anchor>OperationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveCategory">
            <anchor>OperationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceIdReply</name>
            <anchorfile>qplaceidreply.html</anchorfile>
            <anchor>QPlaceIdReply</anchor>
            <arglist>(OperationType operationType, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceIdReply</name>
            <anchorfile>qplaceidreply.html</anchorfile>
            <anchor>dtor.QPlaceIdReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceReply::Type</type>
            <name>type</name>
            <anchorfile>qplaceidreply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OperationType</type>
            <name>operationType</name>
            <anchorfile>qplaceidreply.html</anchorfile>
            <anchor>operationType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>id</name>
            <anchorfile>qplaceidreply.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setId</name>
            <anchorfile>qplaceidreply.html</anchorfile>
            <anchor>setId</anchor>
            <arglist>(const QString &amp;identifier)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceImage</name>
        <filename>qplaceimage.html</filename>
        <base>QPlaceContent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceImage</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>QPlaceImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceImage</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>QPlaceImage-2</anchor>
            <arglist>(const QPlaceContent &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceImage</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>dtor.QPlaceImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>imageId</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>imageId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImageId</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>setImageId</anchor>
            <arglist>(const QString &amp;identifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>mimeType</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>mimeType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMimeType</name>
            <anchorfile>qplaceimage.html</anchorfile>
            <anchor>setMimeType</anchor>
            <arglist>(const QString &amp;type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceManager</name>
        <filename>qplacemanager.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceManager</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>dtor.QPlaceManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceDetailsReply *</type>
            <name>getPlaceDetails</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>getPlaceDetails</anchor>
            <arglist>(const QString &amp;placeId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceContentReply *</type>
            <name>getPlaceContent</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>getPlaceContent</anchor>
            <arglist>(const QPlaceContentRequest &amp;request) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSearchReply *</type>
            <name>search</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>search</anchor>
            <arglist>(const QPlaceSearchRequest &amp;request) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSearchSuggestionReply *</type>
            <name>searchSuggestions</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>searchSuggestions</anchor>
            <arglist>(const QPlaceSearchRequest &amp;request) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIdReply *</type>
            <name>savePlace</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>savePlace</anchor>
            <arglist>(const QPlace &amp;place)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIdReply *</type>
            <name>removePlace</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>removePlace</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIdReply *</type>
            <name>saveCategory</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>saveCategory</anchor>
            <arglist>(const QPlaceCategory &amp;category, const QString &amp;parentId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIdReply *</type>
            <name>removeCategory</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>removeCategory</anchor>
            <arglist>(const QString &amp;categoryId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceReply *</type>
            <name>initializeCategories</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>initializeCategories</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>parentCategoryId</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>parentCategoryId</anchor>
            <arglist>(const QString &amp;categoryId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>childCategoryIds</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>childCategoryIds</anchor>
            <arglist>(const QString &amp;parentId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceCategory</type>
            <name>category</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>category</anchor>
            <arglist>(const QString &amp;categoryId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPlaceCategory&gt;</type>
            <name>childCategories</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>childCategories</anchor>
            <arglist>(const QString &amp;parentId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLocale&gt;</type>
            <name>locales</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>locales</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocales</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>setLocales</anchor>
            <arglist>(const QList&lt;QLocale&gt; &amp;locales)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlace</type>
            <name>compatiblePlace</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>compatiblePlace</anchor>
            <arglist>(const QPlace &amp;original)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceMatchReply *</type>
            <name>matchingPlaces</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>matchingPlaces</anchor>
            <arglist>(const QPlaceMatchRequest &amp;request) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QPlaceReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QPlaceReply *reply, QPlaceReply::Error error, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>placeAdded</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>placeAdded</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>placeUpdated</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>placeUpdated</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>placeRemoved</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>placeRemoved</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoryAdded</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>categoryAdded</anchor>
            <arglist>(const QPlaceCategory &amp;category, const QString &amp;parentId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoryUpdated</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>categoryUpdated</anchor>
            <arglist>(const QPlaceCategory &amp;category, const QString &amp;parentId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoryRemoved</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>categoryRemoved</anchor>
            <arglist>(const QString &amp;categoryId, const QString &amp;parentId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qplacemanager.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceManagerEngine</name>
        <filename>qplacemanagerengine.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceManagerEngine</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>QPlaceManagerEngine</anchor>
            <arglist>(const QVariantMap &amp;parameters, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceManagerEngine</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>dtor.QPlaceManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceDetailsReply *</type>
            <name>getPlaceDetails</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>getPlaceDetails</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceContentReply *</type>
            <name>getPlaceContent</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>getPlaceContent</anchor>
            <arglist>(const QPlaceContentRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceSearchReply *</type>
            <name>search</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>search</anchor>
            <arglist>(const QPlaceSearchRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceSearchSuggestionReply *</type>
            <name>searchSuggestions</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>searchSuggestions</anchor>
            <arglist>(const QPlaceSearchRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceIdReply *</type>
            <name>savePlace</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>savePlace</anchor>
            <arglist>(const QPlace &amp;place)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceIdReply *</type>
            <name>removePlace</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>removePlace</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceIdReply *</type>
            <name>saveCategory</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>saveCategory</anchor>
            <arglist>(const QPlaceCategory &amp;category, const QString &amp;parentId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceIdReply *</type>
            <name>removeCategory</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>removeCategory</anchor>
            <arglist>(const QString &amp;categoryId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceReply *</type>
            <name>initializeCategories</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>initializeCategories</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>parentCategoryId</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>parentCategoryId</anchor>
            <arglist>(const QString &amp;categoryId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>childCategoryIds</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>childCategoryIds</anchor>
            <arglist>(const QString &amp;categoryId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceCategory</type>
            <name>category</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>category</anchor>
            <arglist>(const QString &amp;categoryId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QPlaceCategory&gt;</type>
            <name>childCategories</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>childCategories</anchor>
            <arglist>(const QString &amp;parentId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QLocale&gt;</type>
            <name>locales</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>locales</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setLocales</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>setLocales</anchor>
            <arglist>(const QList&lt;QLocale&gt; &amp;locales)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QUrl</type>
            <name>constructIconUrl</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>constructIconUrl</anchor>
            <arglist>(const QPlaceIcon &amp;icon, const QSize &amp;size) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlace</type>
            <name>compatiblePlace</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>compatiblePlace</anchor>
            <arglist>(const QPlace &amp;original) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceMatchReply *</type>
            <name>matchingPlaces</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>matchingPlaces</anchor>
            <arglist>(const QPlaceMatchRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QPlaceReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QPlaceReply *reply, QPlaceReply::Error error, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>placeAdded</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>placeAdded</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>placeUpdated</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>placeUpdated</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>placeRemoved</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>placeRemoved</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoryAdded</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>categoryAdded</anchor>
            <arglist>(const QPlaceCategory &amp;category, const QString &amp;parentId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoryUpdated</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>categoryUpdated</anchor>
            <arglist>(const QPlaceCategory &amp;category, const QString &amp;parentId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoryRemoved</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>categoryRemoved</anchor>
            <arglist>(const QString &amp;categoryId, const QString &amp;parentId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QPlaceManager *</type>
            <name>manager</name>
            <anchorfile>qplacemanagerengine.html</anchorfile>
            <anchor>manager</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceMatchReply</name>
        <filename>qplacematchreply.html</filename>
        <base>QPlaceReply</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceMatchReply</name>
            <anchorfile>qplacematchreply.html</anchorfile>
            <anchor>QPlaceMatchReply</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceMatchReply</name>
            <anchorfile>qplacematchreply.html</anchorfile>
            <anchor>dtor.QPlaceMatchReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceReply::Type</type>
            <name>type</name>
            <anchorfile>qplacematchreply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPlace&gt;</type>
            <name>places</name>
            <anchorfile>qplacematchreply.html</anchorfile>
            <anchor>places</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceMatchRequest</type>
            <name>request</name>
            <anchorfile>qplacematchreply.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaces</name>
            <anchorfile>qplacematchreply.html</anchorfile>
            <anchor>setPlaces</anchor>
            <arglist>(const QList&lt;QPlace&gt; &amp;places)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRequest</name>
            <anchorfile>qplacematchreply.html</anchorfile>
            <anchor>setRequest</anchor>
            <arglist>(const QPlaceMatchRequest &amp;request)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceMatchRequest</name>
        <filename>qplacematchrequest.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceMatchRequest</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>QPlaceMatchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceMatchRequest</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>QPlaceMatchRequest-2</anchor>
            <arglist>(const QPlaceMatchRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceMatchRequest &amp;</type>
            <name>operator=</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceMatchRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceMatchRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceMatchRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceMatchRequest</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>dtor.QPlaceMatchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPlace&gt;</type>
            <name>places</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>places</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaces</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>setPlaces</anchor>
            <arglist>(const QList&lt;QPlace&gt; places)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResults</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>setResults</anchor>
            <arglist>(const QList&lt;QPlaceSearchResult&gt; &amp;results)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>parameters</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParameters</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>setParameters</anchor>
            <arglist>(const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qplacematchrequest.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceProposedSearchResult</name>
        <filename>qplaceproposedsearchresult.html</filename>
        <base>QPlaceSearchResult</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceProposedSearchResult</name>
            <anchorfile>qplaceproposedsearchresult.html</anchorfile>
            <anchor>QPlaceProposedSearchResult</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceProposedSearchResult</name>
            <anchorfile>qplaceproposedsearchresult.html</anchorfile>
            <anchor>QPlaceProposedSearchResult-2</anchor>
            <arglist>(const QPlaceSearchRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceProposedSearchResult</name>
            <anchorfile>qplaceproposedsearchresult.html</anchorfile>
            <anchor>dtor.QPlaceProposedSearchResult</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSearchRequest</type>
            <name>searchRequest</name>
            <anchorfile>qplaceproposedsearchresult.html</anchorfile>
            <anchor>searchRequest</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSearchRequest</name>
            <anchorfile>qplaceproposedsearchresult.html</anchorfile>
            <anchor>setSearchRequest</anchor>
            <arglist>(const QPlaceSearchRequest &amp;request)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceRatings</name>
        <filename>qplaceratings.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceRatings</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>QPlaceRatings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceRatings</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>QPlaceRatings-2</anchor>
            <arglist>(const QPlaceRatings &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceRatings</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>dtor.QPlaceRatings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceRatings &amp;</type>
            <name>operator=</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceRatings &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceRatings &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceRatings &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>average</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>average</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAverage</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>setAverage</anchor>
            <arglist>(qreal average)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCount</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>setCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximum</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>maximum</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximum</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>setMaximum</anchor>
            <arglist>(qreal max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qplaceratings.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceReply</name>
        <filename>qplacereply.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlaceDoesNotExistError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CategoryDoesNotExistError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommunicationError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionsError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BadArgumentError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CancelError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reply">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailsReply">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SearchReply">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SearchSuggestionReply">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentReply">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IdReply">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchReply">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceReply</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>QPlaceReply</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceReply</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>dtor.QPlaceReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Type</type>
            <name>type</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceReply::Error</type>
            <name>error</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>abort</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QPlaceReply::Error error, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFinished</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>setFinished</anchor>
            <arglist>(bool finished)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qplacereply.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(QPlaceReply::Error error, const QString &amp;errorString)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceResult</name>
        <filename>qplaceresult.html</filename>
        <base>QPlaceSearchResult</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceResult</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>QPlaceResult</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceResult</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>QPlaceResult-2</anchor>
            <arglist>(const QPlaceSearchResult &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceResult</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>dtor.QPlaceResult</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distance</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistance</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>setDistance</anchor>
            <arglist>(qreal distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlace</type>
            <name>place</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>place</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlace</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>setPlace</anchor>
            <arglist>(const QPlace &amp;place)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSponsored</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>isSponsored</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSponsored</name>
            <anchorfile>qplaceresult.html</anchorfile>
            <anchor>setSponsored</anchor>
            <arglist>(bool sponsored)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceReview</name>
        <filename>qplacereview.html</filename>
        <base>QPlaceContent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceReview</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>QPlaceReview</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceReview</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>QPlaceReview-2</anchor>
            <arglist>(const QPlaceContent &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceReview</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>dtor.QPlaceReview</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>dateTime</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>dateTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDateTime</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>setDateTime</anchor>
            <arglist>(const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>language</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>language</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLanguage</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>setLanguage</anchor>
            <arglist>(const QString &amp;language)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rating</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>rating</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRating</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>setRating</anchor>
            <arglist>(qreal rating)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>reviewId</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>reviewId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReviewId</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>setReviewId</anchor>
            <arglist>(const QString &amp;identifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>title</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qplacereview.html</anchorfile>
            <anchor>setTitle</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceSearchReply</name>
        <filename>qplacesearchreply.html</filename>
        <base>QPlaceReply</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceSearchReply</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>QPlaceSearchReply</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceSearchReply</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>dtor.QPlaceSearchReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlaceReply::Type</type>
            <name>type</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPlaceSearchResult&gt;</type>
            <name>results</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>results</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSearchRequest</type>
            <name>request</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSearchRequest</type>
            <name>previousPageRequest</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>previousPageRequest</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSearchRequest</type>
            <name>nextPageRequest</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>nextPageRequest</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setResults</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>setResults</anchor>
            <arglist>(const QList&lt;QPlaceSearchResult&gt; &amp;results)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRequest</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>setRequest</anchor>
            <arglist>(const QPlaceSearchRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPreviousPageRequest</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>setPreviousPageRequest</anchor>
            <arglist>(const QPlaceSearchRequest &amp;previous)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setNextPageRequest</name>
            <anchorfile>qplacesearchreply.html</anchorfile>
            <anchor>setNextPageRequest</anchor>
            <arglist>(const QPlaceSearchRequest &amp;next)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceSearchRequest</name>
        <filename>qplacesearchrequest.html</filename>
        <member kind="enum">
            <name>RelevanceHint</name>
            <anchor>RelevanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnspecifiedHint">
            <anchor>RelevanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DistanceHint">
            <anchor>RelevanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LexicalPlaceNameHint">
            <anchor>RelevanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceSearchRequest</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>QPlaceSearchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceSearchRequest</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>QPlaceSearchRequest-2</anchor>
            <arglist>(const QPlaceSearchRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSearchRequest &amp;</type>
            <name>operator=</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceSearchRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceSearchRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceSearchRequest &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceSearchRequest</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>dtor.QPlaceSearchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>searchTerm</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>searchTerm</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSearchTerm</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setSearchTerm</anchor>
            <arglist>(const QString &amp;term)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPlaceCategory&gt;</type>
            <name>categories</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>categories</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategory</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setCategory</anchor>
            <arglist>(const QPlaceCategory &amp;category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategories</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setCategories</anchor>
            <arglist>(const QList&lt;QPlaceCategory&gt; &amp;categories)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoShape</type>
            <name>searchArea</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>searchArea</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSearchArea</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setSearchArea</anchor>
            <arglist>(const QGeoShape &amp;area)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>recommendationId</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>recommendationId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRecommendationId</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setRecommendationId</anchor>
            <arglist>(const QString &amp;placeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>searchContext</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>searchContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSearchContext</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setSearchContext</anchor>
            <arglist>(const QVariant &amp;context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocation::VisibilityScope</type>
            <name>visibilityScope</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>visibilityScope</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisibilityScope</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setVisibilityScope</anchor>
            <arglist>(QLocation::VisibilityScope scope)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RelevanceHint</type>
            <name>relevanceHint</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>relevanceHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelevanceHint</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setRelevanceHint</anchor>
            <arglist>(RelevanceHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>limit</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>limit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLimit</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>setLimit</anchor>
            <arglist>(int limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qplacesearchrequest.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceSearchResult</name>
        <filename>qplacesearchresult.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceSearchResult</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>QPlaceSearchResult</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceSearchResult</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>QPlaceSearchResult-2</anchor>
            <arglist>(const QPlaceSearchResult &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPlaceSearchResult</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>dtor.QPlaceSearchResult</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSearchResult &amp;</type>
            <name>operator=</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceSearchResult &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceSearchResult &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceSearchResult &amp;other) const</arglist>
        </member>
        <member kind="enum">
            <name>SearchResultType</name>
            <anchor>SearchResultType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownSearchResult">
            <anchor>SearchResultType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlaceResult">
            <anchor>SearchResultType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProposedSearchResult">
            <anchor>SearchResultType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SearchResultType</type>
            <name>type</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>title</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>setTitle</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIcon</type>
            <name>icon</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qplacesearchresult.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QPlaceIcon &amp;icon)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceSearchSuggestionReply</name>
        <filename>qplacesearchsuggestionreply.html</filename>
        <base>QPlaceReply</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceSearchSuggestionReply</name>
            <anchorfile>qplacesearchsuggestionreply.html</anchorfile>
            <anchor>QPlaceSearchSuggestionReply</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceSearchSuggestionReply</name>
            <anchorfile>qplacesearchsuggestionreply.html</anchorfile>
            <anchor>dtor.QPlaceSearchSuggestionReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>suggestions</name>
            <anchorfile>qplacesearchsuggestionreply.html</anchorfile>
            <anchor>suggestions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Type</type>
            <name>type</name>
            <anchorfile>qplacesearchsuggestionreply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSuggestions</name>
            <anchorfile>qplacesearchsuggestionreply.html</anchorfile>
            <anchor>setSuggestions</anchor>
            <arglist>(const QStringList &amp;suggestions)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceSupplier</name>
        <filename>qplacesupplier.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceSupplier</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>QPlaceSupplier</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceSupplier</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>QPlaceSupplier-2</anchor>
            <arglist>(const QPlaceSupplier &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceSupplier</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>dtor.QPlaceSupplier</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceSupplier &amp;</type>
            <name>operator=</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceSupplier &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceSupplier &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceSupplier &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>supplierId</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>supplierId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSupplierId</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>setSupplierId</anchor>
            <arglist>(const QString &amp;identifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceIcon</type>
            <name>icon</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QPlaceIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qplacesupplier.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlaceUser</name>
        <filename>qplaceuser.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceUser</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>QPlaceUser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaceUser</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>QPlaceUser-2</anchor>
            <arglist>(const QPlaceUser &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPlaceUser</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>dtor.QPlaceUser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlaceUser &amp;</type>
            <name>operator=</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPlaceUser &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPlaceUser &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPlaceUser &amp;other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>userId</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>userId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserId</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>setUserId</anchor>
            <arglist>(const QString &amp;identifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qplaceuser.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QLocation</name>
        <filename>qlocation.html</filename>
        <member kind="enum">
            <name>Visibility</name>
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnspecifiedVisibility">
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceVisibility">
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrivateVisibility">
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PublicVisibility">
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QLocation::Visibility">
            <name>VisibilityScope</name>
            <anchorfile>qlocation.html</anchorfile>
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtLocation.Category</name>
        <filename>qml-qtlocation-category.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.ContactDetails</name>
        <filename>qml-qtlocation-contactdetails.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.ContactDetail</name>
        <filename>qml-qtlocation-contactdetail.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.Place</name>
        <filename>qml-qtlocation-place.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.ExtendedAttributes</name>
        <filename>qml-qtlocation-extendedattributes.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.PlaceAttribute</name>
        <filename>qml-qtlocation-placeattribute.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.EditorialModel</name>
        <filename>qml-qtlocation-editorialmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.Icon</name>
        <filename>qml-qtlocation-icon.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.ImageModel</name>
        <filename>qml-qtlocation-imagemodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.User</name>
        <filename>qml-qtlocation-user.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.Ratings</name>
        <filename>qml-qtlocation-ratings.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.ReviewModel</name>
        <filename>qml-qtlocation-reviewmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.PlaceSearchModel</name>
        <filename>qml-qtlocation-placesearchmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.PlaceSearchSuggestionModel</name>
        <filename>qml-qtlocation-placesearchsuggestionmodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.Supplier</name>
        <filename>qml-qtlocation-supplier.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.CategoryModel</name>
        <filename>qml-qtlocation-categorymodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapCircle</name>
        <filename>qml-qtlocation-mapcircle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.GeocodeModel</name>
        <filename>qml-qtlocation-geocodemodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.RouteManeuver</name>
        <filename>qml-qtlocation-routemaneuver.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.Map</name>
        <filename>qml-qtlocation-map.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapPinchEvent</name>
        <filename>qml-qtlocation-mappinchevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapGestureArea</name>
        <filename>qml-qtlocation-mapgesturearea.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapItemView</name>
        <filename>qml-qtlocation-mapitemview.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapQuickItem</name>
        <filename>qml-qtlocation-mapquickitem.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapType</name>
        <filename>qml-qtlocation-maptype.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.Route</name>
        <filename>qml-qtlocation-route.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.RouteModel</name>
        <filename>qml-qtlocation-routemodel.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.RouteQuery</name>
        <filename>qml-qtlocation-routequery.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.RouteSegment</name>
        <filename>qml-qtlocation-routesegment.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.Plugin</name>
        <filename>qml-qtlocation-plugin.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.PluginParameter</name>
        <filename>qml-qtlocation-pluginparameter.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapPolygon</name>
        <filename>qml-qtlocation-mappolygon.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapPolyline</name>
        <filename>qml-qtlocation-mappolyline.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapRectangle</name>
        <filename>qml-qtlocation-maprectangle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtLocation.MapRoute</name>
        <filename>qml-qtlocation-maproute.html</filename>
    </compound>
</tagfile>
