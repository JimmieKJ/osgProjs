<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QMaskGenerator</name>
        <filename>qmaskgenerator.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMaskGenerator</name>
            <anchorfile>qmaskgenerator.html</anchorfile>
            <anchor>QMaskGenerator</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMaskGenerator</name>
            <anchorfile>qmaskgenerator.html</anchorfile>
            <anchor>dtor.QMaskGenerator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>seed</name>
            <anchorfile>qmaskgenerator.html</anchorfile>
            <anchor>seed</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual quint32</type>
            <name>nextMask</name>
            <anchorfile>qmaskgenerator.html</anchorfile>
            <anchor>nextMask</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWebSocket</name>
        <filename>qwebsocket.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWebSocket</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>QWebSocket</anchor>
            <arglist>(const QString &amp;origin, QWebSocketProtocol::Version version, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QWebSocket</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>dtor.QWebSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketError</type>
            <name>error</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>localAddress</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>localAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>localPort</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>localPort</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::PauseModes</type>
            <name>pauseMode</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>pauseMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>peerAddress</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>peerAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerName</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>peerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>peerPort</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>peerPort</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy</type>
            <name>proxy</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxy</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>setProxy</anchor>
            <arglist>(const QNetworkProxy &amp;networkProxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaskGenerator</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>setMaskGenerator</anchor>
            <arglist>(const QMaskGenerator *maskGenerator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMaskGenerator *</type>
            <name>maskGenerator</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>maskGenerator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readBufferSize</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>readBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPauseMode</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>setPauseMode</anchor>
            <arglist>(QAbstractSocket::PauseModes pauseMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketState</type>
            <name>state</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWebSocketProtocol::Version</type>
            <name>version</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>resourceName</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>resourceName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>requestUrl</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>requestUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>origin</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>origin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWebSocketProtocol::CloseCode</type>
            <name>closeCode</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>closeCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>closeReason</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>closeReason</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>sendTextMessage</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>sendTextMessage</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>sendBinaryMessage</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>sendBinaryMessage</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>ignoreSslErrors-2</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslConfiguration</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>setSslConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;sslConfiguration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>sslConfiguration</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>sslConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>close</anchor>
            <arglist>(QWebSocketProtocol::CloseCode closeCode, const QString &amp;reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ping</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>ping</anchor>
            <arglist>(const QByteArray &amp;payload)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>ignoreSslErrors</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToClose</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>aboutToClose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connected</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>connected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnected</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>disconnected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QAbstractSocket::SocketState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>proxyAuthenticationRequired</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>proxyAuthenticationRequired</anchor>
            <arglist>(const QNetworkProxy &amp;proxy, QAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readChannelFinished</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>readChannelFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textFrameReceived</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>textFrameReceived</anchor>
            <arglist>(const QString &amp;frame, bool isLastFrame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>binaryFrameReceived</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>binaryFrameReceived</anchor>
            <arglist>(const QByteArray &amp;frame, bool isLastFrame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textMessageReceived</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>textMessageReceived</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>binaryMessageReceived</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>binaryMessageReceived</anchor>
            <arglist>(const QByteArray &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QAbstractSocket::SocketError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pong</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>pong</anchor>
            <arglist>(quint64 elapsedTime, const QByteArray &amp;payload)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bytesWritten</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>bytesWritten</anchor>
            <arglist>(qint64 bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sslErrors</name>
            <anchorfile>qwebsocket.html</anchorfile>
            <anchor>sslErrors</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWebSocketCorsAuthenticator</name>
        <filename>qwebsocketcorsauthenticator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWebSocketCorsAuthenticator</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>QWebSocketCorsAuthenticator</anchor>
            <arglist>(const QString &amp;origin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWebSocketCorsAuthenticator</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>dtor.QWebSocketCorsAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWebSocketCorsAuthenticator</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>QWebSocketCorsAuthenticator-2</anchor>
            <arglist>(const QWebSocketCorsAuthenticator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWebSocketCorsAuthenticator</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>QWebSocketCorsAuthenticator-3</anchor>
            <arglist>(QWebSocketCorsAuthenticator &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWebSocketCorsAuthenticator &amp;</type>
            <name>operator=</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QWebSocketCorsAuthenticator &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QWebSocketCorsAuthenticator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWebSocketCorsAuthenticator &amp;</type>
            <name>operator=</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QWebSocketCorsAuthenticator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>origin</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>origin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllowed</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>setAllowed</anchor>
            <arglist>(bool allowed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>allowed</name>
            <anchorfile>qwebsocketcorsauthenticator.html</anchorfile>
            <anchor>allowed</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QWebSocketProtocol</name>
        <filename>qwebsocketprotocol.html</filename>
        <member kind="enum">
            <name>Version</name>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VersionUnknown">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version0">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version4">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version5">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version6">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version7">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version8">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Version13">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VersionLatest">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CloseCode</name>
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeNormal">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeGoingAway">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeProtocolError">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeDatatypeNotSupported">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeReserved1004">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeMissingStatusCode">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeAbnormalDisconnection">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeWrongDatatype">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodePolicyViolated">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeTooMuchData">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeMissingExtension">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeBadOperation">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CloseCodeTlsHandshakeFailed">
            <anchor>CloseCode-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWebSocketServer</name>
        <filename>qwebsocketserver.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>SslMode</name>
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SecureMode">
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonSecureMode">
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWebSocketServer</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>QWebSocketServer</anchor>
            <arglist>(const QString &amp;serverName, SslMode secureMode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QWebSocketServer</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>dtor.QWebSocketServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>listen</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>listen</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isListening</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>isListening</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxPendingConnections</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>setMaxPendingConnections</anchor>
            <arglist>(int numConnections)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxPendingConnections</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>maxPendingConnections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>serverPort</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>serverPort</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>serverAddress</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>serverAddress</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>serverUrl</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>serverUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SslMode</type>
            <name>secureMode</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>secureMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(int socketDescriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>socketDescriptor</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>socketDescriptor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPendingConnections</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>hasPendingConnections</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWebSocket *</type>
            <name>nextPendingConnection</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>nextPendingConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWebSocketProtocol::CloseCode</type>
            <name>error</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pauseAccepting</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>pauseAccepting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resumeAccepting</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>resumeAccepting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServerName</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>setServerName</anchor>
            <arglist>(const QString &amp;serverName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serverName</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>serverName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxy</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>setProxy</anchor>
            <arglist>(const QNetworkProxy &amp;networkProxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy</type>
            <name>proxy</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslConfiguration</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>setSslConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;sslConfiguration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>sslConfiguration</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>sslConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QWebSocketProtocol::Version&gt;</type>
            <name>supportedVersions</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>supportedVersions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptError</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>acceptError</anchor>
            <arglist>(QAbstractSocket::SocketError socketError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serverError</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>serverError</anchor>
            <arglist>(QWebSocketProtocol::CloseCode closeCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>originAuthenticationRequired</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>originAuthenticationRequired</anchor>
            <arglist>(QWebSocketCorsAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConnection</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>newConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>peerVerifyError</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>peerVerifyError</anchor>
            <arglist>(const QSslError &amp;error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sslErrors</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>sslErrors</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closed</name>
            <anchorfile>qwebsocketserver.html</anchorfile>
            <anchor>closed</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtWebSockets.WebSocket</name>
        <filename>qml-qtwebsockets-websocket.html</filename>
    </compound>
    <compound kind="class">
        <name>QtWebSockets.WebSocketServer</name>
        <filename>qml-qtwebsockets-websocketserver.html</filename>
    </compound>
</tagfile>
