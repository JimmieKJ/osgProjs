<!--
osgEarth Sample - OpenGL Tessellation Shaders

This example injects a Tessellation Control Shader (TCS) and 
Tessellation Evaluation Shader (TES) into the terrain rendering
pipeline. This is EXPERIMENTAL so please be advised of the 
following caveats:

 * Terrain skirts will not render. Set "skirt_ratio" to zero or you
   will get GL errors.
 * Set gpu_tessellation="true" on the terrain options.
 * EarthManipulator doesn't like GL_PATCHES (yet). Use the viewpoints.
  
Press 'w' for wireframe mode to see the tessellation!
-->

<map name="readymap.org" type="geocentric">
    
    <options>         
        <terrain driver="rex" first_lod="1" skirt_ratio="0" gpu_tessellation="true"/>
    </options>
    
    <image name="readymap_imagery" driver="tms">
        <url>http://readymap.org/readymap/tiles/1.0.0/7/</url>
    </image>
        
    <elevation name="readymap_elevation" driver="tms">
        <url>http://readymap.org/readymap/tiles/1.0.0/116/</url>
    </elevation>    
	
    <image name="pavement" driver="agglite" enabled="true" shared="true" visible="false" min_level="7" max_data_level="10">  
        <features name="world" driver="ogr">
            <url>H:/data/xplane/aerodrome/APTBoundary_all.shp</url>
            <build_spatial_index>true</build_spatial_index>
        </features> 
		<layout>
			<level max_range="50000" class="default"/>
		</layout>
        <styles>
            <style type="text/css">
                default {
				   fill: #ffffffff;
                }            
            </style>
        </styles>    
        <shared_sampler>maskTex</shared_sampler>
        <shared_matrix>maskMatrix</shared_matrix>        
    </image>	
    
    <extensions>
    
        <terrainshader>
            <code><![CDATA[
            
                #version 430 compatibility
                #pragma vp_entryPoint "configureTess"
                #pragma vp_location   "tess_control"
                
                // Access to the rasterized mask layer. In the future these will be programmable..
                uniform sampler2D maskTex;
                uniform mat4      maskMatrix;

                // General tile coords [0..1]
                in vec4 oe_layer_tilec;
                
                uniform vec4 oe_tile_key;

                layout(vertices=3) out;
                
                uniform float level = 5.0;
                
                // Internal helper functions:
                void VP_LoadVertex(in int);
                
                void configureTess()
                {                       
                    // Only required for the first invocation:
                    if ( gl_InvocationID == 0 )
                    {                                    
                        // Sample the mask texture at all 3 verts of the triangle:     
                        vec3 v = vec3(0);

                        if ( oe_tile_key.z >= 8 )
                        {
                            for(int i=0; i<3; ++i)
                            {
                                VP_LoadVertex(i);
                                v[i] = texture(maskTex, (maskMatrix*oe_layer_tilec).st).a;
                                v[i] = 1.0 - 2.0*abs(v[i]-0.5); // remap to [0..1] where 0 = in/out, 1 = on the line.
                            }
                        }
                        
                        // Average the weights for each edge level:
                        gl_TessLevelOuter[0] = 1.0 + level*mix(v[1], v[2], 0.5);
                        gl_TessLevelOuter[1] = 1.0 + level*mix(v[2], v[0], 0.5);
                        gl_TessLevelOuter[2] = 1.0 + level*mix(v[0], v[1], 0.5);
                        
                        // Average all weights for the inner ring count:
                        gl_TessLevelInner[0] = 1.0 + (level-1.0)*(v.x+v.y+v.z)/3.0;
                            
                        // Reset the loaded vertex to the current invocation.
                        VP_LoadVertex(0);
                    }
                }
                
            ]]></code>
        </terrainshader>
        
        <terrainshader>
            <code><![CDATA[            
                #version 410
                #pragma vp_name       "Terrain TES Shader"
                #pragma vp_entryPoint "generateVertex"
                #pragma vp_location   "tess_eval"
                
                uniform sampler2D oe_layer_2_tex;
                uniform mat4      oe_layer_2_texMatrix;
                in vec4 oe_layer_tilec;
                in vec4 vp_Vertex;
                in vec3 vp_Normal;

                // osgEarth terrain is always CCW winding
                layout(triangles, equal_spacing, ccw) in;

                // Internal helpers:
                void VP_Interpolate3();
                void VP_EmitVertex();
                
                // User must supply interpolators for all the base types:
                
                float VP_Interpolate3(float a, float b, float c) {
                    return dot(gl_TessCoord.xyz, vec3(a,b,c));
                }
                
                vec2 VP_Interpolate3(vec2 a, vec2 b, vec2 c) {
                    return vec2(dot(gl_TessCoord.xyz, vec3(a.x,b.x,c.x)),
                                dot(gl_TessCoord.xyz, vec3(a.y,b.y,c.y)));
                }

                vec3 VP_Interpolate3(vec3 a, vec3 b, vec3 c) {
                    return vec3(dot(gl_TessCoord.xyz, vec3(a.x,b.x,c.x)),
                                dot(gl_TessCoord.xyz, vec3(a.y,b.y,c.y)),
                                dot(gl_TessCoord.xyz, vec3(a.z,b.z,c.z)));
                }

                vec4 VP_Interpolate3(vec4 a, vec4 b, vec4 c) {
                    return vec4(dot(gl_TessCoord.xyz, vec3(a.x,b.x,c.x)),
                                dot(gl_TessCoord.xyz, vec3(a.y,b.y,c.y)),
                                dot(gl_TessCoord.xyz, vec3(a.z,b.z,c.z)),
                                dot(gl_TessCoord.xyz, vec3(a.w,b.w,c.w)));
                }
                
                uniform float offset = -100.0;
                
                // simplest possible pass-though:
                void generateVertex()
                {                    
                    VP_Interpolate3();
                    
                    float mask = texture(oe_layer_2_tex, (oe_layer_2_texMatrix*oe_layer_tilec).st).a;
                    vp_Normal = normalize(vp_Normal);
                    vp_Vertex.xyz += vp_Normal * offset * mask;
                    
                    VP_EmitVertex();
                }
            ]]></code>
        </terrainshader>
        
        <viewpoints>
            <viewpoint name="San Francisco" heading="8.806974516644791" height="4465.397310772911" lat="37.55814749233749" long="-122.334535784141" pitch="-34.79540299384382" range="78142.53643278375" srs="+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs " />
            <viewpoint name="SFO" heading="27.57985140028968" height="4465.588079094887" lat="37.56462223501358" long="-122.4153260104297" pitch="-31.6655000582341" range="72.45169535764561"/>
            <viewpoint name="BOS" heading="-3.005093201136807" height="10.50455343350768" lat="42.3626762635888" long="-71.01223797197133" pitch="-46.98927698631228" range="8966.122488728281"/>
        </viewpoints>
        
    </extensions>
</map>
